#! ================================================================================================
#!                           DEVUNA - Application Builder Class Templates
#! ================================================================================================
#! Author:  Randy Rogers (KCR) <rrogers@devuna.com>
#! Notice:  Copyright (C) 2017, Devuna
#!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
#! ================================================================================================
#!    This file is part of Devuna-Common (https://github.com/Devuna/Devuna-Common)
#!
#!    Devuna-Common is free software: you can redistribute it and/or modify
#!    it under the terms of the MIT License as published by
#!    the Open Source Initiative.
#!
#!    Devuna-Common is distributed in the hope that it will be useful,
#!    but WITHOUT ANY WARRANTY; without even the implied warranty of
#!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#!    MIT License for more details.
#!
#!    You should have received a copy of the MIT License
#!    along with Devuna-Common.  If not, see <https://opensource.org/licenses/MIT>.
#! ================================================================================================
#!
#! Generic groups used by OOP extensions
#!
#!
#GROUP(%GetControlName,%SearchReport=%False),PRESERVE      #!Gets the control name for the current active template
#IF(%Searchreport)
  #FIND(%ReportControlInstance,%ActiveTemplateInstance,%ReportControl)
  #RETURN (%ReportControl)
#ELSE
  #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
  #RETURN (%Control)
#END
#!
#!
#GROUP(%GetObjectName,%Flag,%Instance=0),AUTO
#ALIAS(%LocalClassItem,%ClassItem,%Instance)
#ALIAS(%LocalObjectName,%ThisObjectName,%Instance)
#EQUATE(%OldClassItem,INSTANCE(%LocalClassItem))
#CALL(%NoCaseFix,%LocalClassItem,%Flag)
#EQUATE(%RetVal,%LocalObjectName)
#SELECT(%LocalClassItem,%OldClassItem)
#RETURN(%RetVal)
#!
#!
#GROUP(%NoCaseFix,*%Symbol,%FixValue),AUTO
#DECLARE(%i,LONG)
#FIX(%Symbol,%FixValue)
#IF(%Symbol NOT=%FixValue)
  #LOOP,FOR(%i,1,ITEMS(%Symbol))
    #SELECT(%Symbol,%i)
    #IF(UPPER(%Symbol)=UPPER(%FixValue))
      #BREAK
    #ENDIF
  #ENDLOOP
#ENDIF
#!
#!
#!-------------------------------------------------------------------------
#GROUP(%StripPling,%Incoming)
  #IF(SUB(%Incoming,1,1)='!')
    #RETURN(SUB(%Incoming,2))
  #ELSIF(SUB(%Incoming,1,1)='=')
    #RETURN('EVALUATE(' & %StripPling(SUB(%Incoming, 2)) & ')')
  #ELSIF(UPPER(%Incoming)='TRUE' OR UPPER(%Incoming)='FALSE')
    #RETURN(%Incoming)
  #ELSIF(UPPER(%Incoming)='''TRUE''' OR UPPER(%Incoming)='''FALSE''')
    #RETURN(%Incoming)
  #ELSE
    #RETURN( '''' & QUOTE(%Incoming) & '''' )
  #ENDIF

