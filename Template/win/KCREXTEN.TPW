#! ================================================================================================
#!                           DEVUNA - Application Builder Class Templates
#! ================================================================================================
#! Author:  Randy Rogers (KCR) <rrogers@devuna.com>
#! Notice:  Copyright (C) 2017, Devuna
#!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
#! ================================================================================================
#!    This file is part of Devuna-Common (https://github.com/Devuna/Devuna-Common)
#!
#!    Devuna-Common is free software: you can redistribute it and/or modify
#!    it under the terms of the MIT License as published by
#!    the Open Source Initiative.
#!
#!    Devuna-Common is distributed in the hope that it will be useful,
#!    but WITHOUT ANY WARRANTY; without even the implied warranty of
#!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#!    MIT License for more details.
#!
#!    You should have received a copy of the MIT License
#!    along with Devuna-Common.  If not, see <https://opensource.org/licenses/MIT>.
#! ================================================================================================
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_GlobalClass,'Exclude Global Class Generation'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_GlobalClass (Devuna)','Exclude Classes from Global Instantiation')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('The default ABC templates generate an instance OF each '),AT(10)
  #DISPLAY ('base class when the target type is DLL and the ''generate'),AT(10)
  #DISPLAY ('template globals and ABC''s as EXTERNAL'' check box is'),AT(10)
  #DISPLAY ('not checked.  This can cause compile errors for some'),AT(10)
  #DISPLAY ('ABC compatible classes that require supporting libraries.'),AT(10)
  #DISPLAY ('For example, our Network Class will cause compiler errors.'),AT(10)
  #DISPLAY ('Adding ''NetworkClass'' to the list box below will override'),AT(10)
  #DISPLAY ('the default template behaviour and eliminate the compiler'),AT(10)
  #DISPLAY ('errors.'),AT(10)
  #DISPLAY ('')
  #PROMPT  ('Exclude All Classes',CHECK),%ExcludeAllClasses,AT(10),DEFAULT(%FALSE)
  #PROMPT  ('Exclude All Non-Topspeed ABC Classes',CHECK),%ExcludeAll,AT(10),DEFAULT(%FALSE)
  #ENABLE(%ExcludeAll)
    #PROMPT  ('Include Capesoft ABC Classes',CHECK),%IncludeCapesoft,AT(10),DEFAULT(%TRUE)
    #BOXED('Capesoft Options'),WHERE(%IncludeCapesoft)
      #PROMPT  ('Include FileManager Classes',CHECK),%IncludeFileManager,AT(10),DEFAULT(%TRUE)
      #PROMPT  ('Include Message Classes',CHECK),%IncludeMessage,AT(10),DEFAULT(%TRUE)
      #PROMPT  ('Include NetTalk Classes',CHECK),%IncludeNetTalk,AT(10),DEFAULT(%FALSE)
    #ENDBOXED
    #PROMPT  ('Include Devuna ABC Classes',CHECK),%IncludeDevuna,AT(10),DEFAULT(%TRUE)
    #BOXED('Devuna Options'),WHERE(%IncludeDevuna)
      #PROMPT  ('Include Edit Classes',CHECK),%IncludeEdit,AT(10),DEFAULT(%TRUE)
      #PROMPT  ('Include ImageEx Classes',CHECK),%IncludeImageEx,AT(10),DEFAULT(%FALSE)
      #PROMPT  ('Include Scintilla Classes',CHECK),%IncludeScintilla,AT(10),DEFAULT(%FALSE)
      #PROMPT  ('Include Tablet Classes',CHECK),%IncludeTablet,AT(10),DEFAULT(%FALSE)
      #PROMPT  ('Include UXTheme Classes',CHECK),%IncludeUXTheme,AT(10),DEFAULT(%FALSE)
    #ENDBOXED
    #PROMPT  ('Include COM Classes',CHECK),%IncludeCOM,AT(10),DEFAULT(%FALSE)
    #PROMPT  ('Include RADProfiler Class',CHECK),%IncludeRADProfiler,AT(10),DEFAULT(%FALSE)
    #PROMPT  ('Include Miscellaneous ABC Classes',CHECK),%IncludeMiscellaneous,AT(10),DEFAULT(%FALSE)
    #PROMPT  ('Include ProDomus ABC Classes',CHECK),%IncludeProDomus,AT(10),DEFAULT(%FALSE)
  #ENDENABLE
  #DISPLAY ('')
  #DISPLAY ('Exclude Class:')
  #PROMPT('&Exclude Class:',FROM(%pClassname)),%ExcludeClass,MULTI('ABC Classes'),INLINE
  #DISPLAY ('')
  #PROMPT ('List Classes in Global Data',CHECK),%ListClasses,AT(10),DEFAULT(%FALSE)
#ENDBOXED
#!
#AT(%AfterReadABCFiles)
#IF(NOT VAREXISTS(%ReturnValue))
  #DECLARE(%ReturnValue)
#ENDIF
#IF(NOT VAREXISTS(%ValueConstruct))
  #DECLARE(%ValueConstruct)
#ENDIF
#IF(NOT VAREXISTS(%SortedClassname))
  #DECLARE(%SortedClassname),MULTI,UNIQUE
#ENDIF
#FOR(%pClassname)
  #ADD(%SortedClassname,%pClassname)
#ENDFOR
#IF(%ExcludeAllClasses)
  #FOR(%SortedClassname)
    #FIX(%pClassname,%SortedClassname)
    #CASE(%pClassname)
    #OF('ErrorClass')
      #CYCLE
    #OF('INIClass')
      #CYCLE
    #OF('kcrINIClass')
      #CYCLE
    #OF('VistaINIClass')
      #CYCLE
    #OF('FuzzyClass')
      #CYCLE
    #ELSE
      #DELETE(%pClassname)
    #ENDCASE
  #ENDFOR
#ELSIF(%ExcludeAll)
  #FOR(%SortedClassname)
    #FIX(%ExcludeClass,%SortedClassname)
    #IF(%ExcludeClass = %SortedClassname)
      #FIX(%pClassname,%SortedClassname)
      #DELETE(%pClassname)
      #CYCLE
    #ENDIF
    #!
    #CALL(%IsTopspeedClass,%SortedClassname),%ReturnValue
    #IF(%ReturnValue = %True)
      #CYCLE
    #ENDIF
    #!
    #IF(%IncludeCapesoft)
      #CALL(%IsCapesoftClass,%SortedClassname),%ReturnValue
      #IF(%ReturnValue = %True)
        #CYCLE
      #ENDIF
    #ENDIF
    #!
    #IF(%IncludeDevuna)
      #CALL(%IsDevunaClass,%SortedClassname),%ReturnValue
      #IF(%ReturnValue = %True)
        #CYCLE
      #ENDIF
    #ENDIF
    #!
    #IF(%IncludeCOM)
      #CALL(%IsCOMClass,%SortedClassname),%ReturnValue
      #IF(%ReturnValue = %True)
        #CYCLE
      #ENDIF
    #ENDIF
    #!
    #IF(%IncludeRADProfiler)
      #CALL(%IsRADProfilerClass,%SortedClassname),%ReturnValue
      #IF(%ReturnValue = %True)
        #CYCLE
      #ENDIF
    #ENDIF
    #!
    #IF(%IncludeMiscellaneous)
      #CALL(%IsMiscellaneousClass,%SortedClassname),%ReturnValue
      #IF(%ReturnValue = %True)
        #CYCLE
      #ENDIF
    #ENDIF
    #!
    #IF(%IncludeProDomus)
      #CALL(%IsProDomusClass,%SortedClassname),%ReturnValue
      #IF(%ReturnValue = %True)
        #CYCLE
      #ENDIF
    #ENDIF
    #!
    #FIX(%pClassname,%SortedClassname)
    #DELETE(%pClassname)
  #ENDFOR
#ELSE
  #FOR(%ExcludeClass)
    #FIX(%pClassname,%ExcludeClass)
    #IF(%pClassname = %ExcludeClass)
      #DELETE(%pClassname)
    #ENDIF
  #ENDFOR
#ENDIF
#!
#ENDAT
#!
#!
#AT(%AfterGlobalIncludes),WHERE(%ListClasses)
  #FOR(%pClassname)
!!==>%pClassname
  #ENDFOR
#!
#ENDAT
#!
#!
#!=========================================================
#GROUP(%IsDevunaClass,%ClassName)
#SET(%ReturnValue,%False)
#IF(%IncludeEdit)
  #CASE(%ClassName)
  #OF('CCalendar')
  #ELSE
    #IF(UPPER(SUB(%ClassName,1,3)) = 'KCR')
      #SET(%ReturnValue,%True)
    #ELSIF(UPPER(%ClassName) = 'CICONPICKER')
      #SET(%ReturnValue,%True)
    #ENDIF
  #ENDCASE
#ENDIF
#!
#IF(%IncludeImageEx)
  #CASE(%ClassName)
    #OF('ImageExViewerDrawingClass')
       #SET(%ReturnValue,%True)
  #ENDCASE
#ENDIF
#!
#IF(%IncludeScintilla)
  #CASE(%ClassName)
  #OF('CdoubleBuffer')
  #OROF('CSciControl')
  #OROF('CSciViewer')
  #OROF('ctHWNDList')
  #OROF('ctSciSubClass')
  #OROF('kcrAsciiFileClass')
  #OROF('kcrAsciiPrintClass')
  #OROF('kcrAsciiSearchClass')
  #OROF('kcrAsciiViewerClass')
    #SET(%ReturnValue,%True)
  #ENDCASE
#ENDIF
#!
#IF(%IncludeTablet)
  #CASE(%ClassName)
  #OF('tpcPrintPreviewClass')
  #OROF('tpcWindowManagerClass')
    #SET(%ReturnValue,%True)
  #ENDCASE
#ENDIF
#!
#IF(%IncludeUXTheme)
  #CASE(%ClassName)
  #OF('CuxTheme')
  #OROF('CuxThemedButton')
  #OROF('CuxThemedCheckBox')
  #OROF('CuxThemedControl')
  #OROF('CuxThemedEntry')
  #OROF('CuxThemedGroup')
  #OROF('CuxThemedRadio')
    #SET(%ReturnValue,%True)
  #ENDCASE
#ENDIF
#!
#RETURN %ReturnValue
#!
#!
#!=========================================================
#GROUP(%IsCOMClass,%ClassName)
#CASE(%ClassName)
#OF('CCOMIniter')
#OROF('CCOMObject')
#OROF('CCOMUserObject')
#OROF('cLicencedOleWrapper')
#OROF('cOlePicture')
  #RETURN %True
#ELSE
  #RETURN %False
#ENDCASE
#!
#!
#!=========================================================
#!
#!
#!=========================================================
#GROUP(%IsRADProfilerClass,%ClassName)
#CASE(%ClassName)
#OF('RADProfilerClass')
  #RETURN %True
#ELSE
  #RETURN %False
#ENDCASE
#!
#!
#!=========================================================
#GROUP(%IsMiscellaneousClass,%ClassName)
#CASE(%ClassName)
#OF('POXPButtonClass')
#OROF('POXPCheckboxClass')
#OROF('POXPEntryClass')
#OROF('POXPGroupClass')
#OROF('POXPRadioClass')
#OROF('RADProfilerClass')
#OROF('SubClassWindowManager')
#OROF('SysShutdownClass')
#OROF('SysTrayClass')
  #RETURN %True
#ELSE
  #RETURN %False
#ENDCASE
#!
#!
#!=========================================================
#GROUP(%IsCapeSoftClass,%ClassName)
#SET(%ReturnValue,%False)
#IF(%IncludeFileManager)
  #CASE(%ClassName)
  #OF('NoneFM')
    #SET(%ReturnValue,%True)
  #ENDCASE
#ENDIF
#!
#IF(%IncludeMessage)
  #CASE(%ClassName)
  #OF('csEnhancedMessageClass')
  #OROF('csStandardMessageClass')
    #SET(%ReturnValue,%True)
  #ENDCASE
#ENDIF
#!
#IF(%IncludeNetTalk)
  #CASE(%ClassName)
  #OF('_NetAll')
  #OROF('_NetUnicode')
  #OROF('_NetWebServerHandleRequest')
  #OROF('_NetWebServerWorker')
  #OROF('NetAutoCloseServer')
  #OROF('NetChat')
  #OROF('NetClient')
  #OROF('NetCloseApps')
  #OROF('NetDIP')
  #OROF('NetDUN')
  #OROF('NetEmailReceive')
  #OROF('NetEmailSend')
  #OROF('NetFileServer')
  #OROF('NetFTPClientControl')
  #OROF('NetFTPClientData')
  #OROF('NetGetFile')
  #OROF('NetGetTime')
  #OROF('NetNewsReceive')
  #OROF('NetNewsSend')
  #OROF('NetRefresh')
  #OROF('NetSecurityClient')
  #OROF('NetSecurityServer')
  #OROF('NetServer')
  #OROF('NetSimple')
  #OROF('NetSimpleMultiClient')
  #OROF('NetSNMP')
  #OROF('NetTimeServer')
  #OROF('NetTrapListener')
  #OROF('NetWebClient')
  #OROF('NetWebServer')
  #OROF('NoneFM')
    #SET(%ReturnValue,%True)
  #ENDCASE
#ENDIF
#RETURN %ReturnValue
#!
#!
#!=========================================================
#GROUP(%IsProDomusClass,%ClassName)
#CASE(%ClassName)
#OF('PDStrBrowseClass')
#OROF('PDStrErrorClass')
#OROF('PDStrPicBrowseClass')
#OROF('PDStrPicErrorClass')
#OROF('PDStrPicTipCT')
#OROF('PDStrPicToolbarListboxClass')
#OROF('PDStrPicToolbarReltreeClass')
#OROF('PDStrPicToolbarUpdateClass')
#OROF('PDStrPicTranslatorClass')
#OROF('PDStrToolbarListboxClass')
#OROF('PDStrToolbarReltreeClass')
#OROF('PDStrToolbarUpdateClass')
#OROF('PDStrTranslatorClass')
#OROF('PDStrWindowManager')
#OROF('PDTypBrowseClass')
#OROF('PDTypErrorClass')
#OROF('PDTypPicBrowseClass')
#OROF('PDTypPicErrorClass')
#OROF('PDTypPicTipCT')
#OROF('PDTypPicToolbarListboxClass')
#OROF('PDTypPicToolbarReltreeClass')
#OROF('PDTypPicToolbarUpdateClass')
#OROF('PDTypPicTranslatorClass')
#OROF('PDTypTipCT')
#OROF('PDTypToolbarListboxClass')
#OROF('PDTypToolbarReltreeClass')
#OROF('PDTypToolbarUpdateClass')
#OROF('PDTypTranslatorClass')
#OROF('TPChrCT')
#OROF('TPEnvCT')
#OROF('TPEnvPicCT')
#OROF('TPPicCT')
#OROF('TPStrCT')
#OROF('TPStrPicCT')
#OROF('TPTypCT')
#OROF('TPTypPicCT')
  #RETURN %True
#ELSE
  #RETURN %False
#ENDCASE
#!
#!
#!=========================================================
#GROUP(%IsTopspeedClass,%ClassName)
#CASE(%ClassName)
#OF('AddressVisual')
#OROF('ADOBlob')
#OROF('ADOConnection')
#OROF('ADOConnectionEvents')
#OROF('ADOError')
#OROF('ADOErrors')
#OROF('ADOField')
#OROF('ADOFields')
#OROF('ADOManager')
#OROF('ADOProcCommCalled')
#OROF('ADOProcCommCaller')
#OROF('ADOProcessManagerClass')
#OROF('ADORecordsetEvents')
#OROF('ADOResultSet')
#OROF('AdrMgr')
#OROF('AdrVisualUpdate')
#OROF('Array')
#OROF('ArrayI')
#OROF('AsciiDocumentClass')
#OROF('AsciiFileClass')
#OROF('AsciiPrintClass')
#OROF('AsciiSearchClass')
#OROF('AsciiViewerClass')
#OROF('AStringValue')
#OROF('AttributeParser')
#OROF('Base64FileMgr')
#OROF('BaseArray')
#OROF('BreakManagerClass')
#OROF('BrowseClass')
#OROF('BrowseEIPManager')
#OROF('BrowseToolbarClass')
#OROF('BufferedPairsClass')
#OROF('CADO')
#OROF('CalendarBaseClass')
#OROF('CalendarClass')
#OROF('CalendarSmallClass')
#OROF('cBrowse')
#OROF('CBStr')
#OROF('CCollection')
#OROF('CCOMError')
#OROF('CCOMIniter')
#OROF('CCommand')
#OROF('CCommand15')
#OROF('CCOMObject')
#OROF('CCOMUserObject')
#OROF('CConnection')
#OROF('CConnectionEvents')
#OROF('cCWAdo')
#OROF('CDateConverter')
#OROF('CDecimal')
#OROF('CDropTarget')
#OROF('CDynaCollection')
#OROF('CError')
#OROF('CErrors')
#OROF('CField')
#OROF('CField15')
#OROF('CField20')
#OROF('cFieldPair')
#OROF('CFields')
#OROF('CFields15')
#OROF('CFields20')
#OROF('cFilterBase')
#OROF('cFilterList')
#OROF('CFtpConnection')
#OROF('CHttpConnection')
#OROF('CInterface')
#OROF('ConstantClass')
#OROF('CooperationClass')
#OROF('CParameter')
#OROF('CParameters')
#OROF('CProperties')
#OROF('CProperty')
#OROF('CProtocolGenerator')
#OROF('CProtocolSocket')
#OROF('CRecordSet')
#OROF('CRecordSet15')
#OROF('CRecordSet20')
#OROF('CRecordSet21')
#OROF('CRecordsetEvents')
#OROF('CriticalProcedure')
#OROF('CriticalSection')
#OROF('CSafeArray')
#OROF('CSIDLFolder')
#OROF('CSocketConnection')
#OROF('CStorage')
#OROF('CStr')
#OROF('CVariant')
#OROF('CWEIPManager')
#OROF('CWideStr')
#OROF('CWinINet')
#OROF('CWinSock20')
#OROF('CWRecordset')
#OROF('CyberCash')
#OROF('DbAuditManager')
#OROF('DbChangeManager')
#OROF('DbLogFileManager')
#OROF('DocumentClass')
#OROF('DocumentEngine')
#OROF('DocumentFileMgr')
#OROF('DocumentHandler')
#OROF('EditCalendarClass')
#OROF('EditCheckClass')
#OROF('EditClass')
#OROF('EditColorClass')
#OROF('EditDropComboClass')
#OROF('EditDropListClass')
#OROF('EditEntryClass')
#OROF('EditFileClass')
#OROF('EditFontClass')
#OROF('EditLookupClass')
#OROF('EditMultiSelectClass')
#OROF('EditSpinClass')
#OROF('EditTextClass')
#OROF('EIPManager')
#OROF('Element')
#OROF('EntryLocatorClass')
#OROF('ErrorClass')
#OROF('ErrorStatusClass')
#OROF('FieldPairsClass')
#OROF('FileDropClass')
#OROF('FileDropComboClass')
#OROF('FileManager')
#OROF('FilterLocatorClass')
#OROF('FormVCRClass')
#OROF('FTPTransport')
#OROF('FuzzyClass')
#OROF('GraphAreaClass')
#OROF('GraphAxisClass')
#OROF('GraphBarClass')
#OROF('GraphBarWithAccumulationClass')
#OROF('GraphBasicClass')
#OROF('GraphClass')
#OROF('GraphColumnClass')
#OROF('GraphColumnWithAccumulationClass')
#OROF('GraphDiagramClass')
#OROF('GraphFloatingAreaClass')
#OROF('GraphFloatingBarClass')
#OROF('GraphFloatingColumnClass')
#OROF('GraphLegendClass')
#OROF('GraphLineClass')
#OROF('GraphNodeClass')
#OROF('GraphPieClass')
#OROF('GraphPrimitiveClass')
#OROF('GraphScatterClass')
#OROF('GraphTextClass')
#OROF('GraphTitleClass')
#OROF('GridClass')
#OROF('HistHandlerClass')
#OROF('HtmlDocumentClass')
#OROF('HtmlEngine')
#OROF('HTMLGenerator')
#OROF('HTMLReportGenerator')
#OROF('ImageManager')
#OROF('IncrementalLocatorClass')
#OROF('INIClass')
#OROF('kcrINIClass')
#OROF('LevelManagerClass')
#OROF('LinkPointClass')
#OROF('LocatorClass')
#OROF('MapAStringToAString')
#OROF('MDISynchronization')
#OROF('MessageClass')
#OROF('MIMEDoc')
#OROF('MIMEVisual')
#OROF('MsgBoxClass')
#OROF('Mutex')
#OROF('MyString')
#OROF('NameGenerator')
#OROF('NNTPTransport')
#OROF('OpenFormatInfo')
#OROF('OpenFormatStack')
#OROF('PDFGeneratorClass')
#OROF('PDFReportGenerator')
#OROF('PDFTargetGenerator')
#OROF('PopupClass')
#OROF('PrintPreviewClass')
#OROF('ProcessClass')
#OROF('QEditEntryClass')
#OROF('QEIPManager')
#OROF('QProcessManagerClass')
#OROF('QueryClass')
#OROF('QueryFormClass')
#OROF('QueryFormVisual')
#OROF('QueryListClass')
#OROF('QueryListVisual')
#OROF('QueryVisual')
#OROF('QueueProcessManagerClass')
#OROF('QuotedPrintFM')
#OROF('RecipientControl')
#OROF('RelationManager')
#OROF('ReportAttributeManager')
#OROF('ReportManager')
#OROF('ReportTargetSelectorClass')
#OROF('RTFControlClass')
#OROF('Rule')
#OROF('RulesCollection')
#OROF('RulesManager')
#OROF('SACallbackWrapper')
#OROF('SearchCriteria')
#OROF('SelectFileClass')
#OROF('Semaphore')
#OROF('SMTPTransport')
#OROF('SpecialFolder')
#OROF('StandardBehavior')
#OROF('StandardErrorLogClass')
#OROF('StepClass')
#OROF('StepCustomClass')
#OROF('StepLocatorClass')
#OROF('StepLongClass')
#OROF('StepRealClass')
#OROF('StepStringClass')
#OROF('SystemDateTime')
#OROF('TableMapper')
#OROF('TargetGenerator')
#OROF('TColEditClass')
#OROF('TColOpeClass')
#OROF('TConnEditClass')
#OROF('TELNETTransport')
#OROF('TextGenerator')
#OROF('TextReportGenerator')
#OROF('TextWindowClass')
#OROF('ThreadLocker')
#OROF('ToolbarClass')
#OROF('ToolbarFormVCRClass')
#OROF('ToolbarListboxClass')
#OROF('ToolbarReltreeClass')
#OROF('ToolbarTarget')
#OROF('ToolbarUpdateClass')
#OROF('TransactionManager')
#OROF('TranslatorClass')
#OROF('TriggerManager')
#OROF('ViewManager')
#OROF('VisitorClass')
#OROF('VistaINIClass')
#OROF('VtQueueTransport')
#OROF('WbArgumentIterator')
#OROF('WbBrokerClass')
#OROF('WbBrowserManagerClass')
#OROF('WbBrowserPropertiesClass')
#OROF('WbClientManagerClass')
#OROF('WbControlHtmlProperties')
#OROF('WbCookieClass')
#OROF('WbCoreHtmlProperties')
#OROF('WbCoreRunHtmlProperties')
#OROF('WbDummyLinkInWbHook')
#OROF('WbFileProperties')
#OROF('WbFilesClass')
#OROF('WbFrameClass')
#OROF('WbGridHtmlProperties')
#OROF('WbGuardClass')
#OROF('WbHitCounterClass')
#OROF('WbHitFileINIClass')
#OROF('WbHitManagerClass')
#OROF('WbHtmlClass')
#OROF('WbHtmlFontClass')
#OROF('WbHttpClass')
#OROF('WbHttpPageBaseClass')
#OROF('WbHttpPageBrowserClass')
#OROF('WbHttpPageJavaClass')
#OROF('WbMultiPartIterator')
#OROF('WbPropertiesClass')
#OROF('WbQueryButtonHtmlProperties')
#OROF('WbServerClass')
#OROF('WbShutDownClass')
#OROF('WbSubmitItemClass')
#OROF('WbTableProperties')
#OROF('WbTextOutputClass')
#OROF('WbUrlEncodingIterator')
#OROF('WbWindowBaseClass')
#OROF('WbWindowClass')
#OROF('WbWindowHtmlProperties')
#OROF('WbWindowManagerClass')
#OROF('WebDetailProperties')
#OROF('WindowExtenderClass')
#OROF('WindowManager')
#OROF('WindowResizeClass')
#OROF('WinSock')
#OROF('WMFDocumentParser')
#OROF('WMFParser')
#OROF('XMLGenerator')
#OROF('XMLReportGenerator')
  #RETURN %True
#ELSE
  #RETURN %False
#ENDCASE
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_GlobalDataExport,'Control Global Data Export'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_GlobalDataExport (Devuna)','Remove template globals and ABC libraries from EXP file')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template removes the template globals and ABC'),AT(10)
  #DISPLAY ('library routines from the EXP file allowing you to create a'),AT(10)
  #DISPLAY ('DLL that won''t interfere with other application DLL''s'),AT(10)
  #DISPLAY ('')
  #PROMPT  ('Exclude Exported Global Data',CHECK),%ExcludeExportedGlobalData,DEFAULT(%TRUE),AT(10)
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%AfterClosingExports,'Closing the export file')
#DECLARE(%ASCIIFileRecord)
#DECLARE(%SkipTopspeed)
#SET(%SkipTopspeed,%FALSE)
#!CLOSE(%BuildFile)
#!REPLACE(%ExportFile & '.EXP',%BuildFile)
#!REMOVE(%BuildFile)
#CREATE(%Application & '.$$$')
#OPEN(%ExportFile & '.EXP'),READ
#LOOP
  #READ(%ASCIIFileRecord)
  #IF(%ASCIIFileRecord = %EOF)
    #BREAK
  #ELSE
    #IF(%SkipTopspeed)
      #IF(UPPER(%ASCIIFileRecord) = ';END OF SOFTVELOCITY ABC LIBRARY EXPORTS')
         #SET(%SkipTopspeed,%FALSE)
         #CYCLE
      #ELSIF(UPPER(%ASCIIFileRecord) = ';END OF EXPORTED GLOBAL DATA')
         #SET(%SkipTopspeed,%FALSE)
         #CYCLE
      #ENDIF
    #ELSE
      #IF(UPPER(%ASCIIFileRecord) = ';START OF SOFTVELOCITY ABC LIBRARY EXPORTS')
         #SET(%SkipTopspeed,%TRUE)
         #CYCLE
      #ELSIF(UPPER(%ASCIIFileRecord) = ';START OF EXPORTED GLOBAL DATA')
         #IF(%ExcludeExportedGlobalData)
           #SET(%SkipTopspeed,%TRUE)
           #CYCLE
         #ELSE
%ASCIIFileRecord
         #ENDIF
      #ELSIF(INSTRING('$GLOBALREQUEST',%ASCIIFileRecord,1) )
         #CYCLE
      #ELSIF(INSTRING('$GLOBALRESPONSE',%ASCIIFileRecord,1) )
         #CYCLE
      #ELSIF(INSTRING('$VCRREQUEST',%ASCIIFileRecord,1) )
         #CYCLE
      #ELSE
%ASCIIFileRecord
      #ENDIF
    #ENDIF
  #ENDIF
#ENDLOOP
#CLOSE(%ExportFile & '.EXP')
#CLOSE(%Application & '.$$$')
#REPLACE(%ExportFile & '.EXP',%Application & '.$$$')
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_CyberTools,'CyberTools Global Extension'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_CyberTools (Devuna)','Add CyberTools Library and Include File to Project')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds the Cybertool function prototypes to'),AT(10)
  #DISPLAY ('the Global Map and adds the Library to the Project file.'),AT(10)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%GlobalMap),WHERE(%Target32)
  INCLUDE('CYBERTOOLS.INC'),ONCE
#ENDAT
#!
#AT(%CustomGlobalDeclarations)
  #IF(%Target32)
    #PROJECT('CYBERTOOLS.LIB')
  #ELSE
    #ERROR('Error: CyberTools requires 32-bit application')
  #ENDIF
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_Win32,'Win32 and C_Lib Functions Global Extension'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_Win32 (Devuna)','Add Win32 and C Library prototypes and equates')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds several Win32 and C library prototypes'),AT(10)
  #DISPLAY ('to the Global Map and includes equates and type'),AT(10)
  #DISPLAY ('definitions used by several OF the Devuna templates.'),AT(10)
  #DISPLAY ('')
  #PROMPT ('Equates',CHECK),%IncludeEquates,DEFAULT(%TRUE),AT(10)
  #PROMPT ('Map',CHECK),%IncludeMap,DEFAULT(%TRUE),AT(10)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%AfterGlobalIncludes)
  #IF(%IncludeEquates)
   INCLUDE('Devuna.CLW','equates'),ONCE
  #ENDIF
   INCLUDE('KCRAPI.INC'),ONCE
#ENDAT
#!
#!
#AT(%GlobalMap)
  #IF(%IncludeMap)
INCLUDE('Devuna.CLW','map'),ONCE
  #ENDIF
INCLUDE('KCRAPIFNC.INC'),ONCE
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ICQAPI,'ICQ API Global Extension'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ICQAPI (Devuna)','Add ICQ API prototypes and equates')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds support for the ICQ API'),AT(10)
  #DISPLAY ('')
  #PROMPT ('&Developer Name:',@S31),%DeveloperName,REQ
  #PROMPT ('&Password:',@S31),%Password,REQ
  #PROMPT ('&License:',@S31),%License,REQ
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%CustomGlobalDeclarations)
  #PROJECT('ICQMAPI.LIB')
#ENDAT
#!
#AT(%AfterGlobalIncludes)
   INCLUDE('ICQAPI.CLW','equates'),ONCE
#ENDAT
#!
#AT(%GlobalMap)
INCLUDE('ICQAPI.CLW','map'),ONCE
#ENDAT
#!
#AT(%GlobalData)
ICQ:szName      CSTRING(32)
ICQ:szPassword  CSTRING(32)
ICQ:szLicense   CSTRING(32)
ICQ:bResult     BOOL
#ENDAT
#!
#AT(%AfterEntryPointCodeStatement)
ICQ:szName = '%DeveloperName'
ICQ:szPassword = '%Password'
ICQ:szLicense = '%License'
ICQ:bResult = ICQAPICall_SetLicenseKey(ICQ:szName,ICQ:szPassword,ICQ:szLicense)
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_AddDevunaClasses,'Add Devuna Classes to Application'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_AddDevunaClasses (Devuna)','Add Devuna Classes to Application')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds the Devuna Classes to an application.'),AT(10)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%AfterGlobalIncludes)
   INCLUDE('KCRCLASS.INC'),ONCE
#ENDAT
#!
#AT(%GlobalMap)
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_EnableEditMask,'Enable Edit Mask Processing for a Control'),MULTI,PROCEDURE,FIRST
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_EnableEditMask (Devuna)','Enable Edit Mask Processing for a Control')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension is to be used on screens where use of')
  #DISPLAY ('edit masking is desired on some fields but not on')
  #DISPLAY ('others.  Screens with a combination OF phone numbers')
  #DISPLAY ('and dates would be a good example.  Uncheck the edit')
  #DISPLAY ('mask check box on your window and use')
  #DISPLAY ('@P(###) ###-####P as a phone number edit picture.')
  #DISPLAY ('Also create the date fields with a picture OF @d2 (eg).')
  #DISPLAY ('')
  #DISPLAY ('Select the phone field for the Use: prompt above.')
  #DISPLAY ('The Parent: is the TAB the control is associated with.')
  #DISPLAY ('')
  #PROMPT('Use:',CONTROL),%Use,req
  #PROMPT('Parent:',CONTROL),%Parent
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%DataSection),PRIORITY(7500),DESCRIPTION('Enable Edit Mask Data')
#!AT(%DataSectionAfterWindow)
%Use:2 equate(%Use+1000)
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9050),DESCRIPTION('Enable Edit Mask Code')
#!AT(%AfterWindowOpening)
%Window{PROP:Mask} = True
#IF(%Parent)
create(%Use:2,CREATE:Entry,%Parent)
#ELSE
create(%Use:2,CREATE:Entry)
#ENDIF
#FIX(%Control,%Use)
%Use{PROP:Hide}      = True
%Use:2{PROP:Use}     = %ControlUse
%Use:2{PROP:Text}    = %Use{PROP:Text}
%Use:2{PROP:Xpos}    = %Use{PROP:Xpos}
%Use:2{PROP:Ypos}    = %Use{PROP:Ypos}
%Use:2{PROP:Height}  = %Use{PROP:Height}
%Use:2{PROP:Msg}     = %Use{PROP:Msg}
%Use:2{PROP:Follows} = %Use-1
%Use:2{PROP:Hide}    = False
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'TakeFieldEvent','(),BYTE'),PRIORITY(6150),DESCRIPTION('Enable Edit Mask Code')
#!AT(%FieldCaseAfterGenerated)
OF %Use:2
   IF ~%Window{PROP:AcceptAll}
      POST(EVENT(),%Use)
   END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_DisableEditMask,'Disable Edit Mask Processing for a Control'),MULTI,PROCEDURE,FIRST
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_DisableEditMask (Devuna)','Disable Edit Mask Processing for a Control')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension is to be used on screens where use of')
  #DISPLAY ('edit masking is desired on some fields but not on')
  #DISPLAY ('others.  Screens with a combination OF phone numbers')
  #DISPLAY ('and dates would be a good example.')
  #DISPLAY ('Set the edit mask check box on your window and use')
  #DISPLAY ('@P(###) ###-####P as a phone number edit picture.')
  #DISPLAY ('Also create the date fields with a picture OF @d2 (eg).')
  #DISPLAY ('')
  #DISPLAY ('Select the phone field for the Use: prompt above.')
  #DISPLAY ('The Parent: is the TAB the control is associated with.')
  #DISPLAY ('')
  #DISPLAY ('NOTE: If you use a calendar lookup control, be sure to')
  #DISPLAY ('DISPLAY (' & %Use & ':2) the Use control with '':2'' appended.')
  #DISPLAY ('')
  #PROMPT('Use:',CONTROL),%Use,req
  #PROMPT('Parent:',CONTROL),%Parent
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%DataSection),PRIORITY(7500),DESCRIPTION('Disable Edit Mask Data')
#!AT(%DataSectionAfterWindow)
%Use:2 EQUATE(%Use+1000)
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9050),DESCRIPTION('Disable Edit Mask Code')
#!AT(%AfterWindowOpening)
%Window{PROP:Mask} = ''
#IF(%Parent)
create(%Use:2,CREATE:Entry,%Parent)
#ELSE
create(%Use:2,CREATE:Entry)
#ENDIF
#FIX(%Control,%Use)
%Use{PROP:Hide}      = True
%Use:2{PROP:Use}     = %ControlUse
%Use:2{PROP:Text}    = %Use{PROP:Text}
%Use:2{PROP:Xpos}    = %Use{PROP:Xpos}
%Use:2{PROP:Ypos}    = %Use{PROP:Ypos}
%Use:2{PROP:Height}  = %Use{PROP:Height}
%Use:2{PROP:Msg}     = %Use{PROP:Msg}
%Use:2{PROP:Follows} = %Use-1
%Use:2{PROP:Hide}    = False
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'TakeFieldEvent','(),BYTE'),PRIORITY(6150),DESCRIPTION('Disable Edit Mask Code')
#!AT(%FieldCaseAfterGenerated)
OF %Use:2
   IF ~%Window{PROP:AcceptAll}
      POST(EVENT(),%Use)
   END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_AutoResize,'Auto Resize Window for Screen Resolution'),PROCEDURE,FIRST,REQ(KCR_Win32)
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_AutoResize (Devuna)','Auto Resize Window for Screen Resolution')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds code to automatically adjust a')
  #DISPLAY ('window size to fit the desired screen resolution.')
  #DISPLAY ('')
  #PROMPT('&Select Auto Resize Option',OPTION),%AutoResizeOption,DEFAULT('Fit Window in Client Area'),AT(10,,180)
  #PROMPT('Fit Window in Client Area',RADIO),AT(15)
  #PROMPT('Fill Client Area',RADIO),AT(15)
  #PROMPT('Fill Entire Screen',RADIO),AT(15)
  #ENABLE(%AutoResizeOption = 'Fill Entire Screen')
    #PROMPT('Restrict Maximum Window Size',CHECK),%RestrictSize,DEFAULT(%FALSE),AT(10)
    #ENABLE(%RestrictSize)
      #PROMPT('Maximum Width  (pixels):',@N4),%MaxWidth,DEFAULT(1024)
      #PROMPT('Maximum Height (pixels):',@N4),%MaxHeight,DEFAULT(768)
    #ENDENABLE
  #ENDENABLE
  #DISPLAY ('')
  #PROMPT('&Disable Minimize Box',CHECK),%DisableMinimizeBox,AT(10),DEFAULT(%FALSE)
  #PROMPT('&Ignore During Select',CHECK),%IgnoreDuringSelect,AT(10),DEFAULT(%TRUE)
  #DISPLAY ('')
  #PROMPT('&Do Not Generate Any Code',CHECK),%DoNotGenerate,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%WindowManagerMethodDataSection,'Init','(),BYTE'),DESCRIPTION('Auto Resize Window Data'),WHERE(~%DoNotGenerate)
  #CASE(%AutoResizeOption)
  #OF('Fit Window in Client Area')
windowRect    like(RECT)
clientRect    like(RECT)
bMoveWindow   byte(false)
  #OF('Fill Client Area')
clientRect    like(RECT)
  #OF('Fill Entire Screen')
winXPos       LONG(0)
winYPos       LONG(0)
winWidth      LONG,AUTO
winHeight     LONG,AUTO
  #ENDCASE
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8450),DESCRIPTION('Auto Resize Window Code'),WHERE(~%DoNotGenerate)
#!AT(%AfterWindowOpening)
  #IF(%IgnoreDuringSelect)
IF SELF.Request <> SelectRecord
  #INDENT(3)
  #ENDIF
  #!
  #CASE(%AutoResizeOption)
  #OF('Fit Window in Client Area')
kcr_GetWindowRect(%window{prop:handle},windowRect)
kcr_GetClientRect(kcr_GetParent(%window{prop:handle}),clientRect)
if windowRect.right > clientRect.right
   windowRect.right = clientRect.right
   bMoveWindow = true
end
if windowRect.bottom > clientRect.bottom
   windowRect.bottom = clientRect.bottom
   bMoveWindow = true
end
if bMoveWindow
   kcr_MoveWindow(%window{prop:handle},windowRect.left,windowRect.top,windowRect.right,windowRect.bottom,TRUE)
    #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'WindowResize(ABC)')
   Resizer.Resize()
    #ENDFOR
   if %window{prop:Center}                         !This is done to recenter window
      %window{prop:Center} = true                  !if it was resized.
   end
end
  #OF('Fill Client Area')
kcr_GetClientRect(kcr_GetParent(%window{prop:handle}),clientRect)
kcr_MoveWindow(%window{prop:handle},clientRect.left,clientRect.top,clientRect.right,clientRect.bottom,TRUE)
    #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'WindowResize(ABC)')
Resizer.Resize()
    #ENDFOR
  #OF('Fill Entire Screen')
winWidth = kcr_GetSystemMetrics(SM_CXSCREEN)
winHeight = kcr_GetSystemMetrics(SM_CYSCREEN)
    #IF(%RestrictSize)
      #IF(%MaxWidth)
IF %MaxWidth < winWidth
   winWidth = %MaxWidth
END
      #ENDIF
      #!
      #IF(%MaxHeight)
IF %MaxHeight < winHeight
   winHeight = %MaxHeight
END
      #ENDIF
    #ENDIF
kcr_MoveWindow(%window{prop:handle},winXPos,winYPos,winWidth,winHeight,TRUE)
    #IF(%RestrictSize)
IF %window{PROP:Center}                         !This is done to recenter window
   %window{PROP:Center} = TRUE                  !if it was resized.
END
    #ENDIF
    #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'WindowResize(ABC)')
Resizer.Resize()
    #ENDFOR
  #ENDCASE
  #IF(%IgnoreDuringSelect)
  #INDENT(-3)
END
  #ENDIF
  #IF(%DisableMinimizeBox)
kcr_SetWindowLong(%Window{prop:handle},GWL_STYLE,BXOR(kcr_GetWindowLong(%Window{prop:handle},GWL_STYLE),WS_MINIMIZEBOX))
  #ENDIF
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ResizeDefaults,'Add Resize Overrides'),HLP('~TPLResizeDefaults'),APPLICATION(KCR_SetResizeDefaults(KCR))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ResizeDefaults (Devuna)','Add Control Resize Override Template')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_SetResizeDefaults')
  #DISPLAY ('template to every procedure that contains the')
  #DISPLAY ('Clarion WindowResize(ABC) template.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetResizeDefaults,'Set Resize Overrides'),HLP('~TPLResizeDefaults'),PROCEDURE,REQ(WindowResize(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ResizeDefaults (Devuna)','Set Control Resize Overrides')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds code to set the default resize')
  #DISPLAY ('behaviour for controls on screens designed according')
  #DISPLAY ('to Devuna''s guidelines.')
  #DISPLAY ('')
  #PROMPT('Edit Button Location',OPTION),%EditButtonLocation,DEFAULT('Bottom')
  #PROMPT('Bottom',RADIO),AT(15)
  #PROMPT('Right',RADIO),AT(15)
  #DISPLAY ('')
#ENDBOXED
#ATSTART
  #DECLARE(%WindowResizeInstance)
  #DECLARE(%ThisControl)
  #DECLARE(%Pointer)
#ENDAT
#!
#AT(%ResizerMethodCodeSection, %ActiveTemplateParentInstance, 'Init', '(BYTE AppStrategy=AppStrategy:Resize,BYTE SetWindowMinSize=False,BYTE SetWindowMaxSize=False)'),PRIORITY(6000),DESCRIPTION('Devuna Set Resize Defaults')
SELF.AutoTransparent=True
SELF.SetParentDefaults
  #FOR(%Control),WHERE(~%ControlTool)
    #SET(%ThisControl,%Control)
    #LOOP
      #SET(%Pointer,INSTRING('.',%ThisControl,1))
      #IF(%Pointer)
        #SET(%ThisControl,SUB(%ThisControl,1,%Pointer-1) & ':' & SUB(%ThisControl,%Pointer+1,LEN(%ThisControl)-%Pointer))
      #ELSE
        #BREAK
      #ENDIF
    #ENDLOOP
    #CASE(%ControlType)
    #OF('BUTTON')
      #CASE(UPPER(%ControlParameter))
      #OF('&OK')
      #OROF('OK')
      #OROF('CANCEL')
      #OROF('CL&OSE')
      #OROF('E&XIT')
      #OROF('HELP')
      #OROF('&HELP')
SELF.SetStrategy(%ThisControl,Resize:FixRight+Resize:FixBottom,Resize:LockWidth+Resize:LockHeight)
      #OF('INSERT')
      #OROF('&INSERT')
      #OROF('&NEW')
      #OROF('&ADD')
      #OROF('CHANGE')
      #OROF('&CHANGE')
      #OROF('&EDIT')
      #OROF('DELETE')
      #OROF('&DELETE')
      #OROF('SELECT')
      #OROF('&SELECT')
        #IF(%EditButtonLocation = 'Bottom')
SELF.SetStrategy(%ThisControl,Resize:FixRight+Resize:FixBottom,Resize:LockWidth+Resize:LockHeight)
        #ELSE
SELF.SetStrategy(%ThisControl,Resize:FixRight+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
        #END
      #OF('...')
SELF.SetStrategy(%ThisControl,Resize:FixRight+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
      #ELSE
SELF.SetStrategy(%ThisControl,Resize:FixNearestX+Resize:FixNearestY,Resize:LockWidth+Resize:LockHeight)
      #ENDCASE
    #OF('CHECK')
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
    #OF('COMBO')
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:ConstantRight+Resize:LockHeight)
    #OF('ENTRY')
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:ConstantRight+Resize:LockHeight)
    #OF('GROUP')
SELF.SetStrategy(%ThisControl,Resize:FixRight+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
    #OF('LIST')
      #IF(INSTRING('DROP',%ControlStatement,1))
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:ConstantRight+Resize:LockHeight)
      #ELSE
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:ConstantRight+Resize:ConstantBottom)
      #ENDIF
    #OF('OPTION')
SELF.SetStrategy(%ThisControl,Resize:FixRight+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
    #OF('PANEL')
    #OROF('SHEET')
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:ConstantRight+Resize:ConstantBottom)
    #OF('PROMPT')
    #OROF('STRING')
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
    #OF('OPTION')
    #OROF('RADIO')
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
    #OF('SPIN')
SELF.SetStrategy(%ThisControl,Resize:FixLeft+Resize:FixTop,Resize:LockWidth+Resize:LockHeight)
    #OF('TEXT')
#!SELF.SetStrategy(%ThisControl,Resize:FixRight+Resize:FixBottom,Resize:LockWidth+Resize:LockHeight)
    #ENDCASE
  #ENDFOR
omit('SELF.SetParentDefaults')
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ApplicationHelp,'Add KCR_SetWindowHelp Template'),APPLICATION(KCR_SetWindowHelp(KCR))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ApplicationHelp (Devuna)','Add KCR_SetWindowHelp Template')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_SetWindowHelp')
  #DISPLAY ('template to every procedure that contains')
  #DISPLAY ('a window manager.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetWindowHelp,'Set Window Help Property'),PROCEDURE
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SetWindowHelp (Devuna)','Set Window Help Property')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds code to set the window help')
  #DISPLAY ('property to ~PROCEDURENAME.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
#DECLARE(%I)
#DECLARE(%J)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9100),DESCRIPTION('Set Window Help Property')
#SET(%ValueConstruct,'~' & UPPER(%Procedure))
#LOOP
  #SET(%I,INSTRING(':',%ValueConstruct))
  #IF(%I)
    #SET(%J,LEN(CLIP(%ValueConstruct))-%I)
    #SET(%ValueConstruct,SUB(%ValueConstruct,1,%I-1)&'_'&SUB(%ValueConstruct,%I+1,%J))
  #ELSE
    #BREAK
  #ENDIF
#ENDLOOP
%Window{PROP:HLP} = '%ValueConstruct'
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ApplicationHTMLHelp,'Add KCR_SetWindowHTMLHelp Template'),APPLICATION(KCR_SetWindowHTMLHelp(KCR)),REQ(cwHHGlobal(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ApplicationHTMLHelp (Devuna)','Add KCR_SetWindowHTMLHelp Template')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_SetWindowHTMLHelp')
  #DISPLAY ('template to every procedure that contains')
  #DISPLAY ('a window manager.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetWindowHTMLHelp,'Set Window HTML Help Property'),PROCEDURE,REQ(cwHHProc(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SetWindowHTMLHelp (Devuna)','Set Window HTML Help Property')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds code to set the')
  #DISPLAY ('HTML help topic to ProcedureName.htm')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
#DECLARE(%I)
#DECLARE(%J)
#ENDAT
#!
#!
#AT(%WindowManagerMethodDataSection,'TakeWindowEvent','(),BYTE'),PRIORITY(3500),DESCRIPTION('Module Identification Message')
_szMessageText     CSTRING(2048)
_szMailBody        CSTRING(2048)
_szURL             CSTRING(4096)
_szNull            CSTRING('')
_szSubject         CSTRING('IPM Notebook System Information')
#ENDAT
#!
#!
#AT(%WindowEventHandling,'AlertKey'),PRIORITY(7500),DESCRIPTION('Module Identification Message')
 CASE KEYCODE()
   OF 959   !Ctrl+Shift+?
       _szMessageText = 'Program:<9> ' & UPPER('%ProjectTarget')           & |
                       '<13,10>Module:<9,9> ' & UPPER('%Module')           & |
                       '<13,10>Procedure:<9> %Procedure'                   & |
                       '<13,10>Context String:<9> %Procedure.htm'          & |
                       '<13,10><13,10>Version:<9,9> ' & glo:Version        & |
                       '<13,10><13,10>Data Path:<9> ' & LONGPATH(glo:DataPath)

       CASE MESSAGE(_szMessageText, _szSubject,,'&Ok|&Copy|&Send|&Help',,2)
         OF 1 !ok
         OF 2 !copy
            SETCLIPBOARD(_szMessageText)
         OF 3 !send
            _szMailBody = 'Program: ' & UPPER('%ProjectTarget')            & |
                          '<37>0aModule: ' & UPPER('%Module')              & |
                          '<37>0aProcedure: %Procedure'                    & |
                          '<37>0aContext String: %Procedure.htm'           & |
                          '<37>0a<37>0aVersion: ' & glo:Version            & |
                          '<37>0a<37>0aData Path: ' & LONGPATH(glo:DataPath)
            _szURL = 'MailTo:support@devuna.com?Subject=' & _szSubject & '&Body=' & _szMailBody
            kcr_ShellExecute(%Window{prop:handle},0,_szURL,0,_szNull,1)
         OF 4
            SETCLIPBOARD('%Procedure.htm')
       END
 END
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8005),DESCRIPTION('Module Identification Message')
%Window{PROP:Alrt,255} = 959 !CtrlShift?
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9550),LAST,DESCRIPTION('Set Window HTML Help Topic')
#SET(%ValueConstruct,%Procedure & '.htm')
#LOOP
  #SET(%I,INSTRING(':',%ValueConstruct))
  #IF(%I)
    #SET(%J,LEN(CLIP(%ValueConstruct))-%I)
    #SET(%ValueConstruct,SUB(%ValueConstruct,1,%I-1)&'_'&SUB(%ValueConstruct,%I+1,%J))
  #ELSE
    #BREAK
  #ENDIF
#ENDLOOP
oHH.SetTopic('%ValueConstruct')
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ApplicationMsg,'Add KCR_ClearControlMsg Template'),APPLICATION(KCR_ClearControlMsg(KCR))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ApplicationMsg (Devuna)','Add KCR_ClearControlMsg Template')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_ClearControlMsg')
  #DISPLAY ('template to every procedure that contains')
  #DISPLAY ('a window manager.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ClearControlMsg,'Clear Control Msg Property'),PROCEDURE
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ClearControlMsg (Devuna)','Clear Control Msg Property')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds code to clear the control')
  #DISPLAY ('msg property.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9200),DESCRIPTION('Clear Control Msg Property')
#FOR(%Control),WHERE(%Control AND INSTRING('MSG',%ControlStatement,1))
%Control{PROP:MSG} = ''
#ENDFOR
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_HighlightSelectedTab,'Highlight Selected Tab'),PROCEDURE
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_HighlightSelectedTab (Devuna)','Highlight Selected Tab')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds code to')
  #DISPLAY ('highlight the selected tab.')
  #DISPLAY ('')
  #PROMPT ('Sheet Control:',CONTROL),%SheetControl,REQ
  #PROMPT ('Use Bold Font',CHECK),%UseBoldFont,DEFAULT(%TRUE)
  #PROMPT ('Use Color',CHECK),%UseColor,DEFAULT(%FALSE)
  #ENABLE(%UseColor)
    #PROMPT ('Selected Tab Color:',COLOR),%SelectedColor,DEFAULT(080FFFFh)
  #ENDENABLE
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
  #DECLARE(%TabCount)
  #DECLARE(%TabInstance)
  #DECLARE(%TabControl),MULTI
  #SET(%TabCount,0)
  #DECLARE(%FirstTabControl)
  #DECLARE(%LastTabControl)
  #SET(%FirstTabControl,'')
  #FOR(%Control),WHERE(%ControlParent = %SheetControl)
    #SET(%TabCount,%TabCount+1)
    #ADD(%TabControl,%Control)
    #IF(%FirstTabControl = '')
      #SET(%FirstTabControl,%Control)
    #ENDIF
    #SET(%LastTabControl,%Control)
  #ENDFOR
#ENDAT
#!
#!
#AT(%DataSection),PRIORITY(6000),DESCRIPTION('Highlight Selected Tab Data')
#!AT(%DataSectionAfterWindow)
HSTBOXFEQ       EQUATE(%SheetControl+1000)
HSTCOLOR        EQUATE(%SelectedColor)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8100),DESCRIPTION('Highlight Selected Tab - Initialization')
#IF(%UseColor)
CREATE(HSTBOXFEQ,CREATE:Box)
HSTBOXFEQ{PROP:Width} = %SheetControl{PROP:AboveSize}
HSTBOXFEQ{PROP:Height} = 12
HSTBOXFEQ{PROP:Color}= COLOR:NONE
HSTBOXFEQ{PROP:Fill} = HSTCOLOR
HSTBOXFEQ{PROP:Hide} = FALSE
#ENDIF
POST(EVENT:NewSelection,%SheetControl)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Reset','(BYTE Force=0)'),PRIORITY(7500),DESCRIPTION('Highlight Selected Tab - Initialization')
#FOR(%TabControl)
  #SET(%TabInstance,INSTANCE(%TabControl))
IF %SheetControl{PROP:ChoiceFeq} = %TabControl
  #IF(%UseBoldFont)
   %TabControl{PROP:FontStyle} = FONT:Bold
  #ENDIF
  #IF(%UseColor)
   HSTBOXFEQ{PROP:XPos} = %SheetControl{PROP:XPos} + 1 + ((%TabInstance - 1) * HSTBOXFEQ{PROP:Width})
   HSTBOXFEQ{PROP:YPos} = %SheetControl{PROP:YPos} + 1
  #ENDIF
ELSE
  #IF(%UseBoldFont)
   %TabControl{PROP:FontStyle} = FONT:Regular
  #ENDIF
END
#ENDFOR
#ENDAT
#!
#!
#AT(%ControlEventHandling,%SheetControl,'NewSelection'),PRIORITY(5000)
#FOR(%TabControl)
  #SET(%TabInstance,INSTANCE(%TabControl))
IF %SheetControl{PROP:ChoiceFeq} = %TabControl
  #IF(%UseBoldFont)
   %TabControl{PROP:FontStyle} = FONT:Bold
  #ENDIF
  #IF(%UseColor)
   HSTBOXFEQ{PROP:XPos} = %SheetControl{PROP:XPos} + 1 + ((%TabInstance - 1) * HSTBOXFEQ{PROP:Width})
   HSTBOXFEQ{PROP:YPos} = %SheetControl{PROP:YPos} + 1
  #ENDIF
END
#ENDFOR
#ENDAT
#!
#!
#AT(%ControlEventHandling,%SheetControl,'TabChanging'),PRIORITY(5000)
  #IF(%UseBoldFont)
I# = %SheetControl{PROP:ChoiceFeq}
I#{PROP:FontStyle} = FONT:Regular
  #ENDIF
#ENDAT
#!
#!
#!
#!
#!---------------------------------------------------------------------
#EXTENSION (KCR_PrintDlgGlobal,'Print Dialog Global'),APPLICATION,LAST,REQ(KCR_Win32)
#!---------------------------------------------------------------------
#! Version....: 2.000
#! Date.......: 10/11/1998
#! Author.....: R.Rogers
#! Description: (1.001) modified code to provide global data variables and support
#!                      for DLL usage.
#!              (2.000) abc template implementation
#!-------------------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_PrintDlgGlobal (Devuna)','Print Dialog Global Extension')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds custom global data required for')
  #DISPLAY ('the Print Dialog template.')
  #DISPLAY ('')
  #PROMPT('&Generate template global data as EXTERNAL',CHECK),%PrintDlgGlobalExternal,AT(10,,170),DEFAULT(%False)
  #PROMPT('&Include PRNPROP.CLW',CHECK),%IncludePrnProp,AT(10,,170),DEFAULT(%False)
  #DISPLAY ('')
#ENDBOXED
#!
#AT (%CustomGlobalDeclarations)
  #ADD(%CustomGlobalData,'PrintDlg:UseCurrentSettings')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'BYTE,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'BYTE(False)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'pd')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'LIKE(PRINTDLG),PRE(),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LIKE(PRINTDLG),PRE()')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'dn')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'LIKE(DEVNAMES),PRE(),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LIKE(DEVNAMES),PRE()')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'dm')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'LIKE(tagDEVMODE),PRE(),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LIKE(tagDEVMODE),PRE()')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'PrintDlg:sPrintToName')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'STRING(64),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'STRING(64)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'PrintDlg:szDriver')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'CSTRING(9),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'CSTRING(9)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'PrintDlg:szDevice')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'CSTRING(32),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration   ,'CSTRING(32)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'PrintDlg:szPort')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%PrintDlgGlobalExternal)
    #SET(%CustomGlobalDataDeclaration,'CSTRING(65),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'CSTRING(65)')
  #ENDIF
#ENDAT
#!
#AT (%AfterGlobalIncludes)
#IF(%IncludePrnProp)
   INCLUDE('PRNPROP.CLW'),ONCE
#ENDIF
#ENDAT
#!
#!
#!
#!
#!---------------------------------------------------------------------
#EXTENSION (KCR_PrintDlg, 'Print Dialog'),PROCEDURE,REQ(KCR_PrintDlgGlobal,AFTER),LAST
#!---------------------------------------------------------------------
#! Version....: 2.000
#! Date.......: 10/11/1998
#! Author.....: R.Rogers
#! Description: modified code to control calling OF printer setup
#!              dialog with a global variable 'PrintDlg:UseCurrentSettings'
#!              If this variable is true then the printer setup
#!              dialog will only be called once in a printing session.
#!              (1.002) save and restore copies
#!              (2.000) abc template implementation
#!-------------------------------------------------------------------------
#RESTRICT
  #CASE(UPPER(%ProcedureTemplate))
  #OF('REPORT')
  #OROF('REPORTHC')
    #ACCEPT
  #ELSE
    #REJECT
  #ENDCASE
#ENDRESTRICT
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_PrintDlg (Devuna)','Cutsom Print Dialog')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds a customizable Printer Dialog.')
#ENDBOXED
#DISPLAY('')
#SHEET
#TAB('General')
  #PROMPT('Show Button Menu',CHECK),%ShowButtonMenu,AT(5,,,),DEFAULT(%False)
  #ENABLE(%ShowButtonMenu)
    #PROMPT('Show Button Menu Icon:',OPENDIALOG('Pick an Icon','ICON Files|*.ICO')),%ShowButtonMenuIcon
    #PROMPT('Show Cancel Button',CHECK),%ShowCancelButton,AT(5,,,),DEFAULT(%True)
    #ENABLE(%ShowCancelButton)
      #PROMPT('Use Button Icon',CHECK),%UseButtonIcon,AT(5,,,),DEFAULT(%True)
      #ENABLE(%UseButtonIcon)
        #PROMPT('Cancel Button Icon:',OPENDIALOG('Pick an Icon','ICON Files|*.ICO')),%CancelButtonIcon,DEFAULT('CANCEL.ICO'),REQ
      #ENDENABLE
    #ENDENABLE
    #PROMPT('Print Setup Action',OPTION),%PrintSetupAction,AT(5,,,),DEFAULT('Print Report')
    #PROMPT('Print Report',RADIO),AT(10,,,)
    #PROMPT('Return to Menu',RADIO),AT(10,,,)
  #ENDENABLE
#ENDTAB
#TAB('Flag Settings')
  #PROMPT('Select All Radio Button',CHECK),%ALLPAGES,AT(5,,,),DEFAULT(%True)
  #PROMPT('Check Collate Copies Check Box',CHECK),%COLLATE,AT(5,,,),DEFAULT(%False)
  #PROMPT('Disable Print to File Check Box',CHECK),%DISABLEPRINTTOFILE,AT(5,,,),DEFAULT(%False)
  #PROMPT('Hide Print to File',CHECK),%HIDEPRINTTOFILE,AT(5,,,),DEFAULT(%False)
  #PROMPT('Disable Pages Radio Button',CHECK),%NOPAGENUMS,AT(5,,,),DEFAULT(%False)
  #PROMPT('Disable Selection Radio Button',CHECK),%NOSELECTION,AT(5,,,),DEFAULT(%True)
  #PROMPT('Disable Warning Messages',CHECK),%NOWARNING,AT(5,,,),DEFAULT(%False)
  #PROMPT('Select Pages Radio Button',CHECK),%PAGENUMS,AT(5,,,),DEFAULT(%False)
  #PROMPT('Display Print Setup',CHECK),%PRINTSETUP,AT(5,,,),DEFAULT(%False)
  #PROMPT('Check Print to File Check Box',CHECK),%PRINTTOFILE,AT(5,,,),DEFAULT(%False)
  #PROMPT('Return Device Context',CHECK),%RETURNDC,AT(5,,,),DEFAULT(%False)
  #PROMPT('Return Default DEVMODE and DEVNAMES',CHECK),%RETURNDEFAULT,AT(5,,,),DEFAULT(%False)
  #PROMPT('Return Information Context',CHECK),%RETURNIC,AT(5,,,),DEFAULT(%False)
  #PROMPT('Select Selection Radio Button',CHECK),%SELECTION,AT(5,,,),DEFAULT(%False)
  #PROMPT('Show Help Button',CHECK),%SHOWHELP,AT(5,,,),DEFAULT(%False)
  #PROMPT('Use Device Mode Copies and Collate',CHECK),%USEDEVMODECOPIES,AT(5,,,),DEFAULT(%True)
  #PROMPT('Hide Network Button',CHECK),%NONETWORKBUTTON,AT(5,,,),DEFAULT(%False)
#ENDTAB
#TAB('Advanced')
 #ENABLE(%False)
  #PROMPT('Enable Print Hook',CHECK),%ENABLEPRINTHOOK,AT(5,,,),DEFAULT(%False)
  #ENABLE(%ENABLEPRINTHOOK),CLEAR
    #PROMPT('Print Hook Procedure:',PROCEDURE),%lpfnPrintHook
  #ENDENABLE
  #PROMPT('Enable Print Template',CHECK),%ENABLEPRINTTEMPLATE,AT(5,,,),DEFAULT(%False)
  #ENABLE(%ENABLEPRINTTEMPLATE),CLEAR
    #PROMPT('Print Template Name:',@S80),%lpPrintTemplateName
  #ENDENABLE
  #PROMPT('Enable Print Template Handle',CHECK),%ENABLEPRINTTEMPLATEHANDLE,AT(5,,,),DEFAULT(%False)
  #PROMPT('Enable Setup Hook',CHECK),%ENABLESETUPHOOK,DEFAULT(%False)
  #ENABLE(%ENABLESETUPHOOK),CLEAR
    #PROMPT('Setup Hook Procedure:',PROCEDURE),%lpfnSetupHook
  #ENDENABLE
  #PROMPT('Enable Setup Template',CHECK),%ENABLESETUPTEMPLATE,AT(5,,,),DEFAULT(%False)
  #ENABLE(%ENABLESETUPTEMPLATE),CLEAR
    #PROMPT('Setup Template Name:',@S80),%lpSetupTemplateName
  #ENDENABLE
  #PROMPT('Enable Setup Template Handle',CHECK),%ENABLESETUPTEMPLATEHANDLE,AT(5,,,),DEFAULT(%False)
 #ENDENABLE
#ENDTAB
#TAB('Initial Values')
  #ENABLE(NOT %NOPAGENUMS)
    #PROMPT('From Page:',SPIN(@N5,0,65535)),%nFromPage,DEFAULT(65535)
    #PROMPT('To Page:  ',SPIN(@N5,0,65535)),%nToPage,DEFAULT(65535)
    #PROMPT('Minimum Pages:',SPIN(@N5,0,65535)),%nMinPage,DEFAULT(1)
    #PROMPT('Maximum Pages:',SPIN(@N5,0,65535)),%nMaxPage,DEFAULT(65535)
  #ENDENABLE
  #PROMPT('Number OF Copies:',SPIN(@N5,0,65534)),%nCopies,DEFAULT(1)
#ENDTAB
#ENDSHEET
#DISPLAY ('')
#!
#AT(%CustomModuleDeclarations)
  #ADD(%CustomModuleMapModule,'CURRENT MODULE')
  #ADD(%CustomModuleMapProcedure,'kcrPrinterDialog')
  #SET(%CustomModuleMapProcedurePrototype,'PROCEDURE(UNSIGNED hWnd:winPrintDlg, *BYTE bPrintSetup),BYTE')
#ENDAT
#!
#AT(%DataSection),PRIORITY(4100),DESCRIPTION('Print Dialog Data')
bPrintSetup             byte(false)
bPrintPreview           byte(false)
save:PROPPRINT:driver   cstring(9)
save:PROPPRINT:device   cstring(32)
save:PROPPRINT:port     cstring(65)
save:PROPPRINT:frompage ushort
save:PROPPRINT:topage   ushort
save:PROPPRINT:frommin  ushort
save:PROPPRINT:tomax    ushort
hWnd:winPrintDlg        unsigned
#IF(%ShowCancelButton)
winPrintDlg WINDOW('Print Options'),AT(,,100,76),FONT('Tahoma',8,,FONT:regular),CENTER,GRAY, |
         DOUBLE
#ELSE
winPrintDlg WINDOW('Print Options'),AT(,,100,58),FONT('Tahoma',8,,FONT:regular),CENTER,GRAY, |
         DOUBLE
#ENDIF
       BUTTON('&Print'),AT(26,4,48,14),USE(?winPrintDlg:PrintButton)
#IF(%EnablePrintPreview)
       BUTTON('&View'),AT(26,22,48,14),USE(?winPrintDlg:ViewButton)
#ELSE
       BUTTON('&View'),AT(26,22,48,14),USE(?winPrintDlg:ViewButton),DISABLE
#ENDIF
       BUTTON('Print &Setup'),AT(26,40,48,14),USE(?winPrintDlg:SetupButton)
#IF(%ShowCancelButton)
  #IF(%UseButtonIcon)
       #DECLARE(%CancelButtonConstruct)
       #SET(%CancelButtonConstruct,'BUTTON(''Cancel''),AT(26,58,48,14),USE(?winPrintDlg:CancelButton),LEFT,ICON(''' & %CancelButtonIcon & ''')')
       %CancelButtonConstruct
  #ELSE
       BUTTON('Cancel'),AT(26,58,48,14),USE(?winPrintDlg:CancelButton)
  #ENDIF
#ENDIF
     END
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(7000),DESCRIPTION('Print Dialog Code')
open(winPrintDlg)
if ~PrintDlg:UseCurrentSettings or (PrintDlg:UseCurrentSettings and ~pd.hwndOwner)
   clear(pd)
  #IF(~%ShowButtonMenu)
   winPrintDlg{PROP:Hide} = True
   ReturnValue = kcrPrinterDialog(hWnd:winPrintDlg,bPrintSetup)
   if ~pd.hwndOwner and PrintDlg:UseCurrentSettings
      pd.hwndOwner = -1
   end
  #ELSE
    #IF(%ShowButtonMenuIcon)
   winPrintDlg{PROP:Icon} = '%ShowButtonMenuIcon'
    #ENDIF
   accept
    case event()
      OF EVENT:closewindow
         ReturnValue = Level:Notify
         break
      OF EVENT:accepted
         case field()
           OF ?winPrintDlg:PrintButton
              bPrintPreview = false
              case pd.hwndOwner
                OF -1
              orOF 0
                   bPrintSetup = False
                   if ~pd.hwndOwner and PrintDlg:UseCurrentSettings
                      pd.hwndOwner = -1
                   end
              else
                   bPrintSetup = True
              end
              break
           OF ?winPrintDlg:ViewButton
              bPrintPreview = true
              case pd.hwndOwner
                OF -1
              orOF 0
                   bPrintSetup = False
              else
                   bPrintSetup = True
              end
              break
           OF ?winPrintDlg:SetupButton
              ReturnValue = kcrPrinterDialog(hWnd:winPrintDlg,bPrintSetup)
              if ~pd.hwndOwner and PrintDlg:UseCurrentSettings
                 pd.hwndOwner = -1
              end
    #CASE(%PrintSetupAction)
      #OF('Print Report')
              break
      #OF('Return to Menu')
              cycle
    #ENDCASE
    #IF(%ShowCancelButton)
           OF ?winPrintDlg:CancelButton
              ReturnValue = Level:Notify
              break
    #ENDIF
         end
    end
   end
  #ENDIF
else
   case pd.hwndOwner
     OF -1
        bPrintSetup = False
     else
        bPrintSetup = True
   end
end
close(winPrintDlg)
if ReturnValue
   return(ReturnValue)
end
if bPrintPreview
   ThisWindow.SkipPreview = FALSE
else
   ThisWindow.SkipPreview = TRUE
end
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'OpenReport','(),BYTE'),PRIORITY(2500),DESCRIPTION('Print Dialog Code')
do kcrPrinterSetup
#ENDAT
#AT(%WindowManagerMethodCodeSection,'OpenReport','(),BYTE'),PRIORITY(7500),DESCRIPTION('Print Dialog Code')
if bPrintSetup
   if band(dm.Fields,DM_ORIENTATION)
      execute(dm.Orientation)
        %Report{PROP:Landscape} = False
        %Report{PROP:Landscape} = True
      end
   end
end
#ENDAT
#AT(%WindowManagerMethodCodeSection,'TakeCloseEvent','(),BYTE'),PRIORITY(7500),DESCRIPTION('Print Dialog Code')
if bPrintSetup
   do kcrRestorePrinterSettings
end
#ENDAT
#AT(%LocalProcedures),DESCRIPTION('Print Dialog Code')
!----------------------------------------------------------------------
kcrPrinterDialog    PROCEDURE(hWnd:winPrintDlg,bPrintSetup)
bReturnValue    byte,auto
pDevNames       ulong
sSavePath       string(64)
cc              short
 code
 bReturnValue = Level:Benign
! hWnd:winPrintDlg = winPrintDlg{PROP:Handle}
 clear(pd)
 pd.lStructSize = size(pd)
 pd.hwndOwner = hWnd:winPrintDlg
#IF(%ALLPAGES)
 pd.Flags += PD_ALLPAGES
#ENDIF
#IF(%SELECTION)
 pd.Flags += PD_SELECTION
#ENDIF
#IF(%PAGENUMS)
 pd.Flags += PD_PAGENUMS
#ENDIF
#IF(%NOSELECTION)
 pd.Flags += PD_NOSELECTION
#ENDIF
#IF(%NOPAGENUMS)
 pd.Flags += PD_NOPAGENUMS
#ENDIF
#IF(%COLLATE)
 pd.Flags += PD_COLLATE
#ENDIF
#IF(%PRINTTOFILE)
 pd.Flags += PD_PRINTTOFILE
#ENDIF
#IF(%PRINTSETUP)
 pd.Flags += PD_PRINTSETUP
#ENDIF
#IF(%NOWARNING)
 pd.Flags += PD_NOWARNING
#ENDIF
#IF(%RETURNDC)
 pd.Flags += PD_RETURNDC
#ENDIF
#IF(%RETURNIC)
 pd.Flags += PD_RETURNIC
#ENDIF
#IF(%RETURNDEFAULT)
 pd.Flags += PD_RETURNDEFAULT
#ENDIF
#IF(%SHOWHELP)
 pd.Flags += PD_SHOWHELP
#ENDIF
#IF(%ENABLEPRINTHOOK)
 pd.Flags += PD_ENABLEPRINTHOOK
#ENDIF
#IF(%ENABLESETUPHOOK)
 pd.Flags += PD_ENABLESETUPHOOK
#ENDIF
#IF(%ENABLEPRINTTEMPLATE)
 pd.Flags += PD_ENABLEPRINTTEMPLATE
#ENDIF
#IF(%ENABLESETUPTEMPLATE)
 pd.Flags += PD_ENABLESETUPTEMPLATE
#ENDIF
#IF(%ENABLEPRINTTEMPLATEHANDLE)
 pd.Flags += PD_ENABLEPRINTTEMPLATEHANDLE
#ENDIF
#IF(%ENABLESETUPTEMPLATEHANDLE)
 pd.Flags += PD_ENABLESETUPTEMPLATEHANDLE
#ENDIF
#IF(%USEDEVMODECOPIES)
 pd.Flags += PD_USEDEVMODECOPIES
#ENDIF
#IF(%DISABLEPRINTTOFILE)
 pd.Flags += PD_DISABLEPRINTTOFILE
#ENDIF
#IF(%HIDEPRINTTOFILE)
 pd.Flags += PD_HIDEPRINTTOFILE
#ENDIF
#IF(%NONETWORKBUTTON)
 pd.Flags += PD_NONETWORKBUTTON
#ENDIF
#IF(NOT %NOPAGENUMS)
 pd.nFromPage = %nFromPage
 pd.nToPage = %nToPage
 pd.nMinPage = %nMinPage
 pd.nMaxPage = %nMaxPage
#ENDIF
 pd.nCopies = %nCopies
 if PrintDlg(pd)
    bPrintSetup = True
    memcpy(address(dm),GlobalLock(pd.hDevMode),size(dm))
    cc = GlobalUnlock(pd.hDevMode)
    pDevNames = GlobalLock(pd.hDevNames)
    memcpy(address(dn),pDevNames,size(dn))
    strcpy(address(PrintDlg:szDriver),pDevNames+dn.wDriverOffset)
    strcpy(address(PrintDlg:szDevice),pDevNames+dn.wDeviceOffset)
    strcpy(address(PrintDlg:szPort),pDevNames+dn.wOutputOffset)
    cc = GlobalUnlock(pd.hDevNames)
    if band(pd.Flags,PD_PRINTTOFILE)
       sSavePath = path()
       if ~filedialog('Save As ...',PrintDlg:sPrintToName,'All|*.*',1)
          setpath(sSavePath)
          bReturnValue = Level:Notify
       else
          setpath(sSavePath)
       end
    else
    end
 else
    clear(pd)
    bReturnValue = Level:Notify
 end
 return(bReturnValue)
#ENDAT
#!
#AT(%ProcedureRoutines),DESCRIPTION('Print Dialog Code')
!----------------------------------------------------------------------
kcrPrinterSetup routine
 if bPrintSetup
    do kcrSavePrinterSettings
    PRINTER{PROPPRINT:driver} = PrintDlg:szDriver
    PRINTER{PROPPRINT:device} = PrintDlg:szDevice
    PRINTER{PROPPRINT:port}   = PrintDlg:szPort
    if band(pd.Flags,PD_USEDEVMODECOPIES)
       PRINTER{PROPPRINT:collate} = dm.Collate
    else
       if band(pd.Flags,PD_COLLATE)
          PRINTER{PROPPRINT:collate} = True
       else
          PRINTER{PROPPRINT:collate} = False
       end
    end
    if band(dm.Fields,DM_COLOR)
       PRINTER{PROPPRINT:color} = dm.Color
    end
    if band(pd.Flags,PD_USEDEVMODECOPIES)
       if band(dm.Fields,DM_COPIES)
          PRINTER{PROPPRINT:copies} = dm.Copies
       end
    else
       PRINTER{PROPPRINT:copies} = pd.nCopies
    end
    if band(dm.Fields,DM_DUPLEX)
       PRINTER{PROPPRINT:duplex} = dm.Duplex
    end
    if band(dm.Fields,DM_PAPERSIZE)
       PRINTER{PROPPRINT:paper} = dm.PaperSize
    end
    if band(dm.Fields,DM_DEFAULTSOURCE)
       PRINTER{PROPPRINT:paperbin} = dm.DefaultSource
    end
    if band(dm.Fields,DM_PAPERLENGTH)
       PRINTER{PROPPRINT:paperheight} = dm.PaperLength
    end
    if band(dm.Fields,DM_PAPERWIDTH)
       PRINTER{PROPPRINT:paperwidth} = dm.PaperWidth
    end
    if band(dm.Fields,DM_SCALE)
       PRINTER{PROPPRINT:percent} = dm.Scale
    end
    if band(dm.Fields,DM_PRINTQUALITY)
       PRINTER{PROPPRINT:resolution} = dm.PrintQuality
    end
    if band(pd.Flags,PD_PRINTTOFILE)
       PRINTER{PROPPRINT:printtofile} = True
       PRINTER{PROPPRINT:printtoname} = PrintDlg:sPrintToName
    else
       PRINTER{PROPPRINT:printtofile} = False
       PRINTER{PROPPRINT:printtoname} = ''
    end
    if band(pd.Flags,PD_PAGENUMS)
       PRINTER{PROPPRINT:frompage} = pd.nFromPage
       PRINTER{PROPPRINT:topage} = pd.nToPage
       PRINTER{PROPPRINT:frommin} = pd.nMinPage
       PRINTER{PROPPRINT:tomax} = pd.nMaxPage
    end
 end
 exit
!----------------------------------------------------------------------
kcrSavePrinterSettings  routine
 save:PROPPRINT:driver   = PRINTER{PROPPRINT:driver}
 save:PROPPRINT:device   = PRINTER{PROPPRINT:device}
 save:PROPPRINT:port     = PRINTER{PROPPRINT:port}
 save:PROPPRINT:frompage = PRINTER{PROPPRINT:frompage}
 save:PROPPRINT:topage   = PRINTER{PROPPRINT:topage}
 save:PROPPRINT:frommin  = PRINTER{PROPPRINT:frommin}
 save:PROPPRINT:tomax    = PRINTER{PROPPRINT:tomax}
 exit
!----------------------------------------------------------------------
kcrRestorePrinterSettings   routine
 PRINTER{PROPPRINT:driver} = save:PROPPRINT:driver
 PRINTER{PROPPRINT:device} = save:PROPPRINT:device
 PRINTER{PROPPRINT:port} = save:PROPPRINT:port
 PRINTER{PROPPRINT:frompage} = abs(save:PROPPRINT:frompage)
 PRINTER{PROPPRINT:topage} = save:PROPPRINT:topage
 PRINTER{PROPPRINT:frommin} = abs(save:PROPPRINT:frommin)
 PRINTER{PROPPRINT:tomax} = save:PROPPRINT:tomax
 PRINTER{PROPPRINT:copies}   = 1
 exit
#ENDAT
#!
#!
#!
#!
#!---------------------------------------------------------------------
#EXTENSION(KCR_DesktopGraphics,'Desktop Graphics support'),PROCEDURE,FIRST
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_DesktopGraphics (Devuna)','Desktop Graphics Support')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension provides code to control the')
  #DISPLAY ('use OF button icons and window wallpaper.')
  #DISPLAY ('')
  #PROMPT('Global Button Icon Flag',FROM(%GlobalData)),%GlobalButtonIconFlag,REQ,DEFAULT('GlobalUserButtonIcons')
  #PROMPT('Global Wallpaper',FROM(%GlobalData)),%GlobalWallpaperFlag,REQ,DEFAULT('GlobalUserWallpaper')
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9050),DESCRIPTION('Desktop Graphics Code')
IF ~%GlobalWallpaperFlag
   %Window{PROP:Wallpaper} = ''
END
IF ~%GlobalButtonIconFlag
#FOR(%Control),WHERE(%ControlType='BUTTON')
  #IF(INSTRING('ICON',%ControlStatement,1))
%Control{PROP:Icon} = ''
%Control{PROP:FontStyle} = FONT:Regular
    #IF(INSTRING('&OK',%ControlStatement,1))
%Control{PROP:Text} = '&OK'
    #ENDIF
  #ENDIF
#ENDFOR
END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ViewOnlyMode,'Procedure View/Print only mode support'),PROCEDURE,FIRST
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ViewOnlyMode (Devuna)','Procedure View/Print Only Mode Support')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension provides code to implement simple')
  #DISPLAY ('security and control a view/print only mode.')
  #DISPLAY ('')
  #PROMPT('Global View Only Flag',COMBO(%GlobalData)),%GlobalViewOnlyModeFlag
  #ENABLE(%GlobalViewOnlyModeFlag),CLEAR
    #PROMPT('Use Security Levels',CHECK),%UseSecurityLevel,DEFAULT(%True),AT(10)
  #ENDENABLE
  #PROMPT('Select Control to Enable',CONTROL),%ControlList,MULTI('Controls to Enable'),UNIQUE
  #DISPLAY ('')
#ENDBOXED
#!
#ATSTART
#DECLARE(%GlobalViewOnlyModeVariable)
#IF(INSTRING(' ',%GlobalViewOnlyModeFlag))
  #SET(%GlobalViewOnlyModeVariable,SUB(%GlobalViewOnlyModeFlag,1,INSTRING(' ',%GlobalViewOnlyModeFlag)-1))
#ELSE
  #SET(%GlobalViewOnlyModeVariable,%GlobalViewOnlyModeFlag)
#ENDIF
#!
#DECLARE(%DisableControl),MULTI
#DECLARE(%EnableControl),MULTI
#FOR(%Control),WHERE(%ControlType='BUTTON')
  #CASE(UPPER(SUB(%Control,1,4)))
  #OF   ('?CAN')
  #OROF ('?CLO')
  #OROF ('?HEL')
  #OROF ('?EDI')
  #OROF ('?CHA')
    #IF(%Control <> '')
      #ADD(%ControlList,%Control)
    #ENDIF
  #ENDCASE
#ENDFOR
#FOR(%Control),WHERE(%ControlType='ITEM')
  #CASE(UPPER(SUB(%ControlParameter,1,4)))
  #OF ('CL&O')
  #OROF ('&EDI')
  #OROF ('&CHA')
    #IF(%Control <> '')
       #ADD(%ControlList,%Control)
    #ENDIF
  #ENDCASE
#ENDFOR
#FOR(%Control)
  #CASE(%ControlType)
    #OF   ('BUTTON')
    #OROF ('CHECK')
    #OROF ('COMBO')
    #OROF ('ENTRY')
    #OROF ('OPTION')
    #OROF ('RADIO')
    #OROF ('SPIN')
    #OROF ('TEXT')
    #OROF ('ITEM')
      #IF(%Control <> '')
         #ADD(%DisableControl,%Control)
         #IF(~INSTRING('DISABLE',%ControlStatement,1))
           #ADD(%EnableControl,%Control)
         #ENDIF
      #ENDIF
    #OF ('LIST')
      #IF(INSTRING('DROP',%ControlStatement,1))
        #IF(%Control <> '')
           #ADD(%DisableControl,%Control)
           #IF(~INSTRING('DISABLE',%ControlStatement,1))
             #ADD(%EnableControl,%Control)
           #ENDIF
        #ENDIF
      #ENDIF
  #ENDCASE
#ENDFOR
#FOR(%ControlList)
  #FIX(%DisableControl,%ControlList)
  #IF(%DisableControl)
    #DELETE(%DisableControl)
  #ENDIF
  #FIX(%EnableControl,%ControlList)
  #IF(%EnableControl)
    #DELETE(%EnableControl)
  #ENDIF
#ENDFOR
#ENDAT
#AT(%WindowManagerMethodCodeSection,'Reset','(BYTE Force=0)'),PRIORITY(7500),DESCRIPTION('View Only Mode')
DO SetupViewOnly
#ENDAT
#AT(%ProcedureRoutines),DESCRIPTION('View Only Mode')
SetupViewOnly   ROUTINE
#IF(%GlobalViewOnlyModeFlag)
 IF %GlobalViewOnlyModeFlag
#ELSE
 #SET(%UseSecurityLevel,0)
 IF %WindowManager.Request = ViewRecord
#ENDIF
#IF(%UseSecurityLevel)
    CASE %GlobalViewOnlyModeVariable
    OF 0
    OF 1
    OF 2
  #FOR(%DisableControl)
    #CASE(UPPER(SUB(%DisableControl,1,4)))
    #OF('?DEL')
       DISABLE(%DisableControl)
    #ENDCASE
  #ENDFOR
  #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'BrowseBox(ABC)')
    #FOR(%ActiveTemplateInstance)
      #SET(%ValueConstruct,'BRW' & %ActiveTemplateInstance)
       IF ~%ValueConstruct.AskProcedure
          %ValueConstruct.DeleteControl = 0
       END
    #ENDFOR
  #ENDFOR
    OF 3
  #FOR(%DisableControl)
    #CASE(UPPER(SUB(%DisableControl,1,4)))
    #OF('?DEL')
    #OROF('?NEW')
    #OROF('?INS')
       DISABLE(%DisableControl)
    #ENDCASE
  #ENDFOR
  #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'BrowseBox(ABC)')
    #FOR(%ActiveTemplateInstance)
      #SET(%ValueConstruct,'BRW' & %ActiveTemplateInstance)
       IF ~%ValueConstruct.AskProcedure
          %ValueConstruct.InsertControl = 0
          %ValueConstruct.DeleteControl = 0
       END
    #ENDFOR
  #ENDFOR
    OF 4
  #FOR(%DisableControl)
    #CASE(UPPER(SUB(%DisableControl,1,4)))
    #OF('?PRI')
    #ELSE
       DISABLE(%DisableControl)
    #ENDCASE
  #ENDFOR
  #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'BrowseBox(ABC)')
    #FOR(%ActiveTemplateInstance)
      #SET(%ValueConstruct,'BRW' & %ActiveTemplateInstance)
       IF ~%ValueConstruct.AskProcedure
          IF %ValueConstruct.ChangeControl
             DISABLE(%ValueConstruct.ChangeControl)
          END
          %ValueConstruct.InsertControl = 0
          %ValueConstruct.ChangeControl = 0
          %ValueConstruct.DeleteControl = 0
       END
    #ENDFOR
  #ENDFOR
  #FOR(%Control),WHERE(%ControlType='BUTTON')
    #CASE(UPPER(SUB(%Control,1,4)))
    #OF('?CAN')
       %Control{PROP:Text} = 'Cl&ose'
    #ENDCASE
  #ENDFOR
    OF 5
  #FOR(%DisableControl)
       DISABLE(%DisableControl)
  #ENDFOR
  #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'BrowseBox(ABC)')
    #FOR(%ActiveTemplateInstance)
      #SET(%ValueConstruct,'BRW' & %ActiveTemplateInstance)
       IF ~%ValueConstruct.AskProcedure
          IF %ValueConstruct.ChangeControl
             DISABLE(%ValueConstruct.ChangeControl)
          END
          %ValueConstruct.InsertControl = 0
          %ValueConstruct.ChangeControl = 0
          %ValueConstruct.DeleteControl = 0
       END
    #ENDFOR
  #ENDFOR
  #FOR(%Control),WHERE(%ControlType='BUTTON')
    #CASE(UPPER(SUB(%Control,1,4)))
    #OF('?CAN')
       %Control{PROP:Text} = 'Cl&ose'
    #ENDCASE
  #ENDFOR
    END
#ELSE
  #FOR(%DisableControl)
    DISABLE(%DisableControl)
  #ENDFOR
    %WindowManager.InsertAction = Insert:None
    %WindowManager.DeleteAction = Delete:None
    %WindowManager.ChangeAction = 0
    %WindowManager.CancelAction = Cancel:Cancel
    %WindowManager.OkControl = 0
  #FOR(%ControlList)
    #CASE(UPPER(SUB(%ControlList,1,4)))
    #OF('?CAN')
    %ControlList{PROP:Text} = 'Cl&ose'
    #ENDCASE
  #ENDFOR
#ENDIF
#FOR(%ControlList)
  #FIX(%Control,%ControlList)
  #IF(%ControlType = 'ITEM')
    #CASE(UPPER(SUB(%ControlParameter,1,4)))
    #OF ('&EDI')
    #OROF ('&CHA')
      #IF(%UseSecurityLevel)
    IF %GlobalViewOnlyModeVariable > 3
       %ControlList{PROP:Text} = '&View'
    END
      #ELSE
    %ControlList{PROP:Text} = '&View'
      #ENDIF
    #ENDCASE
  #ELSE
    #CASE(UPPER(SUB(%ControlList,1,4)))
    #OF('?EDI')
    #OROF('?CHA')
      #IF(%UseSecurityLevel)
    IF %GlobalViewOnlyModeVariable > 3
       %ControlList{PROP:Text} = '&View'
    END
      #ELSE
    %ControlList{PROP:Text} = '&View'
      #ENDIF
    #ENDCASE
  #ENDIF
#ENDFOR
    #EMBED(%AfterSetupViewOnly,'After Disable Controls for View Only Mode (legacy)')
    #EMBED(%AfterSetupViewOnlyDisable,'After Disable Controls for View Only Mode')
 ELSE
#FOR(%EnableControl)
  #IF(UPPER(SUB(%EnableControl,1,4)) = '?SEL')
    IF %WindowManager.Request = SelectRecord
       ENABLE(%EnableControl)
    END
  #ENDIF
#ENDFOR
    #EMBED(%AfterSetupViewOnlyEnable,'After Enable Controls for View Only Mode')
 END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetClassLong,'Change Window Style'),PROCEDURE,FIRST,REQ(KCR_Win32)
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SetClassLong (Devuna)','Change Window Style')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension provides code to change a window style.')
  #DISPLAY ('')
  #PROMPT('&Remove Icon',CHECK),%RemoveIcon,AT(10),DEFAULT(%TRUE)
  #PROMPT('O&verride Default Icon',CHECK),%OverrideDefaultIcon,AT(10),DEFAULT(%FALSE)
  #ENABLE(%OverrideDefaultIcon = %TRUE),CLEAR
    #PROMPT('&Icon:',OPENDIALOG('Choose an Icon','Icon Files|*.ICO')),%Icon,REQ
  #ENDENABLE
  #PROMPT('&Disable Minimize Box',CHECK),%DisableMinimizeBox,AT(10),DEFAULT(%FALSE)
  #PROMPT('&Enable System Menu Box',CHECK),%EnableSystemMenuBox,AT(10),DEFAULT(%TRUE)
  #PROMPT('&Include Question Mark in Title Bar',CHECK),%IncludeQuestionMark,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
  #PROMPT('&Transparent Window',CHECK),%TransparentWindow,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
#ENDBOXED
#!
#ATSTART
  #DECLARE(%ThisIcon)
  #SET(%ThisIcon,EXTRACT(%WindowStatement,'ICON',1))
  #IF(%ThisIcon)
    #IF(%OverrideDefaultIcon)
      #PROJECT(%Icon)
    #ENDIF
  #ENDIF
#ENDAT
#!
#AT(%WindowManagerMethodDataSection,'Init','(),BYTE'),DESCRIPTION('Set Window Style'),PRIORITY(8010)
  #IF(%ThisIcon)
rc                   LIKE(RECT)
hRgnUpdate           HRGN
  #ENDIF
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),DESCRIPTION('Set Window Style'),PRIORITY(8010)
  #IF(%ThisIcon)
!----------------------------------------------------------------------
! Change Window Style
!----------------------------------------------------------------------
    #IF(%RemoveIcon)
kcr_SetClassLong(%Window{prop:handle},GCL_HICONx,0)
kcr_SetClassLong(%Window{prop:handle},GCL_HICONSM,0)
kcr_SendMessage(%Window{prop:handle}, WM_SETICON, 1, 0)
kcr_SendMessage(%Window{prop:handle}, WM_SETICON, 0, 0)
kcr_DrawMenuBar(%Window{prop:handle})
    #ENDIF
    #IF(%DisableMinimizeBox)
kcr_SetWindowLong(%Window{prop:handle},GWL_STYLE,BXOR(kcr_GetWindowLong(%Window{prop:handle},GWL_STYLE),WS_MINIMIZEBOX))
    #ENDIF
    #IF(%EnableSystemMenuBox)
kcr_SetWindowLong(%Window{prop:handle},GWL_STYLE,BOR(kcr_GetWindowLong(%Window{prop:handle},GWL_STYLE),WS_SYSMENU))
    #ENDIF
    #IF(%IncludeQuestionMark)
kcr_SetWindowLong(%Window{prop:handle},GWL_EXSTYLE,BOR(kcr_GetWindowLong(%Window{prop:handle},GWL_EXSTYLE),WS_EX_CONTEXTHELP))
    #ENDIF
    #IF(%OverrideDefaultIcon)
%Window{PROP:Icon} = '~%Icon'
    #ENDIF
    #IF(%TransparentWindow)
kcr_SetWindowLong(%Window{prop:handle},GWL_EXSTYLE,BOR(kcr_GetWindowLong(%Window{prop:handle},GWL_EXSTYLE),WS_EX_TRANSPARENT))
    #ENDIF
kcr_GetWindowRect(%Window{prop:handle},rc)
kcr_InvalidateRect(%Window{prop:handle},rc,TRUE)
hRgnUpdate = kcr_CreateRectRgn(0,0,1,1)
kcr_SendMessage(%Window{prop:handle},WM_NCPAINT,kcr_GetUpdateRgn(%Window{prop:handle},hRgnUpdate,FALSE),0)
!----------------------------------------------------------------------
  #ENDIF
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ChangeWindowStyle,'Change Window Style'),PROCEDURE,LAST,REQ(KCR_Win32)
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ChangeWindowStyle (Devuna)','Change Window Style')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension provides code to change a window style.')
  #DISPLAY ('')
  #PROMPT('&Remove Icon',CHECK),%RemoveIcon,AT(10),DEFAULT(%TRUE)
  #PROMPT('O&verride Default Icon',CHECK),%OverrideDefaultIcon,AT(10),DEFAULT(%FALSE)
  #ENABLE(%OverrideDefaultIcon = %TRUE),CLEAR
    #PROMPT('&Icon:',OPENDIALOG('Choose an Icon','Icon Files|*.ICO')),%Icon,REQ
  #ENDENABLE
  #PROMPT('&Disable Minimize Box',CHECK),%DisableMinimizeBox,AT(10),DEFAULT(%FALSE)
  #PROMPT('&Enable System Menu Box',CHECK),%EnableSystemMenuBox,AT(10),DEFAULT(%TRUE)
  #PROMPT('&Include Question Mark in Title Bar',CHECK),%IncludeQuestionMark,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
  #PROMPT('&Transparent Window',CHECK),%TransparentWindow,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
#ENDBOXED
#!
#ATSTART
#!DECLARE(%ErrorMsg)
#!SET(%ErrorMsg, %Procedure & ' using depricated KCR_ChangeWindowStyle template.<13,10>Change to use KCR_SetClassLong instead.')
#!ERROR(%ErrorMsg)
#!
#DECLARE(%ThisIcon)
#SET(%ThisIcon,EXTRACT(%WindowStatement,'ICON',1))
#IF(%ThisIcon)
  #IF(%OverrideDefaultIcon)
    #PROJECT(%Icon)
  #ENDIF
#ENDIF
#ENDAT
#!
#AT(%WindowManagerMethodDataSection,'Init','(),BYTE'),DESCRIPTION('Set Window Style'),PRIORITY(8010)
  #IF(%ThisIcon)
rc                   LIKE(RECT)
hRgnUpdate           HRGN
  #ENDIF
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),DESCRIPTION('Set Window Style'),PRIORITY(8010)
  #IF(%ThisIcon)
!----------------------------------------------------------------------
! Set Window Style
!----------------------------------------------------------------------
    #IF(%RemoveIcon)
kcr_SetClassLong(%Window{prop:handle},GCL_HICONx,0)
kcr_SetClassLong(%Window{prop:handle},GCL_HICONSM,0)
kcr_SendMessage(%Window{prop:handle}, WM_SETICON, 1, 0)
kcr_SendMessage(%Window{prop:handle}, WM_SETICON, 0, 0)
kcr_DrawMenuBar(%Window{prop:handle})
    #ENDIF
    #IF(%DisableMinimizeBox)
kcr_SetWindowLong(%Window{prop:handle},GWL_STYLE,BXOR(kcr_GetWindowLong(%Window{prop:handle},GWL_STYLE),WS_MINIMIZEBOX))
    #ENDIF
    #IF(%EnableSystemMenuBox)
kcr_SetWindowLong(%Window{prop:handle},GWL_STYLE,BOR(kcr_GetWindowLong(%Window{prop:handle},GWL_STYLE),WS_SYSMENU))
    #ENDIF
    #IF(%IncludeQuestionMark)
kcr_SetWindowLong(%Window{prop:handle},GWL_EXSTYLE,BOR(kcr_GetWindowLong(%Window{prop:handle},GWL_EXSTYLE),WS_EX_CONTEXTHELP))
    #ENDIF
    #IF(%OverrideDefaultIcon)
%Window{PROP:Icon} = '~%Icon'
    #ENDIF
    #IF(%TransparentWindow)
kcr_SetWindowLong(%Window{prop:handle},GWL_EXSTYLE,BOR(kcr_GetWindowLong(%Window{prop:handle},GWL_EXSTYLE),WS_EX_TRANSPARENT))
    #ENDIF
kcr_GetWindowRect(%Window{prop:handle},rc)
kcr_InvalidateRect(%Window{prop:handle},rc,TRUE)
hRgnUpdate = kcr_CreateRectRgn(0,0,1,1)
kcr_SendMessage(%Window{prop:handle},WM_NCPAINT,kcr_GetUpdateRgn(%Window{prop:handle},hRgnUpdate,FALSE),0)
!----------------------------------------------------------------------
  #ENDIF
#ENDAT
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_MenuAccess,'Menu Access Level Support'),PROCEDURE,FIRST,REQ(KCR_Win32)
#! ----------------------------------------------------------------
#RESTRICT
  #CASE(UPPER(%ProcedureTemplate))
  #OF('FRAME')
    #ACCEPT
  #ELSE
    #REJECT
  #ENDCASE
#ENDRESTRICT
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_MenuAccess (Devuna)','Menu Access Level Support')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds simple security to an application menu.')
  #DISPLAY ('')
  #BOXED('Menu Access Control File')
    #PROMPT('Menu File &Name:',@S8),%MenuFilename,REQ,DEFAULT('MMmnu')
    #PROMPT('Menu F&ull Pathname:',@S64),%MenuFullPathname,REQ,DEFAULT(%MenuFilename)
    #PROMPT('File Prefix:',@S3),%MenuPrefix,REQ,DEFAULT('mnu')
  #ENDBOXED
  #BOXED('Menu Manager Window')
    #PROMPT('Caption:',@S32),%MenuCaption,REQ,DEFAULT('Menu Manager')
    #PROMPT('Font Name:',@S32),%MenuFontName,REQ,DEFAULT('Ms Sans Serif')
    #PROMPT('Font Size:',@N2),%MenuFontSize,REQ,DEFAULT('8')
    #PROMPT('Close Button Text:',@S16),%CloseButtonText,REQ,DEFAULT('Cl&ose')
    #PROMPT('Close Button Icon:',OPENDIALOG('Pick an Icon','ICON Files|*.ICO')),%CloseButtonIcon
  #ENDBOXED
  #BOXED('User Security Level')
    #PROMPT('Module Specific Security?',CHECK),%ModuleSpecificSecurity,DEFAULT(%False),AT(10)
    #ENABLE(%ModuleSpecificSecurity = %False),CLEAR
      #PROMPT('User Access Level Variable:',FROM(%GlobalData)),%GlobalUserAccessLevel,REQ,DEFAULT('GlobalUserSecurityLevel')
    #ENDENABLE
    #ENABLE(%ModuleSpecificSecurity = %True),CLEAR
      #PROMPT('User Access Level Procedure:',PROCEDURE),%GlobalUserAccessProc,REQ
      #BUTTON('Default Module Name Generation'),MULTI(%ModuleNameDefault,%SearchText & ' = ' & %DefaultModuleName),AT(,,90,)
        #PROMPT('Search Text:',@S255),%SearchText,REQ
        #PROMPT('Module Name to Use:',@S32),%DefaultModuleName,REQ
      #ENDBUTTON
    #ENDENABLE
  #ENDBOXED
  #DISPLAY ('')
#ENDBOXED
#!
#ATSTART
#FIX(%Driver,'TOPSPEED')
#PROJECT(%DriverLib)
#IF(%CloseButtonIcon)
  #PROJECT(%CloseButtonIcon)
#ENDIF
#SET(%MenuPrefix,LOWER(%MenuPrefix))
#DECLARE(%MenuQueuePrefix)
#SET(%MenuQueuePrefix,%MenuPrefix & 'q')
#ENDAT
#!
#AT(%BeforeFileDeclarations),DESCRIPTION('Menu Access File Declaration')
#IF( SUB(%MenuFullPathname,1,1) = '!' )
  #SET(%ValueConstruct,SUB(%MenuFullPathname,2,LEN(%MenuFullPathname)-1))
%20MenuFilename FILE,DRIVER('TOPSPEED'),RECLAIM,NAME(%ValueConstruct),PRE(%MenuPrefix),BINDABLE,CREATE,THREAD
#ELSE
%20MenuFilename FILE,DRIVER('TOPSPEED'),RECLAIM,NAME('%MenuFullPathname'),PRE(%MenuPrefix),BINDABLE,CREATE,THREAD
#END
#SET(%ValueConstruct,UPPER(%MenuPrefix) & '_SysIdKey             KEY(' & %MenuPrefix & ':l' & UPPER(%MenuPrefix) & '_SysId),NOCASE,OPT,PRIMARY')
%ValueConstruct
#SET(%ValueConstruct,UPPER(%MenuPrefix) & '_ControlKey           KEY(' & %MenuPrefix & ':szControl),NOCASE,OPT')
%ValueConstruct
#SET(%ValueConstruct,UPPER(%MenuPrefix) & '_TextKey              KEY(' & %MenuPrefix & ':szText),NOCASE,OPT,DUP')
%ValueConstruct
#SET(%ValueConstruct,UPPER(%MenuPrefix) & '_ModuleKey            KEY(' & %MenuPrefix & ':szModule),NOCASE,OPT,DUP')
%ValueConstruct
Record                   RECORD,PRE(%MenuPrefix)
#SET(%ValueConstruct,'l' & UPPER(%MenuPrefix) & '_SysId')
%27ValueConstruct LONG
szControl                   CSTRING(65)
szText                      CSTRING(33)
szModule                    CSTRING(33)
bAccessLevel                BYTE
                         END
                     END

#ENDAT
#!
#AT(%ModuleDataSection)
#SET(%ValueConstruct,'MenuQueue                 QUEUE,PRE(' & %MenuPrefix & 'q)')
%ValueConstruct
szControl                   CSTRING(65)
szText                      CSTRING(33)
szModule                    CSTRING(33)
bAccessLevel                BYTE
bModified                   BYTE
                          END
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9500),DESCRIPTION('Setup Menu Access')
DO MenuSetup                                    !Call Menu Setup Routine
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(1000),DESCRIPTION('Free Menu Access Queue')
FREE(MenuQueue)                                 !Free the menu access queue
#ENDAT
#!
#AT(%ProcedureRoutines),DESCRIPTION('Menu Access Setup Routine')
MenuSetup   ROUTINE
 FREE(MenuQueue)
 OPEN(%MenuFilename)
 CASE ERRORCODE()
 OF NoFileErr
    CREATE(%MenuFilename)
    OPEN(%MenuFilename)
 OF InvalidFileErr
    CLOSE(%MenuFilename)
    REMOVE(%MenuFilename)
    CREATE(%MenuFilename)
    OPEN(%MenuFilename)
 ELSE
    SET(%MenuFilename)
    LOOP
      NEXT(%MenuFilename)
      IF ERRORCODE()
         BREAK
      ELSE
         %MenuQueuePrefix:szControl = %MenuPrefix:szControl
         %MenuQueuePrefix:szText = %MenuPrefix:szText
         %MenuQueuePrefix:szModule = %MenuPrefix:szModule
         %MenuQueuePrefix:bAccessLevel = %MenuPrefix:bAccessLevel
         ADD(MenuQueue,+%MenuQueuePrefix:szControl)
      END
    END
 END

#FOR(%Control),WHERE(%ControlMenu AND INSTRING('?',%Control,1))
 #SET(%ValueConstruct,QUOTE(%ControlParameter))
 SetMenuAccess(%Control,'%Control','%ValueConstruct')
#ENDFOR

 LOOP I# = 1 TO RECORDS(MenuQueue)
   GET(MenuQueue,I#)
   %MenuPrefix:szControl = %MenuQueuePrefix:szControl
#SET(%ValueConstruct,'GET(' & %MenuFilename & ',' & %MenuPrefix & ':' & UPPER(%MenuPrefix) & '_ControlKey)')
   %ValueConstruct
   IF ~ERRORCODE()
      DELETE(%MenuFilename)
   END
 END
 EXIT
#ENDAT
#!
#AT(%CustomModuleDeclarations),DESCRIPTION('SetMenuAccess Prototype')
  #ADD(%CustomModuleMapModule,'CURRENT MODULE')
  #ADD(%CustomModuleMapProcedure,'SetMenuAccess')
  #SET(%CustomModuleMapProcedurePrototype,'PROCEDURE(LONG lFeq,STRING sControl,STRING sParameter)')
#ENDAT
#!
#AT(%LocalProcedures),DESCRIPTION('SetMenuAccess Procedure')
SetMenuAccess   PROCEDURE(LONG lFeq,STRING sControl, STRING sParameter)
loc:szText  LIKE(%MenuPrefix:szText)
bAmpersand  BYTE
 CODE
 bAmpersand = INSTRING('&',sParameter,1)
 IF bAmpersand
    loc:szText = SUB(sParameter,1,bAmpersand-1) & SUB(sParameter,bAmpersand+1,LEN(sParameter)-bAmpersand)
 ELSE
    loc:szText = sParameter
 END

 %MenuQueuePrefix:szControl = sControl
 GET(MenuQueue,+%MenuQueuePrefix:szControl)
 IF ~ERRORCODE()
   IF %MenuQueuePrefix:szText <> loc:szText
      %MenuPrefix:szControl = %MenuQueuePrefix:szControl
#SET(%ValueConstruct,'GET(' & %MenuFilename & ',' & %MenuPrefix & ':' & UPPER(%MenuPrefix) & '_ControlKey)')
      %ValueConstruct
      IF ~ERRORCODE()
         %MenuPrefix:szText = loc:szText
         PUT(%MenuFilename)
      END
   ELSE
      %MenuPrefix:szControl = %MenuQueuePrefix:szControl
      %MenuPrefix:szText = %MenuQueuePrefix:szText
      %MenuPrefix:szModule = %MenuQueuePrefix:szModule
      %MenuPrefix:bAccessLevel = %MenuQueuePrefix:bAccessLevel
   END
   DELETE(MenuQueue)
 ELSE
#SET(%ValueConstruct,'SET(' & %MenuFilename & ',' & %MenuPrefix & ':' & UPPER(%MenuPrefix) & '_SysIdKey)')
   %ValueConstruct
   PREVIOUS(%MenuFilename)
   IF ERRORCODE()
#SET(%ValueConstruct,%MenuPrefix & ':l' & UPPER(%MenuPrefix) & '_SysId = 1')
      %ValueConstruct
   ELSE
#SET(%ValueConstruct,%MenuPrefix & ':l' & UPPER(%MenuPrefix) & '_SysId += 1')
      %ValueConstruct
   END
   %MenuPrefix:szControl = sControl
   %MenuPrefix:szText = loc:szText
   %MenuPrefix:szModule = ''
#IF(%ModuleSpecificSecurity)
  #FOR(%ModuleNameDefault)
   IF %MenuPrefix:szModule = '' AND INSTRING('%SearchText',sControl,1,1)
      %MenuPrefix:szModule = '%DefaultModuleName'
   END
  #ENDFOR
   IF %MenuPrefix:szModule = ''
      %MenuPrefix:szModule = 'Base'
   END
#ELSE
   %MenuPrefix:szModule = 'Base'
#ENDIF
   %MenuPrefix:bAccessLevel = 5
   ADD(%MenuFilename)
 END
#IF(%ModuleSpecificSecurity)
 IF %GlobalUserAccessProc(%MenuPrefix:szModule) > %MenuPrefix:bAccessLevel
#ELSE
 IF %GlobalUserAccessLevel > %MenuPrefix:bAccessLevel
#ENDIF
    lFeq{PROP:Disable} = True
 ELSE
    lFeq{PROP:Disable} = False
 END
 RETURN
!----------------------------------------------------------------------
MenuManager     PROCEDURE()
MMWindow WINDOW('%MenuCaption'),AT(,,296,182),FONT('%MenuFontName',%MenuFontSize,,),CENTER,GRAY,DOUBLE,MDI
       ENTRY(@s64),AT(4,4,127,10),USE(%MenuQueuePrefix:szControl),SKIP,COLOR(COLOR:BTNFACE),READONLY
       ENTRY(@s32),AT(133,4,63,10),USE(%MenuQueuePrefix:szText),SKIP,COLOR(COLOR:BTNFACE),READONLY
       ENTRY(@s32),AT(198,4,63,10),USE(%MenuQueuePrefix:szModule)
       SPIN(@s20),AT(263,4,30,10),USE(%MenuQueuePrefix:bAccessLevel),RIGHT(1),OVR,RANGE(0,5),STEP(1)
       LIST,AT(4,16,288,146),USE(?List),VSCROLL,FORMAT('128L(1)|M~Control~@s64@64L(1)|~Text~@s32@64L(1)|~Module~@s32@20C~Level~@n1@'), |
           FROM(MenuQueue)
#IF(%CloseButtonIcon)
       BUTTON('%CloseButtonText'),AT(252,166,40,12),USE(?ExitButton),LEFT,ICON('%CloseButtonIcon')
#ELSE
       BUTTON('%CloseButtonText'),AT(252,166,40,12),USE(?ExitButton)
#ENDIF
     END
 CODE
 FREE(MenuQueue)
 OPEN(%MenuFilename)
 IF ERRORCODE() = NoError
    SET(%MenuFilename)
    LOOP
      NEXT(%MenuFilename)
      IF ERRORCODE()
         BREAK
      ELSE
         %MenuQueuePrefix:szControl = %MenuPrefix:szControl
         %MenuQueuePrefix:szText = %MenuPrefix:szText
         %MenuQueuePrefix:szModule = %MenuPrefix:szModule
         %MenuQueuePrefix:bAccessLevel = %MenuPrefix:bAccessLevel
         %MenuQueuePrefix:bModified = False
         ADD(MenuQueue,+%MenuQueuePrefix:szControl)
      END
    END
 END
 OPEN(MMWindow)
 kcr_SetWindowLong(MMWindow{prop:handle},GWL_STYLE,BOR(kcr_GetWindowLong(MMWindow{prop:handle},GWL_STYLE),WS_SYSMENU))
 kcr_SetClassLong(MMWindow{prop:handle},GCL_HICONx,0)
 SELECT(?List)
 GET(MenuQueue,1)
 ACCEPT
   CASE EVENT()
     OF EVENT:Accepted
        CASE FIELD()
          OF ?ExitButton
             POST(EVENT:CloseWindow)
          OF ?%MenuQueuePrefix:szModule
             %MenuQueuePrefix:bModified = True
             PUT(MenuQueue)
        END
     OF EVENT:NewSelection
        CASE FIELD()
          OF ?List
             GET(MenuQueue,CHOICE(?List))
          OF ?%MenuQueuePrefix:bAccessLevel
             %MenuQueuePrefix:bModified = True
             PUT(MenuQueue)
        END
        DISPLAY()
     OF EVENT:ColumnResize
        IF ?List{PROPLIST:Width,1} > 182
           ?List{PROPLIST:Width,1} = 182
        END
        ?List{PROPLIST:Width,2} = (256 - ?List{PROPLIST:Width,1})/2
        ?List{PROPLIST:Width,3} = (256 - ?List{PROPLIST:Width,1})/2
        ?%MenuQueuePrefix:szControl{PROP:Width} = ?List{PROPLIST:Width,1} - 1
        ?%MenuQueuePrefix:szText{PROP:Xpos} = ?%MenuQueuePrefix:szControl{PROP:Xpos} + ?%MenuQueuePrefix:szControl{PROP:Width} + 2
        ?%MenuQueuePrefix:szText{PROP:Width} = ?List{PROPLIST:Width,2} - 1
        ?%MenuQueuePrefix:szModule{PROP:Xpos} = ?%MenuQueuePrefix:szText{PROP:Xpos} + ?%MenuQueuePrefix:szText{PROP:Width} + 2
        ?%MenuQueuePrefix:szModule{PROP:Width} = ?List{PROPLIST:Width,3} - 1
   END
 END
 LOOP I# = 1 TO RECORDS(MenuQueue)
   GET(MenuQueue,I#)
   IF %MenuQueuePrefix:bModified
      %MenuPrefix:szControl = %MenuQueuePrefix:szControl
#SET(%ValueConstruct,'GET(' & %MenuFilename & ',' & %MenuPrefix & ':' & UPPER(%MenuPrefix) & '_ControlKey)')
      %ValueConstruct
      IF ~ERRORCODE()
         %MenuPrefix:szModule = %MenuQueuePrefix:szModule
         %MenuPrefix:bAccessLevel = %MenuQueuePrefix:bAccessLevel
         PUT(%MenuFilename)
      END
   END
 END
 RETURN
#ENDAT
#!
#AT(%CustomGlobalDeclarations)
  #ADD(%CustomGlobalMapModule,%Module)
  #ADD(%CustomGlobalMapProcedure,'MenuManager')
  #SET(%CustomGlobalMapProcedurePrototype,'()')
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_EditInPlaceInitialization,'Edit In Place Initialization'),PROCEDURE,REQ(BrowseUpdateButtons(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_EditInPlaceInitialization (Devuna)','Use dictionary properties for edit-in-place fields')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension template adds code to the Init procedures'),AT(10)
  #DISPLAY ('OF any column specific edit in place definitions.  Code'),AT(10)
  #DISPLAY ('is added to set the run-time properties for the edit-in-'),AT(10)
  #DISPLAY ('place field to match the screen control definition in the'),AT(10)
  #DISPLAY ('dictionary.  The code is executed only if the edit-in-'),AT(10)
  #DISPLAY ('place control is the same type as defined in the dictionary.'),AT(10)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#ATSTART
#DECLARE(%MySymbol)
#DECLARE(%EIPControlType)
#DECLARE(%EIPPropText)
#ENDAT
#!
#AT(%EditInPlaceManagerMethodCodeSection,%ActiveTemplateParentInstance,,'Init','(UNSIGNED FieldNumber,UNSIGNED ListBox,*? UseVar)'),PRIORITY(7500),DESCRIPTION('Initialize Edit-In-Place')
  #FIND(%Field,%EditInPlaceField)
  #FOR(%FieldScreenControl),WHERE(SUB(%FieldScreenControl,1,6) <> 'PROMPT')
!!%FieldScreenControl
    #CALL(%ExtractEIPControlType)
IF SELF.feq{PROP:Type} = %EIPControlType
   SELF.feq{PROP:Text} = %EIPPropText
    #!
    #!------CAP
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'CAP'))
    #IF(%MySymbol)
   SELF.feq{PROP:CAP} = True
    #ENDIF
    #!
    #!------CENTER
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'CENTER'))
    #IF(%MySymbol)
   SELF.feq{PROP:CENTER} = True
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'CENTER',0))
      #IF(%MySymbol)
   SELF.feq{PROP:CENTEROFFSET} = %MySymbol
      #ENDIF
    #ENDIF
    #!
    #!------COLOR
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'COLOR',1))
    #IF(%MySymbol)
   SELF.feq{PROP:Color,1} = %MySymbol
    #ENDIF
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'COLOR',2))
    #IF(%MySymbol)
   SELF.feq{PROP:Color,2} = %MySymbol
    #ENDIF
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'COLOR',3))
    #IF(%MySymbol)
   SELF.feq{PROP:Color,3} = %MySymbol
    #ENDIF
    #!
    #!------CURSOR
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'CURSOR',0))
    #IF(%MySymbol)
   SELF.feq{PROP:Cursor} = %MySymbol
    #ENDIF
    #!
    #!------DECIMAL
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'DECIMAL'))
    #IF(%MySymbol)
   SELF.feq{PROP:DECIMAL} = True
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'DECIMAL',0))
      #IF(%MySymbol)
   SELF.feq{PROP:DECIMALOFFSET} = %MySymbol
      #ENDIF
    #ENDIF
    #!
    #!------DELAY
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'DELAY',0))
    #IF(%MySymbol)
   SELF.feq{PROP:DELAY} = %MySymbol
    #ENDIF
    #!
    #!------DROP
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'DROP',0))
    #IF(%MySymbol)
   SELF.feq{PROP:DROP} = %MySymbol
    #ENDIF
    #!
    #!------FONT
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'FONT'))
    #IF(%MySymbol)
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'FONT',1))
      #IF(%MySymbol)
   SELF.feq{PROP:Font,1} = %MySymbol
      #ENDIF
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'FONT',2))
      #IF(%MySymbol)
   SELF.feq{PROP:Font,2} = %MySymbol
      #ENDIF
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'FONT',3))
      #IF(%MySymbol)
   SELF.feq{PROP:Font,3} = %MySymbol
      #ENDIF
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'FONT',4))
      #IF(%MySymbol)
   SELF.feq{PROP:Font,4} = %MySymbol
      #ENDIF
    #ENDIF
    #!
    #!------HLP
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'HLP',0))
    #IF(%MySymbol)
   SELF.feq{PROP:HLP} = %MySymbol
    #ENDIF
    #!
    #!------HSCROLL
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'HSCROLL'))
    #IF(%MySymbol)
   SELF.feq{PROP:HSCROLL} = True
    #ENDIF
    #!
    #!------HVSCROLL
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'HVSCROLL'))
    #IF(%MySymbol)
   SELF.feq{PROP:HVSCROLL} = True
    #ENDIF
    #!
    #!------INS
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'INS'))
    #IF(%MySymbol)
   SELF.feq{PROP:INS} = True
    #ENDIF
    #!
    #!------LEFT
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'LEFT'))
    #IF(%MySymbol)
   SELF.feq{PROP:LEFT} = True
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'LEFT',0))
      #IF(%MySymbol)
   SELF.feq{PROP:LEFTOFFSET} = %MySymbol
      #ENDIF
    #ENDIF
    #!
    #!------MASK
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'MASK'))
    #IF(%MySymbol)
   SELF.feq{PROP:MASK} = True
    #ENDIF
    #!
    #!------MSG
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'MSG',0))
    #IF(%MySymbol)
   SELF.feq{PROP:MSG} = %MySymbol
    #ENDIF
    #!
    #!------OVR
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'OVR'))
    #IF(%MySymbol)
   SELF.feq{PROP:OVR} = True
    #ENDIF
    #!
    #!------PASSWORD
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'PASSWORD'))
    #IF(%MySymbol)
   SELF.feq{PROP:PASSWORD} = True
    #ENDIF
    #!
    #!------RANGE
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'RANGE'))
    #IF(%MySymbol)
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'RANGE',1))
      #IF(%MySymbol)
   SELF.feq{PROP:Range,1} = %MySymbol
      #ENDIF
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'RANGE',2))
      #IF(%MySymbol)
   SELF.feq{PROP:Range,2} = %MySymbol
      #ENDIF
    #ENDIF
    #!
    #!------REPEAT
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'REPEAT',0))
    #IF(%MySymbol)
   SELF.feq{PROP:REPEAT} = %MySymbol
    #ENDIF
    #!
    #!------REQ
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'REQ'))
    #IF(%MySymbol)
   SELF.feq{PROP:REQ} = True
    #ENDIF
    #!
    #!------RIGHT
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'RIGHT'))
    #IF(%MySymbol)
   SELF.feq{PROP:RIGHT} = True
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'RIGHT',0))
      #IF(%MySymbol)
   SELF.feq{PROP:RIGHTOFFSET} = %MySymbol
      #ENDIF
    #ENDIF
    #!
    #!------SCROLL
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'SCROLL'))
    #IF(%MySymbol)
   SELF.feq{PROP:SCROLL} = True
    #ENDIF
    #!
    #!------STEP
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'STEP',0))
    #IF(%MySymbol)
   SELF.feq{PROP:STEP} = %MySymbol
    #ENDIF
    #!
    #!------TIP
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'TIP',0))
    #IF(%MySymbol)
   SELF.feq{PROP:TIP} = %MySymbol
    #ENDIF
    #!
    #!------UPR
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'UPR'))
    #IF(%MySymbol)
   SELF.feq{PROP:UPR} = True
    #ENDIF
    #!
    #!------VALUE
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'VALUE'))
    #IF(%MySymbol)
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'VALUE',1))
      #IF(%MySymbol)
   SELF.feq{PROP:Value,1} = %MySymbol
      #ENDIF
      #SET(%MySymbol,EXTRACT(%FieldScreenControl,'VALUE',2))
      #IF(%MySymbol)
   SELF.feq{PROP:Value,2} = %MySymbol
      #ENDIF
    #ENDIF
    #!
    #!------VSCROLL
    #SET(%MySymbol,EXTRACT(%FieldScreenControl,'VSCROLL'))
    #IF(%MySymbol)
   SELF.feq{PROP:VSCROLL} = True
    #ENDIF
    #!
END
  #ENDFOR
#ENDAT
#!
#GROUP(%ExtractEIPControlType)
#CASE(SUB(%FieldScreenControl,1,4))
  #OF('CHEC')
     #SET(%EIPControlType,'CREATE:Check')
     #SET(%EIPPropText,'''''')
  #OF('COMB')
     #SET(%EIPControlType,'CREATE:Combo')
     #SET(%EIPPropText,'''' & SUB(%FieldScreenControl,7,INSTRING(')',%FieldScreenControl,1)-7) & '''')
  #OF('ENTR')
     #SET(%EIPControlType,'CREATE:Entry')
     #SET(%EIPPropText,'''' & SUB(%FieldScreenControl,7,INSTRING(')',%FieldScreenControl,1)-7) & '''')
  #OF('LIST')
     #SET(%EIPControlType,'CREATE:List')
     #SET(%EIPPropText,'''' & SUB(%FieldScreenControl,6,INSTRING(')',%FieldScreenControl,1)-6) & '''')
  #OF('SPIN')
     #SET(%EIPControlType,'CREATE:Spin')
     #SET(%EIPPropText,'''' & SUB(%FieldScreenControl,6,INSTRING(')',%FieldScreenControl,1)-6) & '''')
#ELSE
     #SET(%EIPControlType,'0')
     #SET(%EIPPropText,'''''')
#ENDCASE
#!
#!
#EXTENSION(KCR_ProjectAdditions,'Project Additions Global Extension'),APPLICATION
#!--------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ProjectAdditions (Devuna)','Add Resources to Project')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds the Cybertool function prototypes to'),AT(10)
  #DISPLAY ('the Global Map and adds the Library to the Project file.'),AT(10)
  #DISPLAY ('')
  #PROMPT('Project Additions...',OPENDIALOG('Pick a File','Icons (*.ico)|*.ICO|Windows Bitmaps (*.bmp)|*.BMP|GIF files|*.GIF|JPEG files (*.jpg)|*.JPG|Windows Metafiles (*.wmf)|*.WMF|PCX files|*.PCX|All files|*.*')),%ProjectAddition,MULTI('Filename'),INLINE
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%CustomGlobalDeclarations)
  #FOR(%ProjectAddition)
    #PROJECT(%ProjectAddition)
  #ENDFOR
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SubClassWindow,'SubClass Window Extension'),PROCEDURE,MULTI
#!--------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SubClassWindow (Devuna)','SubClass Window Extension')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds a procedure to handle messages sent'),AT(10)
  #DISPLAY ('to the Window or Control.'),AT(10)
  #DISPLAY ('')
  #PROMPT  ('What do you want to subclass',OPTION),%SubClassOption,DEFAULT('Window')
  #PROMPT  ('Control',RADIO)
  #PROMPT  ('Window',RADIO)
  #ENABLE  (%SubClassOption = 'Control')
    #PROMPT('Select the Control',CONTROL),%SubClassControl
  #ENDENABLE
  #DISPLAY ('')
#ENDBOXED
#!
#!
#!------------------------------------------------------------
#AT(%ModuleDataSection)
  #IF(%SubClassOption = 'Control')
    #SET(%ValueConstruct,SUB(%SubClassControl,2,LEN(%SubClassControl)-1)&'::OrigWndProc')
  #ELSE
    #SET(%ValueConstruct,%Window&'::OrigWndProc')
  #ENDIF
%20ValueConstruct LONG,THREAD
#ENDAT
#!
#!
#!------------------------------------------------------------
#AT(%CustomModuleDeclarations)
  #ADD(%CustomModuleMapModule,'CURRENT MODULE')
  #IF(%SubClassOption = 'Control')
    #SET(%ValueConstruct,' ' & SUB(%SubClassControl,2,LEN(%SubClassControl)-1) & '::WndProc')
  #ELSE
    #SET(%ValueConstruct,' ' & %Window & '::WndProc')
  #ENDIF
  #ADD(%CustomModuleMapProcedure,%ValueConstruct)
  #SET(%CustomModuleMapProcedurePrototype,'(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam),LONG,PASCAL')
#ENDAT
#!
#!
#!------------------------------------------------------------
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8200),DESCRIPTION('SubClassWindow: Init')
  #IF(%SubClassOption = 'Control')
    #SET(%ValueConstruct,SUB(%SubClassControl,2,LEN(%SubClassControl)-1))
%ValueConstruct::OrigWndProc = %SubClassControl{Prop:WndProc}           ! Save address OF code that handles window messages
%SubClassControl{Prop:WndProc} = ADDRESS(%ValueConstruct::WndProc)      ! Re-assign address OF code that handles window messages
  #ELSE
%Window::OrigWndProc = %Window{Prop:WndProc}           ! Save address OF code that handles window messages
%Window{Prop:WndProc} = ADDRESS(%Window::WndProc)      ! Re-assign address OF code that handles window messages
  #ENDIF

#ENDAT
#!
#!
#!------------------------------------------------------------
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(1000),DESCRIPTION('SubClassWindow: Kill')
  #IF(%SubClassOption = 'Control')
    #SET(%ValueConstruct,SUB(%SubClassControl,2,LEN(%SubClassControl)-1))
IF %ValueConstruct::OrigWndProc
   %SubClassControl{Prop:WndProc} = %ValueConstruct::OrigWndProc        ! Restore the handler for this window
END
  #ELSE
IF %Window::OrigWndProc
   %Window{Prop:WndProc} = %Window::OrigWndProc        ! Restore the handler for this window
END
  #ENDIF

#ENDAT
#!
#!
#!------------------------------------------------------------
#AT(%LocalProcedures)
  #IF(%SubClassOption = 'Control')
    #SET(%ValueConstruct,SUB(%SubClassControl,2,LEN(%SubClassControl)-1))
  #ELSE
    #SET(%ValueConstruct,%Window)
  #ENDIF
!========================================================================================
%ValueConstruct::WndProc PROCEDURE(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam)
!========================================================================================
#EMBED(%SubClassWindowDataSection,'WndProc:  Data Section'),%ValueConstruct

    CODE
    #EMBED(%SubClassWindowBeginCodeSection,'WndProc: Start of Code'),%ValueConstruct
    CASE wMsg
    #EMBED(%SubClassWindowCaseSection,'WndProc: Inside CASE MESSAGE statement'),%ValueConstruct
    END
    #EMBED(%SubClassWindowEndCodeSection,'WndProc: End of Code'),%ValueConstruct
    RETURN(CallWindowProc(%ValueConstruct::OrigWndProc,hWnd,wMsg,wParam,lParam))

#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SubClassClientWindow,'SubClass Client Window Extension'),PROCEDURE
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SubClassClientWindow (Devuna)','SubClass Client Window Extension')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds a procedure to handle messages sent'),AT(10)
  #DISPLAY ('to the Client Window.'),AT(10)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%ModuleDataSection)
SAVE:%Procedure::ClientWindowProc    LONG
#ENDAT
#!
#AT(%CustomModuleDeclarations)
#!  %Procedure::ClientWindowProc(UNSIGNED,UNSIGNED,UNSIGNED,LONG),LONG,PASCAL
    #ADD(%CustomModuleMapModule,'CURRENT MODULE')
    #SET(%ValueConstruct,' ' & %Procedure & '::ClientWindowProc')
    #ADD(%CustomModuleMapProcedure,%ValueConstruct)
    #SET(%CustomModuleMapProcedurePrototype,'(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam),LONG,PASCAL')
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8200),DESCRIPTION('SubClassClientWindow: Init')
SAVE:%Procedure::ClientWindowProc = %Window{Prop:ClientWndProc}      ! Save address OF code that handles client window messages
%Window{Prop:ClientWndProc} = ADDRESS(%Procedure::ClientWindowProc)  ! Re-assign address OF code that handles client window messages
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(1000),DESCRIPTION('SubClassClientWindow: Kill')
IF SAVE:%Procedure::ClientWindowProc
   %Window{Prop:ClientWndProc} = SAVE:%Procedure::ClientWindowProc   ! Restore the handler for this client window
END
#ENDAT
#!
#!------------------------------------------------------------
#AT(%LocalProcedures)
!========================================================================================
%Procedure::ClientWindowProc PROCEDURE(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam)
!========================================================================================
hdrX        GROUP,PRE()
hwndFrom        LONG
idfrom          LONG
nm_code         LONG
            END
#EMBED(%SubClassClientWindowDataSection,'SubClassClientWindow:  Data Section')
    CODE
    #EMBED(%SubClassClientWindowBeginCodeSection,'SubClassClientWindow:  Start OF Code')
    CASE wMsg
    #EMBED(%SubClassClientWindowCaseSection,'SubClassClientWindow:  Inside CASE MESSAGE statement')
    OF WM_NOTIFY
       memcpy(ADDRESS(hdrX),lParam,SIZE(hdrX))
       #EMBED(%SubClassClientWindowNotifySection,'SubClassClientWindow:  Inside CASE OF WM_NOTIFY statement')
    END
    #EMBED(%SubClassClientWindowEndCodeSection,'SubClassClientWindow:  End OF Code')
    RETURN(CallWindowProc(SAVE:%Procedure::ClientWindowProc,hWnd,wMsg,wParam,lParam))
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SubClassApplicationWindow,'SubClass Application Client Window Extension'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SubClassApplicationWindow (Devuna)','SubClass Application Client Window Extension')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds a procedure to handle messages sent'),AT(10)
  #DISPLAY ('to the Application''s Client Window.'),AT(10)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#AT(%ModuleDataSection)
SAVE:%Procedure::ClientWindowProc    LONG
#ENDAT
#!
#AT(%CustomModuleDeclarations)
#! %Procedure::ClientWindowProc(UNSIGNED,UNSIGNED,UNSIGNED,LONG),LONG,PASCAL
    #ADD(%CustomModuleMapModule,'CURRENT MODULE')
    #SET(%ValueConstruct,' ' & %Procedure & '::ClientWindowProc')
    #ADD(%CustomModuleMapProcedure,%ValueConstruct)
    #SET(%CustomModuleMapProcedurePrototype,'(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam),LONG,PASCAL')
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8200),DESCRIPTION('SubClassClientWindow: Init')
SAVE:%Procedure::ClientWindowProc = %Window{Prop:ClientWndProc}      ! Save address OF code that handles client window messages
%Window{Prop:ClientWndProc} = ADDRESS(%Procedure::ClientWindowProc)  ! Re-assign address OF code that handles client window messages
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(1000),DESCRIPTION('SubClassClientWindow: Kill')
IF SAVE:%Procedure::ClientWindowProc
   %Window{Prop:ClientWndProc} = SAVE:%Procedure::ClientWindowProc   ! Restore the handler for this client window
END
#ENDAT
#!
#!------------------------------------------------------------
#AT(%LocalProcedures)
%Procedure::ClientWindowProc PROCEDURE(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam)
#EMBED(%SubClassClientWindowDataSection,'SubClassClientWindow:  Data Section')

    CODE
    #EMBED(%SubClassClientWindowBeginCodeSection,'SubClassClientWindow:  Start OF Code')
    CASE wMsg
      #EMBED(%SubClassClientWindowCaseSection,'SubClassClientWindow:  Inside CASE MESSAGE statement')
    END
    #EMBED(%SubClassClientWindowEndCodeSection,'SubClassClientWindow:  End OF Code')
    RETURN(CallWindowProc(SAVE:%Procedure::ClientWindowProc,hWnd,wMsg,wParam,lParam))
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_PaintWindowFrame,'Paint Window Frame'),PROCEDURE,REQ(KCR_SubClassWindow)
#!--------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_PaintWindowFrame (Devuna)','Paint Window Frame')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds code to paint the window frame'),AT(10)
  #DISPLAY ('to the Window or Control.'),AT(10)
  #DISPLAY ('')
  #PROMPT  ('Frame Color:',COLOR),%FrameColor,DEFAULT(0B99D7FH)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
  #DECLARE(%WndProc)
  #DECLARE(%ThisControl)
  #IF(%SubClassOption = 'Control')
    #SET(%WndProc,SUB(%SubClassControl,2,LEN(%SubClassControl)-1) & '::OrigWndProc')
    #SET(%ThisControl,SUB(%SubClassControl,2,LEN(%SubClassControl)-1))
  #ELSE
    #SET(%WndProc,%Window & '::OrigWndProc')
    #SET(%ThisControl,%Window)
  #ENDIF
#ENDAT
#!
#!
#!------------------------------------------------------------
#AT(%SubClassWindowDataSection,%ThisControl),PRIORITY(5000),DESCRIPTION('Paint Window Frame Data')
lb          LIKE(LOGBRUSH)
hOldBrush   UNSIGNED
hBrush      UNSIGNED
hDC         UNSIGNED
hCheckBox   UNSIGNED
rVal        UNSIGNED
crColor     COLORREF
crBrush     COLORREF(%FrameColor)
rc          LIKE(RECT)
#ENDAT
#!
#!
#AT(%SubClassWindowCaseSection,%ThisControl),PRIORITY(5000),DESCRIPTION('Paint Window Frame Code')
OF WM_PAINT
   rVal = CallWindowProc(%WndProc,hWnd,wMsg,wParam,lParam)
   hDC = getWindowDC(hWnd)
   crColor = GetPixel(hDC,0,0)
   IF crColor <> crBrush
      lb.lbStyle = BS_SOLID
      lb.lbColor = crBrush
      lb.lbHatch = 0
      hBrush = CreateBrushIndirect(lb)
      hOldBrush = SelectObject(hDC,hBrush)

   !   ExtFloodFill(hDC,0,0,crColor,FLOODFILLSURFACE)

      GetWindowRect(hWnd,rc)
      OffsetRect(rc,-rc.left,-rc.top)
      FrameRect(hDC,rc,hBrush)

      SelectObject(hDC,hOldBrush)
      DeleteObject(hBrush)
   END
   ReleaseDC(hWnd,hDC)
   RETURN(rVal)
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ChangeFileDriver,'Change File Driver'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ChangeFileDriver (Devuna)','Change File Driver')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds code to replace selected file drivers'),AT(10)
  #DISPLAY ('with new ones.  Code is added to set the DRIVER property.'),AT(10)
  #DISPLAY ('')
  #BUTTON('Replace Drivers...'),MULTI(%ReplaceDriver,%OldDriver & ' => ' & %NewDriver),INLINE
        #PROMPT('&Old Driver:',DROP('|AS400|ASCII|BASIC|BTRIEVE|Clarion|CLIPPER|DBASE3|DBASE4|DOS|FOXPRO|MSSQL|ODBC|Oracle|Scalable|SQLAnywhere|Topspeed')),%OldDriver,REQ
        #PROMPT('&New Driver:',DROP('|AS400|ASCII|BASIC|BTRIEVE|Clarion|CLIPPER|DBASE3|DBASE4|DOS|FOXPRO|MSSQL|ODBC|Oracle|Scalable|SQLAnywhere|Topspeed')),%NewDriver,REQ
  #ENDBUTTON
  #DISPLAY ('')
#ENDBOXED
#!
#ATSTART
  #FOR(%ReplaceDriver)
    #FIX(%Driver,%NewDriver)
    #PROJECT(%DriverLIB)
  #ENDFOR
#ENDAT
#AT(%AfterEntryPointCodeStatement)
  #FOR(%ReplaceDriver)
    #FOR(%File),WHERE(%FileDriver = %OldDriver)
%File{PROP:DRIVER} = '%NewDriver'
    #ENDFOR
  #ENDFOR
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_QueueEditInPlace,'Edit In Place Support For Queue'),PROCEDURE,MULTI
#! ----------------------------------------------------------------
#!
#PROMPT('&List Control:',CONTROL),%ListControl,REQ
#PROMPT('&Add Control:',CONTROL),%AddControl
#PROMPT('&Change Control:',CONTROL),%ChangeControl
#PROMPT('&Delete Control:',CONTROL),%DeleteControl
#BUTTON('Column &Specific'),MULTI(%QueueEditInPlaceList,%QueueEditInPlaceField&' - '&%QueueAllowEIP),AT(,,180)
  #PROMPT('&Queue Edit In Place Field:',@S64),%QueueEditInPlaceField
  #PROMPT('&Default Value:',@S64),%QueueEditInPlaceFieldDefaultValue
  #PROMPT('&Allow Edit-In-Place',CHECK),%QueueAllowEIP,DEFAULT(%True)
  #ENABLE(%QueueAllowEIP)
    #ENABLE(%QueueEditInPlaceField)
      #PROMPT('&Create New Class Instance',CHECK),%QueueNewClassInstance,DEFAULT(%True)
      #ENABLE(%QueueNewClassInstance)
        #PROMPT('Base &Class:',FROM(%pClassName)),%QueueABCBaseClass,REQ,DEFAULT('KCR_EntryEditClass')
      #ENDENABLE
      #ENABLE(NOT %QueueNewClassInstance)
        #PROMPT('Edit &Class:',@S64),%QueueEditClass,REQ,DEFAULT('MyEditClass')
      #ENDENABLE
    #ENDENABLE
  #ENDENABLE
#ENDBUTTON
#!
#!
#ATSTART
  #DECLARE(%QEIPNewMethodName)
  #DECLARE(%QEIPNewMethodPrototype)
  #DECLARE(%InstancePrefix)
  #SET(%InstancePrefix,'QEIP' & %ActiveTemplateInstance)
#ENDAT
#!
#!
#AT(%AfterGlobalIncludes)
   INCLUDE('ABEIP.INC'),ONCE
   INCLUDE('KCRQEIP.INC'),ONCE
#ENDAT
#!
#!
#AT(%DataSection),PRIORITY(5000),DESCRIPTION('Queue Edit In Place Data')
%InstancePrefix:Fields        FieldPairsClass
%InstancePrefix:PopupString   STRING(20)
%InstancePrefix:PopupMgr      PopupClass
%InstancePrefix:EditList      QUEUE(EditQueue),PRE(%InstancePrefix)
                              END
%InstancePrefix:EM            CLASS(EIPManager)
TabAction             BYTE
EnterAction           BYTE
ArrowAction           BYTE
FocusLossAction       BYTE
CurrentChoice         LONG,PRIVATE
AddControl            PROCEDURE(<EditClass EC>,UNSIGNED Column,BYTE AutoFree = 0)
ClearColumn           PROCEDURE,VIRTUAL
Init                  PROCEDURE,BYTE,DERIVED,PROC
InitControls          PROCEDURE,VIRTUAL
Kill                  PROCEDURE,PROC,BYTE,DERIVED
Next                  PROCEDURE,PROTECTED
GetEdit               PROCEDURE,BYTE,VIRTUAL,PROTECTED
ResetColumn           PROCEDURE,VIRTUAL,PROTECTED
Run                   PROCEDURE(BYTE Req),BYTE
TakeAction            PROCEDURE(UNSIGNED Action),VIRTUAL
TakeCompleted         PROCEDURE(BYTE Force),VIRTUAL   ! Note this does -not- override the WindowManager variant
TakeEvent             PROCEDURE,DERIVED,BYTE,PROC
TakeFieldEvent        PROCEDURE,DERIVED,BYTE,PROC
TakeFocusLoss         PROCEDURE,VIRTUAL
TakeNewSelection      PROCEDURE,DERIVED,BYTE,PROC
                    END
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9050),DESCRIPTION('Queue Edit In Place Initialization')
#FIX(%Control,%ListControl)
%InstancePrefix:Fields.Init()
#FOR(%QueueEditInPlaceList)
#!%InstancePrefix:Fields.AddPair(%ControlFrom.Record.%QueueEditInPlaceField,%ControlFrom.Record.%QueueEditInPlaceField)
%InstancePrefix:Fields.AddPair(%ControlFrom.%QueueEditInPlaceField,%ControlFrom.%QueueEditInPlaceField)
#ENDFOR
%InstancePrefix:PopupMgr.Init()
#IF(%AddControl)
%InstancePrefix:PopupMgr.AddItemMimic('Add',%AddControl)
#ENDIF
#IF(%ChangeControl)
%InstancePrefix:PopupMgr.AddItemMimic('Edit',%ChangeControl)
#ENDIF
#IF(%DeleteControl)
%InstancePrefix:PopupMgr.AddItemMimic('Delete',%DeleteControl)
#ENDIF
GlobalErrors.AddErrors(QEIP:Errors)
%ListControl{Prop:Alrt,QEIP:MouseLeft2Index} = MouseLeft2
%ListControl{Prop:Alrt,QEIP:MouseRightIndex} = MouseRight
#ENDAT
#!
#!
#AT(%ControlEventHandling,%AddControl,'Accepted'),PRIORITY(5000)
ReturnValue = %InstancePrefix:EM.Run(InsertRecord)
#ENDAT
#!
#!
#AT(%ControlEventHandling,%ChangeControl,'Accepted'),PRIORITY(5000)
#FIX(%Control,%ListControl)
LOOP
  ThisWindow.VCRRequest = VCR:None
  IF KEYCODE() = MouseRightUp
    SETKEYCODE(0)
  END
  ReturnValue = %InstancePrefix:EM.Run(ChangeRecord)
  CASE ThisWindow.VCRRequest
    OF VCR:Forward
       IF POINTER(%ControlFrom) < RECORDS(%ControlFrom)
          GET(%ControlFrom,POINTER(%ControlFrom)+1)
          %ListControl{PROP:Selected} = POINTER(%ControlFrom)
          %InstancePrefix:EM.ResetColumn()
       ELSE
          ThisWindow.VCRRequest = VCR:None
       END
    OF VCR:Backward
       IF POINTER(%ControlFrom) > 1
          GET(%ControlFrom,POINTER(%ControlFrom)-1)
          %ListControl{PROP:Selected} = POINTER(%ControlFrom)
          %InstancePrefix:EM.ResetColumn()
       ELSE
          ThisWindow.VCRRequest = VCR:None
       END
  END
UNTIL ThisWindow.VCRRequest = VCR:None
#ENDAT
#!
#!
#AT(%ControlEventHandling,%DeleteControl,'Accepted'),PRIORITY(5000)
ReturnValue = %InstancePrefix:EM.Run(DeleteRecord)
#ENDAT
#!
#!
#AT(%ControlEventHandling,%ListControl,'AlertKey'),PRIORITY(7800)
CASE KEYCODE()
  OF MouseLeft2
     IF ~%ChangeControl{PROP:Disable}
        POST(EVENT:Accepted,%ChangeControl)
     END
  OF MouseRight
     %InstancePrefix:PopupString = %InstancePrefix:PopupMgr.Ask()
END
#ENDAT
#!
#!
#AT(%QEIPAddControlCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
PARENT.AddControl(E,Column,AutoFree)
#ENDAT
#!
#!
#AT(%QEIPClearColumnCodeSection,%ActiveTemplateInstance)
#PRIORITY(1000),DESCRIPTION('Update Use Variables')
IF KEYCODE() <> EscKey
   IF SELF.LastColumn
#PRIORITY(1020),DESCRIPTION('Before Update')
      UPDATE
      GET(SELF.EQ,SELF.Column)
#PRIORITY(1100),DESCRIPTION('PUT('&%ControlFrom&')')
      PUT(%ControlFrom)
      ASSERT(~ERRORCODE())
   END
END
#PRIORITY(5000),DESCRIPTION('Parent Call')
PARENT.ClearColumn()
#ENDAT
#!
#!
#AT(%QEIPInitDataSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Default Data')
RetVal BYTE(RequestCancelled)
AtEnd  BYTE,AUTO
#ENDAT
#!
#!
#AT(%QEIPInitCodeSection,%ActiveTemplateInstance)
#PRIORITY(1000),DESCRIPTION('Setup')
SELF.TabAction = EIPAction:Always+EIPAction:Remain
SELF.EnterAction = EIPAction:Always
SELF.ArrowAction = EIPAction:Always+EIPAction:Remain+EIPAction:RetainColumn
SELF.FocusLossAction = EIPAction:Default
SELF.Arrow &= SELF.ArrowAction
SELF.Enter &= SELF.EnterAction
SELF.EQ &= %InstancePrefix:EditList
FREE(SELF.EQ)
SELF.Errors &= NULL
SELF.Fields &= %InstancePrefix:Fields
SELF.FocusLoss &= SELF.FocusLossAction
SELF.ListControl = %ListControl
SELF.Tab &= SELF.TabAction
SELF.VCRRequest &= ThisWindow.VCRRequest
SELF.CurrentChoice = CHOICE(%ListControl)
IF ~SELF.CurrentChoice
   SELF.CurrentChoice = 1
   %ListControl{PROP:Selected} = 1
END
GET(%ControlFrom,SELF.CurrentChoice)
#PRIORITY(2000),DESCRIPTION('CASE SELF.Req')
CASE SELF.Req
OF InsertRecord
  IF RECORDS(%ControlFrom)
    AtEnd = CHOOSE(SELF.CurrentChoice = RECORDS(%ControlFrom))
    SELF.CurrentChoice += 1
  ELSE
    SELF.CurrentChoice = 1
  END
  #FOR(%QueueEditInPlaceList)
    #IF(%QueueEditInPlaceFieldDefaultValue)
  %ControlFrom.%QueueEditInPlaceField = %QueueEditInPlaceFieldDefaultValue
    #ENDIF
  #ENDFOR
#PRIORITY(3000),DESCRIPTION('InsertRecord ADD')
  ADD(%ControlFrom,SELF.CurrentChoice)
  ASSERT(~ERRORCODE())
  DISPLAY(%ListControl)
  SELECT(%ListControl,SELF.CurrentChoice)
  SELF.Column = 1
OF DeleteRecord
  RetVal = CHOOSE(GlobalErrors.Throw(Msg:ConfirmDelete) = Level:Benign,RequestCompleted,RequestCancelled)
  IF RetVal = RequestCompleted
#PRIORITY(4000),DESCRIPTION('DeleteRecord Before DELETE')
     DELETE(%ControlFrom)
#PRIORITY(4500),DESCRIPTION('DeleteRecord After DELETE')
  END
  SELF.Response = RetVal
  RETURN Level:Fatal
OF ChangeRecord
  IF KEYCODE() = MouseLeft2
    SELF.Column = %ListControl{PROPLIST:MouseUpField}
  END
ELSE
  ASSERT(0)
END
GET(%ControlFrom,SELF.CurrentChoice)
%ListControl{PROP:Alrt,QEIP:MouseLeft2Index} = 0 ! Prevent alert short-stopping double click
#PRIORITY(5000),DESCRIPTION('Parent Call')
RetVal = PARENT.Init()
#ENDAT
#!
#!
#AT(%QEIPInitControlsCodeSection,%ActiveTemplateInstance)
#PRIORITY(1000),DESCRIPTION('Add EIP Controls')
#FOR(%QueueEditInPlaceList)
  #SET(%ValueConstruct,INSTANCE(%QueueEditInPlaceList))
GET(SELF.EQ,%ValueConstruct)
IF ERRORCODE()
   SELF.EQ.Field = %ValueConstruct
  #IF(%QueueAllowEIP)
    #IF(%QueueNewClassInstance)
   SELF.EQ.Control &= NEW %QueueABCBaseClass
   SELF.AddControl(SELF.EQ.Control,SELF.EQ.Field,1)
    #ELSE
   SELF.EQ.Control &= %QueueEditClass
   SELF.AddControl(SELF.EQ.Control,SELF.EQ.Field,0)
    #ENDIF
  #ELSE
   SELF.EQ.Control &= NULL
   SELF.AddControl(SELF.EQ.Control,SELF.EQ.Field,0)
  #ENDIF
END
#ENDFOR
#PRIORITY(5000),DESCRIPTION('Parent Call')
GET(SELF.EQ,1)
PARENT.InitControls()
#ENDAT
#!
#!
#AT(%QEIPKillDataSection,%ActiveTemplateInstance)
#!PRIORITY(5000),DESCRIPTION('Default Data')
ReturnValue BYTE,AUTO
#ENDAT
#!
#!
#AT(%QEIPKillCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
ReturnValue = PARENT.Kill()
#ENDAT
#!
#!
#AT(%QEIPNextCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
PARENT.Next()
#ENDAT
#!
#!
#AT(%QEIPGetEditDataSection,%ActiveTemplateInstance)
ReturnValue BYTE,AUTO
#ENDAT
#!
#!
#AT(%QEIPGetEditCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
ReturnValue = PARENT.GetEdit()
#ENDAT
#!
#!
#AT(%QEIPResetColumnCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
PARENT.ResetColumn()
#ENDAT
#!
#!
#AT(%QEIPRunDataSection,%ActiveTemplateInstance)
ReturnValue BYTE,AUTO
#ENDAT
#!
#!
#AT(%QEIPRunCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
ReturnValue = PARENT.Run(Req)
#ENDAT
#!
#!
#AT(%QEIPTakeActionCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
PARENT.TakeAction(Action)
#ENDAT
#!
#!
#AT(%QEIPTakeCompletedCodeSection,%ActiveTemplateInstance)
#PRIORITY(1000),DESCRIPTION('Setup')
SELF.Again = 0
SELF.ClearColumn
Force = 0
SELF.Response = RequestCompleted
#PRIORITY(5000),DESCRIPTION('Parent Call')
PARENT.TakeCompleted(Force)
#ENDAT
#!
#!
#AT(%QEIPTakeEventDataSection,%ActiveTemplateInstance)
ReturnValue BYTE,AUTO
#ENDAT
#!
#!
#AT(%QEIPTakeEventCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
ReturnValue = PARENT.TakeEvent()
#ENDAT
#!
#!
#AT(%QEIPTakeFieldEventDataSection,%ActiveTemplateInstance)
ReturnValue BYTE,AUTO
#ENDAT
#!
#!
#AT(%QEIPTakeFieldEventCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
ReturnValue = PARENT.TakeFieldEvent()
#ENDAT
#!
#!
#AT(%QEIPTakeFocusLossCodeSection,%ActiveTemplateInstance)
#PRIORITY(5000),DESCRIPTION('Parent Call')
PARENT.TakeFocusLoss()
#ENDAT
#!
#!
#AT(%QEIPTakeNewSelectionDataSection,%ActiveTemplateInstance)
ReturnValue BYTE,AUTO
#ENDAT
#!
#!
#AT(%QEIPTakeNewSelectionCodeSection,%ActiveTemplateInstance)
#PRIORITY(4000),DESCRIPTION('IF Clause')
IF FIELD() = %ListControl
  IF CHOICE(%ListControl) = SELF.CurrentChoice
#PRIORITY(5000),DESCRIPTION('Parent Call')
    ReturnValue = PARENT.TakeNewSelection()
#PRIORITY(6000),DESCRIPTION('ELSE Clause')
  ELSE                                  ! Focus change to different record
    SELF.TakeFocusLoss
    IF SELF.Again
      SELECT(%ListControl,SELF.CurrentChoice)
      ReturnValue = Level:Benign
    ELSE
      SELF.CurrentChoice = CHOICE(%ListControl)
      SELF.Response = RequestCancelled           ! Avoid cursor following 'new' record
      ReturnValue = Level:Fatal
    END
  END
END
#ENDAT
#!                                                                                              r
#!
#AT(%LocalProcedures)
#FIX(%Control,%ListControl)
%InstancePrefix:EM.AddControl            PROCEDURE(<EditClass E>,UNSIGNED Column,BYTE AutoFree)
#SET(%QEIPNewMethodName,'AddControl')
#SET(%QEIPNewMethodPrototype,'(<<EditClass EC>,UNSIGNED Column,BYTE AutoFree = 0)')
#EMBED(%QEIPAddControlDataSection,'AddControl Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPAddControlCodeSection,'AddControl Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE','COLOR:Black'))
  RETURN

%InstancePrefix:EM.ClearColumn           PROCEDURE
#SET(%QEIPNewMethodName,'ClearColumn')
#SET(%QEIPNewMethodPrototype,'(),DERIVED')
#EMBED(%QEIPClearColumnDataSection,'ClearColumn Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPClearColumnCodeSection,'ClearColumn Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN

%InstancePrefix:EM.Init                  PROCEDURE
#SET(%QEIPNewMethodName,'Init')
#SET(%QEIPNewMethodPrototype,'(),BYTE,DERIVED,PROC')
#EMBED(%QEIPInitDataSection,'Init Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPInitCodeSection,'Init Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN(RetVal)

%InstancePrefix:EM.InitControls          PROCEDURE
#SET(%QEIPNewMethodName,'InitControls')
#SET(%QEIPNewMethodPrototype,'(),DERIVED')
#EMBED(%QEIPInitControlsDataSection,'InitControls Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPInitControlsCodeSection,'InitControls Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN

%InstancePrefix:EM.Kill                  PROCEDURE
#SET(%QEIPNewMethodName,'Kill')
#SET(%QEIPNewMethodPrototype,'(),BYTE,DERIVED,PROC')
#EMBED(%QEIPKillDataSection,'Kill Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPKillCodeSection,'Kill Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN(ReturnValue)

%InstancePrefix:EM.Next                  PROCEDURE
#SET(%QEIPNewMethodName,'Next')
#SET(%QEIPNewMethodPrototype,'(),PROTECTED')
#EMBED(%QEIPNextDataSection,'Next Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPNextCodeSection,'Next Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorProtectedMethod))
  RETURN

%InstancePrefix:EM.GetEdit               PROCEDURE
#SET(%QEIPNewMethodName,'GetEdit')
#SET(%QEIPNewMethodPrototype,'(),BYTE,DERIVED,PROTECTED')
#EMBED(%QEIPGetEditDataSection,'GetEdit Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPGetEditCodeSection,'GetEdit Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod+%ColorProtectedMethod))
  RETURN(ReturnValue)

%InstancePrefix:EM.ResetColumn           PROCEDURE
#SET(%QEIPNewMethodName,'ResetColumn')
#SET(%QEIPNewMethodPrototype,'(),DERIVED,PROTECTED')
#EMBED(%QEIPResetColumnDataSection,'ResetColumn Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPResetColumnCodeSection,'ResetColumn Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod+%ColorProtectedMethod))
  RETURN

%InstancePrefix:EM.Run                   PROCEDURE(BYTE Req)
#SET(%QEIPNewMethodName,'Run')
#SET(%QEIPNewMethodPrototype,'(BYTE Req),BYTE')
#EMBED(%QEIPRunDataSection,'Run Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPRunCodeSection,'Run Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE','COLOR:BLACK'))
  RETURN(ReturnValue)

%InstancePrefix:EM.TakeAction            PROCEDURE(UNSIGNED Action)
#SET(%QEIPNewMethodName,'TakeAction')
#SET(%QEIPNewMethodPrototype,'(UNSIGNED Action),DERIVED')
#EMBED(%QEIPTakeActionDataSection,'TakeAction Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPTakeActionCodeSection,'TakeAction Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN
#EMBED(%QEIPTakeActionRoutineSection,'TakeAction Routine Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('ROUTINE',%ColorVirtualMethod))

%InstancePrefix:EM.TakeCompleted         PROCEDURE(BYTE Force)
#SET(%QEIPNewMethodName,'TakeCompleted')
#SET(%QEIPNewMethodPrototype,'(BYTE Force),DERIVED')
#EMBED(%QEIPTakeCompletedDataSection,'TakeCompleted Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPTakeCompletedCodeSection,'TakeCompleted Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN

%InstancePrefix:EM.TakeEvent             PROCEDURE
#SET(%QEIPNewMethodName,'TakeEvent')
#SET(%QEIPNewMethodPrototype,'(),BYTE,DERIVED,PROC')
#EMBED(%QEIPTakeEventDataSection,'TakeEvent Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPTakeEventCodeSection,'TakeEvent Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN(ReturnValue)

%InstancePrefix:EM.TakeFieldEvent        PROCEDURE
#SET(%QEIPNewMethodName,'TakeFieldEvent')
#SET(%QEIPNewMethodPrototype,'(),BYTE,DERIVED,PROC')
#EMBED(%QEIPTakeFieldEventDataSection,'TakeFieldEvent Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPTakeFieldEventCodeSection,'TakeFieldEvent Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN(ReturnValue)

%InstancePrefix:EM.TakeFocusLoss         PROCEDURE
#SET(%QEIPNewMethodName,'TakeFocusLoss')
#SET(%QEIPNewMethodPrototype,'(),DERIVED')
#EMBED(%QEIPTakeFocusLossDataSection,'TakeFocusLoss Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPTakeFocusLossCodeSection,'TakeFocusLoss Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN

%InstancePrefix:EM.TakeNewSelection      PROCEDURE
#SET(%QEIPNewMethodName,'TakeNewSelection')
#SET(%QEIPNewMethodPrototype,'(),BYTE,DERIVED,PROC')
#EMBED(%QEIPTakeNewSelectionDataSection,'TakeNewSelection Data Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('DATA',%ColorDataSection))
  CODE
  #EMBED(%QEIPTakeNewSelectionCodeSection,'TakeNewSelection Code Section'),%ActiveTemplateInstance,TREE(%GetEIPMethodTreeDesc('CODE',%ColorVirtualMethod))
  RETURN(ReturnValue)
#ENDAT
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_AutoInc,'ODBC SQL AutoIncrement Support'),APPLICATION
#! ----------------------------------------------------------------
#AT (%CustomGlobalDeclarations)
  #FOR(%File),WHERE(%FileDriver = 'ODBC')
    #ADD(%CustomGlobalData,%File & ':AutoIncDone')
    #SET(%CustomGlobalDataBeforeFiles,1)
    #IF(%GlobalExternal)
      #SET(%CustomGlobalDataDeclaration,'BYTE,THREAD,EXTERNAL,DLL(dll_mode)')
    #ELSE
      #SET(%CustomGlobalDataDeclaration,'BYTE(0),THREAD')
    #ENDIF
  #ENDFOR
#ENDAT
#!
#!
#AT(%DLLExportList)
  #IF(NOT %GlobalExternal)
;Start OF Devuna Pervasive AutoInc Exports
    #FOR(%CustomGlobalData),WHERE(INSTRING(':AutoIncDone',%CustomGlobalData,1))
  #INSERT(%AddExpDataItem(ABC),%CustomGlobalData)
    #ENDFOR
;End OF Devuna Pervasive AutoInc Exports
  #ENDIF
#ENDAT
#!
#!
#AT(%FileManagerDataSection,,'CancelAutoInc','(<<RelationManager RM>),BYTE'),WHERE(%FileDriver = 'ODBC'),PRIORITY(4500),DESCRIPTION('ODBC Autoinc')
RetVal BYTE(Level:Benign)
#ENDAT
#!
#!
#AT(%FileManagerCodeSection,,'CancelAutoInc','(<<RelationManager RM>),BYTE'),WHERE(%FileDriver = 'ODBC'),PRIORITY(4500),DESCRIPTION('ODBC Autoinc')
OMIT('End_Omit')
IF ~SELF.UseFile()
   IF RM &= NULL
      DELETE(SELF.File)
   ELSE
      RetVal = RM.Delete(0)
   END
   SELF.SetAutoIncDone(FALSE)
END
RETURN RetVal
End_Omit
#ENDAT
#!
#!
#AT(%FileManagerDataSection,,'PrimeAutoInc','(),BYTE'),WHERE(%FileDriver = 'ODBC'),PRIORITY(4500),DESCRIPTION('ODBC Autoinc')
SaveRec  USHORT,AUTO
AutoVal  ANY
#ENDAT
#!
#!
#AT(%FileManagerCodeSection,,'PrimeAutoInc','(),BYTE'),WHERE(%FileDriver = 'ODBC'),PRIORITY(4500),DESCRIPTION('OCBC Autoinc')
IF SELF.UseFile()
   RETURN Level:Fatal
ELSIF SELF.GetAutoIncDone()
   PUT(SELF.File)
!   message('my put')
   SELF.SetAutoIncDone(FALSE)
   RETURN Level:Benign
ELSE
#!   SaveRec = SELF.SaveBuffer()
   NOMEMO(SELF.File)
  #FIX(%Key,%FilePrimaryKey)
  #FIX(%Field,%KeyAuto)
   OPEN(DTsql)
   DTsql{PROP:SQL} = 'SELECT MAX(%FieldID) FROM %File'
   NEXT(DTsql)
   AutoVal = DTsql.lsqlID + 1
#!   SELF.RestoreBuffer(SaveRec)
   %Field = AutoVal
   ADD(SELF.File)
   IF ERRORCODE()
      RETURN Level:Notify
   ELSE
!      message('my add')
      WATCH(SELF.File)
      SELF.TryReget(SELF.Position())
      SELF.SetAutoIncDone(TRUE)
      RETURN Level:Benign
   END
END
#ENDAT
#!
#!
#AT(%FileManagerDataSection,,'TryPrimeAutoInc','(),BYTE'),WHERE(%FileDriver = 'ODBC'),PRIORITY(4500),DESCRIPTION('ODBC Autoinc')
SaveRec  USHORT,AUTO
AutoVal  ANY
#ENDAT
#!
#!
#AT(%FileManagerCodeSection,,'TryPrimeAutoInc','(),BYTE'),WHERE(%FileDriver = 'ODBC'),PRIORITY(4500),DESCRIPTION('ODBC Autoinc')
OMIT('End_Omit')
IF SELF.UseFile()
   RETURN Level:Fatal
ELSIF SELF.GetAutoIncDone()
   PUT(SELF.File)
   SELF.SetAutoIncDone(FALSE)
   RETURN Level:Benign
ELSE
   SaveRec = SELF.SaveBuffer()
   NOMEMO(SELF.File)
  #FIX(%Key,%FilePrimaryKey)
  #FIX(%Field,%KeyAuto)
   OPEN(DTsql)
   DTsql{PROP:SQL} = 'SELECT MAX(%FieldID) FROM %File'
   NEXT(DTsql)
   AutoVal = DTsql.lsqlID + 1
   SELF.RestoreBuffer(SaveRec)
   %Field = AutoVal
   ADD(SELF.File)
   IF ERRORCODE()
      RETURN Level:Notify
   ELSE
      SELF.SetAutoIncDone(TRUE)
      RETURN Level:Benign
   END
END
End_Omit
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SpecialEffects,'Add Special Effects'),APPLICATION(KCR_SetSpecialEffects(KCR))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SpecialEffects (Devuna)','Add Special Effects Template')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_SetSpecialEffects')
  #DISPLAY ('template to every window procedure.')
  #DISPLAY ('')
  #PROMPT('Use Background Color',CHECK),%UseBackgroundColor,DEFAULT(1),AT(10)
  #ENABLE(%UseBackgroundColor)
    #PROMPT('Background Color:',COLOR),%BackgroundColor
    #PROMPT('Panel Color:',COLOR),%PanelColor
    #PROMPT('Use Transparent Buttons',CHECK),%UseTransparentButtons,DEFAULT(1),AT(10)
  #ENDENABLE
  #PROMPT('Use Background Window',CHECK),%UseBackgroundWindow,DEFAULT(1),AT(10)
  #ENABLE(%UseBackgroundWindow)
    #PROMPT('Background Window Color:',COLOR),%BackgroundWindowColor
  #ENDENABLE
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%BeforeFileDeclarations)
#IF(%UseBackgroundWindow)
hWndBackdrop       UNSIGNED
BackDrop WINDOW,AT(,,398,278),COLOR(%BackgroundWindowColor),TIMER(100),PALETTE(256),NOFRAME
     END
#ENDIF
#ENDAT
#!
#!
#AT(%ProgramSetup),PRIORITY(4000)
#IF(%UseBackgroundWindow)
  #IF(%ProgramExtension = 'EXE')
    #IF(%WindowFrameDragging)
SystemParametersInfo (38, 0, lCurrentFDSetting, 0)              #<! Configure frame dragging
IF lCurrentFDSetting = 1
  SystemParametersInfo (37, 0, lAdjFDSetting, 3)
END
    #ENDIF
  #ENDIF
IF kcr_GetSystemMetrics(SM_CXSCREEN) > 800 OR kcr_GetSystemMetrics(SM_CYSCREEN) > 600
   OPEN(BackDrop)
   hWndBackdrop = backdrop{prop:handle}
   kcr_MoveWindow(backdrop{prop:handle},0,0,kcr_GetSystemMetrics(SM_CXSCREEN),kcr_GetSystemMetrics(SM_CYSCREEN),TRUE)
   ACCEPT
     CASE EVENT()
       OF EVENT:TIMER
        BackDrop{PROP:TIMER} = 0
        %FirstProcedure
        INIMgr.Update
        BREAK
     END
   END
   CLOSE(BackDrop)
ELSE
   %FirstProcedure
   INIMgr.Update
END
OMIT('end_omit')
#ENDIF
#ENDAT
#!
#!
#AT(%ProgramEnd)
#IF(%UseBackgroundWindow)
!end_omit
#ENDIF
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetSpecialEffects,'Set Special Effects'),PROCEDURE,REQ(KCR_SpecialEffects)
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SpecialEffects (Devuna)','Set Special Effects')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('The check box can be used to override the global')
  #DISPLAY ('special effects template.')
  #DISPLAY ('')
  #PROMPT('Disable Special Effects',CHECK),%DisableSpecialEffects,DEFAULT(0),AT(10)
  #ENABLE(%DisableSpecialEffects=0)
    #PROMPT('Use Background Color',CHECK),%LocUseBackgroundColor,DEFAULT(%UseBackgroundColor),AT(10)
    #ENABLE(%LocUseBackgroundColor)
      #PROMPT('Background Color:',COLOR),%LocBackgroundColor,DEFAULT(%BackgroundColor)
      #PROMPT('Panel Color:',COLOR),%LocPanelColor,DEFAULT(%PanelColor)
      #PROMPT('Use Transparent Buttons',CHECK),%LocUseTransparentButtons,DEFAULT(%UseTransparentButtons),AT(10)
    #ENDENABLE
  #ENDENABLE
  #DISPLAY ('')
#ENDBOXED
#ATSTART
  #DECLARE(%ThisColor)
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9050),DESCRIPTION('Special Effects Code')
#IF(~%DisableSpecialEffects)
  #IF(%LocUseBackgroundColor)
%Window{PROP:Background} = %LocBackgroundColor
    #!
    #FOR(%Control)
      #CASE(%ControlType)
      #OF('PROMPT')
      #OROF('STRING')
      #OROF('OPTION')
      #OROF('RADIO')
      #OROF('CHECK')
      #OROF('GROUP')
        #IF(%Control)
%Control{PROP:TRN} = TRUE
        #ENDIF
      #!
      #!
      #OF('BUTTON')
        #IF(%LocUseTransparentButtons)
%Control{PROP:TRN} = TRUE
        #ENDIF
      #!
      #!
      #OF('PANEL')
        #SET(%ThisColor,EXTRACT(%ControlStatement,'FILL',1))
        #IF(%ThisColor)
        #ELSE
%Control{PROP:Fill} = %LocPanelColor
        #ENDIF
      #!
      #!
      #OF('SHEET')
        #SET(%ThisColor,EXTRACT(%ControlStatement,'COLOR',1))
        #IF(%ThisColor)
        #ELSE
%Control{PROP:Color} = %LocPanelColor
        #ENDIF
      #!
      #!
      #OF('ENTRY')
      #OROF('LIST')
      #OROF('SPIN')
      #OROF('TEXT')
        #SET(%ThisColor,EXTRACT(%ControlStatement,'COLOR',1))
        #IF(%ThisColor)
        #ELSE
%Control{PROP:Background} = COLOR:White
        #ENDIF
      #ENDCASE
    #ENDFOR
    #!
  #ENDIF
#ENDIF
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_GraphProperties,'Set Graph Properties'),PROCEDURE,REQ(OLEControl(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_GraphProperties (Devuna)','Set Graph Properties')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('')
  #PROMPT  ('&Graph Equate Value:',@S64),%GraphEquate,REQ,DEFAULT('GRAPH:'&%Procedure)
  #PROMPT  ('&Property Change Procedure:',PROCEDURE),%PropertyChangeProc,REQ,DEFAULT('SaveGraphProperties')
  #PROMPT  ('&Show Color Message',CHECK),%ShowColorMessage,DEFAULT(0),AT(10)
  #PROMPT  ('&Allow Edit Flag:',@S64),%AllowGraphPropertyEditFlag
  #DISPLAY ('')
#ENDBOXED
#ATSTART
  #DECLARE(%ThisControl)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateParentInstance)
    #SET(%ThisControl,%Control)
  #ENDFOR
  #DECLARE(%ThisEvent)
  #DECLARE(%EventGraphProperties)
  #SET(%EventGraphProperties,'EVENT:SDK_GraphProperties:' & %ActiveTemplateInstance)
  #DECLARE(%EventGraphColors)
  #SET(%EventGraphColors,'EVENT:SDK_GraphColors:' & %ActiveTemplateInstance)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9500),DESCRIPTION('Set Graph Properties Code')
#IF(%AllowGraphPropertyEditFlag)
%ThisControl{'SDKMouse'} = %AllowGraphPropertyEditFlag       !Enable SDKPress Events
#ELSE
%ThisControl{'SDKMouse'} = 1       !Enable SDKPress Events
#ENDIF
#ENDAT
#!
#!
#AT(%WindowManagerMethodDataSection,'TakeEvent','(),BYTE'),PRIORITY(5000),DESCRIPTION('Set Graph Properties Data')
  #SET(%ThisEvent,600 + (%ActiveTemplateInstance * 10))
%[36]EventGraphProperties EQUATE(%ThisEvent)
  #SET(%ThisEvent,%ThisEvent+1)
%[36]EventGraphColors EQUATE(%ThisEvent)
SDK_Msg:%ActiveTemplateInstance     CSTRING(256)
SDK_Set:%ActiveTemplateInstance     BYTE
SDK_Sets:%ActiveTemplateInstance    BYTE
SDK_Points:%ActiveTemplateInstance  BYTE
SDK_Colors:%ActiveTemplateInstance  BYTE
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(6300),DESCRIPTION('Set Graph Properties Code')
  CASE EVENT()
    OF %EventGraphProperties
       %ThisControl{PROP:DoVerb} = -7

    OF %EventGraphColors
       %PropertyChangeProc(%GraphEquate,%ThisControl)
  #IF(%ShowColorMessage)
       SDK_Msg:%ActiveTemplateInstance = ''
       SDK_Sets:%ActiveTemplateInstance = %ThisControl{'NumSets'}
       SDK_Points:%ActiveTemplateInstance = %ThisControl{'NumPoints'}
       IF SDK_Sets:%ActiveTemplateInstance = 1
          SDK_Colors:%ActiveTemplateInstance = SDK_Points:%ActiveTemplateInstance
       ELSE
          SDK_Colors:%ActiveTemplateInstance = SDK_Sets:%ActiveTemplateInstance
       END
       LOOP SDK_Set:%ActiveTemplateInstance = 1 TO SDK_Colors:%ActiveTemplateInstance
         %ThisControl{'ThisPoint'} = SDK_Set:%ActiveTemplateInstance
         SDK_Msg:%ActiveTemplateInstance = SDK_Msg:%ActiveTemplateInstance & 'Color ' & SDK_Set:%ActiveTemplateInstance & ' = ' & %ThisControl{'ColorData'}
         IF SDK_Set:%ActiveTemplateInstance < SDK_Colors:%ActiveTemplateInstance
            SDK_Msg:%ActiveTemplateInstance = SDK_Msg:%ActiveTemplateInstance & '<13,10>'
         END
       END
       MESSAGE(SDK_Msg:%ActiveTemplateInstance,'Graph Colors',ICON:ASTERISK)
  #ENDIF
  END
#ENDAT
#!
#!
#AT(%EventHandlerDeclaration,%ActiveTemplateParentInstance),PRIORITY(5000),DESCRIPTION('Set Graph Properties Data')
  #SET(%ThisEvent,600 + (%ActiveTemplateInstance * 10))
%[36]EventGraphProperties EQUATE(%ThisEvent)
  #SET(%ThisEvent,%ThisEvent+1)
%[36]EventGraphColors EQUATE(%ThisEvent)
bPending           BYTE(FALSE),STATIC
SDK_PressStatus    UNSIGNED
#ENDAT
#!
#!
#AT(%EventHandlerCode,%ActiveTemplateParentInstance),PRIORITY(5000),DESCRIPTION('Set Graph Properties Code')
  CASE OLEEvent
    OF 4    !SDKPress
       SDK_PressStatus = OCXGETPARAM(ref,1)
       CASE SDK_PressStatus
       OF 0                 !Released
          IF bPending = TRUE
             bPending = FALSE
             POST(%EventGraphProperties)
          END
       OF 4                 !Right Mouse
          bPending = TRUE
       END
    OF 7    !SDK Property Changed
       POST(%EventGraphColors)
  END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_LocalProcedures,'Add Local Procedures to MAP'),PROCEDURE
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_LocalProcedures (Devuna)','Add Local Procedures to MAP')
#ENDPREPARE
#DECLARE(%CustomModuleMapProcedure,%CustomModuleMapModule),MULTI
#DECLARE(%CustomModuleMapProcedurePrototype,%CustomModuleMapProcedure)
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('')
  #BUTTON('Local Procedures'),MULTI(%LocalProcedures,%LocalMapProcedure & %LocalMapProcedurePrototype),AT(,,90,)
    #PROMPT('Procedure Name:',@S255),%LocalMapProcedure,REQ
    #PROMPT('Procedure Prototype:',@S255),%LocalMapProcedurePrototype
  #ENDBUTTON
  #DISPLAY ('')
#ENDBOXED
#AT(%CustomModuleDeclarations)
  #!ADD(%CustomModuleMapModule,'CURRENT MODULE')
  #ADD(%CustomModuleMapModule,'''' & UPPER(%Module) & '''')
  #FOR(%LocalProcedures)
    #ADD(%CustomModuleMapProcedure,%LocalMapProcedure)
    #SET(%CustomModuleMapProcedurePrototype,'PROCEDURE' & %LocalMapProcedurePrototype)
  #ENDFOR
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_CalendarClass,'Add Calendar Class'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_CalendarClass (Devuna)','Add Calendar Class')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.'),AT(10)
  #DISPLAY ('This template adds the monthcalendar class'),AT(10)
  #DISPLAY ('to the application.'),AT(10)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%CustomGlobalDeclarations)
  #IF(%Target32)
    #!PROJECT('Library(COMCTL32.LIB),CopyToOutputDirectory=Never')
  #ELSE
    #ERROR('Error: MonthView requires 32-bit application')
  #ENDIF
#ENDAT
#!
#!
#AT(%BeforeGlobalIncludes),PRIORITY(4000)
   INCLUDE('MONTHCALENDAR.INC'),ONCE
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_Calendar,'Add Calendar to Procedure'),PROCEDURE,REQ(KCR_SubClassClientWindow),MULTI
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_Calendar (Devuna)','Add Calendar to Procedure')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('')
  #DISPLAY ('This template adds the monthcalendar'),AT(10)
  #DISPLAY ('to the window.  Place and size a rectangle'),AT(10)
  #DISPLAY ('on the window to specify the position of'),AT(10)
  #DISPLAY ('the calendar.'),AT(10)
  #DISPLAY ('')
  #PROMPT('Calendar:',CONTROL),%Calendar,req
  #PROMPT('Date Field:',COMBO(%LocalData)),%DateField,req
  #PROMPT('Change Notification &Event:',@S64),%ChangeNotificationEvent,REQ,DEFAULT('EVENT:USER')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
  #DECLARE(%InstancePrefix)
  #SET(%InstancePrefix,'Calendar:' & %ActiveTemplateInstance)
#ENDAT
#!
#!
#AT(%ModuleDataSection)
  #SET(%ValueConstruct,'Calendar:' & %ActiveTemplateInstance & ':lDate')
%[20]ValueConstruct LONG
  #SET(%ValueConstruct,'Calendar:' & %ActiveTemplateInstance)
%[20]ValueConstruct &MonthCalendar
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8100),DESCRIPTION('Calendar Control: Init')
%InstancePrefix:lDate = %DateField
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(900),DESCRIPTION('Calendar Control: Kill')
%InstancePrefix.Kill
DISPOSE(%InstancePrefix)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(6300),DESCRIPTION('Calendar Control: Date Change')
  IF EVENT() = %ChangeNotificationEvent
     %DateField = %InstancePrefix:lDate
  END
#ENDAT
#!
#!
#AT(%WindowEventHandling,'OpenWindow'),PRIORITY(5000),DESCRIPTION('Calendar Control: OpenWindow')
%InstancePrefix &= NEW(MonthCalendar)
%InstancePrefix.Init()
0{PROP:Pixels}=1
%InstancePrefix.CreateCalendar(%Calendar{PROP:Xpos},%Calendar{PROP:Ypos}, |
                               %Calendar{PROP:Width},%Calendar{PROP:Height})
0{PROP:Pixels}=0
%InstancePrefix.SetDate(%InstancePrefix:lDate)
#ENDAT
#!
#!
#AT(%SubClassClientWindowNotifySection, %ActiveTemplateParentInstance),PRIORITY(5000),DESCRIPTION('Calendar Control Code')
IF ~%InstancePrefix &= NULL
   IF hdrX.hwndFrom = %InstancePrefix.GetHwnd() OR hdrX.nm_code = DTN_DATETIMECHANGE
       %InstancePrefix:lDate = %InstancePrefix.GetCalendarDate()
       POST(%ChangeNotificationEvent)
   END
END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_DateTimePickerClass,'Add DateTimePicker Class'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_DateTimePickerClass (Devuna)','Add DateTimePicker Class')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.'),AT(10)
  #DISPLAY ('This template adds the DateTimePicker class'),AT(10)
  #DISPLAY ('to the application.'),AT(10)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%CustomGlobalDeclarations)
  #IF(%Target32)
    #!PROJECT('Library(COMCTL32.LIB),CopyToOutputDirectory=Never')
  #ELSE
    #ERROR('Error: DateTimePicker requires 32-bit application')
  #ENDIF
#ENDAT
#!
#!
#AT(%BeforeGlobalIncludes),PRIORITY(4000)
 INCLUDE('DATETIMEPICK.INC'),ONCE
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_DateTime,'Add DateTime Picker to Procedure'),PROCEDURE,REQ(KCR_SubClassClientWindow),MULTI
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_DateTime (Devuna)','Add DateTime Picker to Procedure')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('')
  #DISPLAY ('This template adds the DateTimePicker'),AT(10)
  #DISPLAY ('to the window.  Place and size a rectangle'),AT(10)
  #DISPLAY ('on the window to specify the position of'),AT(10)
  #DISPLAY ('the control.'),AT(10)
  #DISPLAY ('')
  #PROMPT('&Control Type',OPTION),%ControlTypeOption,DEFAULT('Date Picker'),AT(10,,180)
  #PROMPT('Date Picker',RADIO),AT(15)
  #PROMPT('Time Picker',RADIO),AT(15)
  #DISPLAY ('')
  #PROMPT('&Rectangle:',CONTROL),%Rectangle,REQ
  #PROMPT('&Value Field:',COMBO(%LocalData)),%ValueField,REQ
  #PROMPT('Change Notification &Event:',@S64),%ChangeNotificationEvent,REQ,DEFAULT('EVENT:USER')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
  #DECLARE(%InstancePrefix)
  #SET(%InstancePrefix,'DateTime:' & %ActiveTemplateInstance)
#ENDAT
#!
#!
#AT(%ModuleDataSection)
  #SET(%ValueConstruct,'DateTime:' & %ActiveTemplateInstance & ':lValue')
%[20]ValueConstruct LONG
  #SET(%ValueConstruct,'DateTime:' & %ActiveTemplateInstance)
%[20]ValueConstruct &DTPicker
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8100),DESCRIPTION('DateTimePicker Control: Init')
%InstancePrefix:lValue = %ValueField
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(900),DESCRIPTION('DateTimePicker Control: Kill')
%InstancePrefix.Kill
DISPOSE(%InstancePrefix)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(6300),DESCRIPTION('DateTimePicker Control: Date Change')
  IF EVENT() = %ChangeNotificationEvent
     %ValueField = %InstancePrefix:lValue
  END
#ENDAT
#!
#!
#AT(%WindowEventHandling,'OpenWindow'),PRIORITY(5000),DESCRIPTION('DateTimePicker Control: OpenWindow')
%InstancePrefix &= NEW(DTPicker)
%InstancePrefix.Init()
0{PROP:Pixels}=1
  #IF(%ControlTypeOption='Date Picker')
%InstancePrefix.CreateDatePicker(%Rectangle{PROP:Xpos},%Rectangle{PROP:Ypos}, |
                                 %Rectangle{PROP:Width},%Rectangle{PROP:Height})
  #ELSE
%InstancePrefix.CreateTimePicker(%Rectangle{PROP:Xpos},%Rectangle{PROP:Ypos}, |
                                 %Rectangle{PROP:Width},%Rectangle{PROP:Height})
  #ENDIF
0{PROP:Pixels}=0
%InstancePrefix.SetSelection(%InstancePrefix:lValue)
#ENDAT
#!
#!
#AT(%SubClassClientWindowNotifySection, %ActiveTemplateParentInstance),PRIORITY(5000),DESCRIPTION('DateTimePicker Control Code')
IF hdrX.hwndFrom = %InstancePrefix.GetHwnd() OR hdrX.nm_code = DTN_DATETIMECHANGE
   %InstancePrefix.GetSelection(%InstancePrefix:lValue)
   POST(%ChangeNotificationEvent)
END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_GlobalToolTips,'Devuna Global Tooltip Extension'),Application(KCR_ToolTips(KCR))
#! ----------------------------------------------------------------
 #DISPLAY('This just adds ToolTip to all procedures')
 #DISPLAY('This is not neccessary')
 #DISPLAY('You may select each and every one procedure too.')
#!
#!
#AT(%AfterGlobalIncludes),PRIORITY(4000)
   INCLUDE('COOLTIPS.INC'),ONCE
#ENDAT
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ToolTips,'ToolTips Extension'),PROCEDURE
#!--------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ToolTips (Devuna)','ToolTips Extension')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This template adds custom tooltips to the Window'),AT(10)
  #DISPLAY ('')
  #PROMPT('Don''t apply at all',CHECK),%DontApply,At(10)
  #PROMPT('Use Balloon Tips',CHECK),%UseBalloonTips,DEFAULT(%TRUE),AT(10)
  #PROMPT('Replace regular tip',CHECK),%ApplyAsRegularTip,DEFAULT(%FALSE),AT(10)
  #PROMPT('Set Delay Time',CHECK),%SetDelayTime,DEFAULT(%FALSE),AT(10)
  #ENABLE(%SetDelayTime)
    #PROMPT('Autopop Delay (ms)',@N6),%AutopopDelay,DEFAULT(5000)
    #PROMPT('Initial Delay (ms)',@N6),%InitialDelay,DEFAULT(2000)
    #PROMPT('Reshow  Delay (ms)',@N6),%ReshowDelay,DEFAULT(100)
  #ENDENABLE
  #DISPLAY ('')
  #ENABLE(NOT %ApplyAsRegularTip)
    #BUTTON('Selected Controls...'),MULTI(%ToolTipControls,%ToolTipControl & ' - ' & %ToolTipTextOption),AT(,,178,)
      #PROMPT('Select a Control:',CONTROL),%ToolTipControl,REQ,AT(65,,125)
      #PROMPT('Multi-Line Tip',CHECK),%MultiLineTip,DEFAULT(%TRUE),AT(10)
      #PROMPT('ToolTip Text',OPTION),%ToolTipTextOption,DEFAULT('Use Tip Text'),AT(10,,180)
      #PROMPT('Use Tip Text',RADIO),AT(15)
      #PROMPT('Use Local Data Variable',RADIO),AT(15)
      #PROMPT('Use Global Data Variable',RADIO),AT(15)
      #PROMPT('Specify Text',RADIO),AT(15)
      #BOXED,AT(,80),WHERE(%ToolTipTextOption = 'Use Local Data Variable')
        #PROMPT('Select Local Variable:',FROM(%LocalData)),%TTLocalVariable,REQ,AT(80,,110)
      #ENDBOXED
      #BOXED,AT(,80),WHERE(%ToolTipTextOption = 'Use Global Data Variable')
        #PROMPT('Select Global Variable:',FROM(%GlobalData)),%TTGlobalVariable,REQ,AT(80,,110)
      #ENDBOXED
      #BOXED,AT(,80),WHERE(%ToolTipTextOption = 'Specify Text')
        #PROMPT('Enter Tip Text:',@S64),%TTText,AT(65,,190)
      #ENDBOXED
      #BOXED,HIDE
        #PROMPT('Can Recieve Input Focus',CHECK),%ControlGetsFocus,DEFAULT(%TRUE)
        #PROMPT('ToolTipFeq',CONTROL),%ToolTipFeq
      #ENDBOXED
    #ENDBUTTON
  #ENDENABLE
  #DISPLAY ('')
  #PROMPT('ToolTip Text Colour',COLOR),%ToolTipTextColour,DEFAULT('COLOR:BLACK')
  #PROMPT('Set Background Colour',CHECK),%SetBackgroundColour,DEFAULT(%FALSE),AT(10)
  #ENABLE(%SetBackgroundColour)
    #PROMPT('ToolTip Background Colour',COLOR),%ToolTipBkColour,DEFAULT('12648447')
  #ENDENABLE
#ENDBOXED
#!
#!
#ATSTART
  #DECLARE(%Indent)
  #SET(%Indent,0)
  #DECLARE(%Self)
  #SET(%Self,%ActiveTemplateInstance)
  #FOR(%ActiveTemplate)
     #FOR(%ActiveTemplateInstance)
       #IF(%ActiveTemplateParentInstance = %Self)
         #SET(%Indent,3)
         #BREAK
       #ENDIF
     #ENDFOR
  #ENDFOR
  #DECLARE(%LastField)
  #SET(%LastField,0)
  #FOR(%Control)
     #SET(%LastField,%LastField+1)
  #ENDFOR
  #FOR(%ToolTipControls)
    #FIX(%Control,%ToolTipControl)
    #CASE(%ControlType)
    #OF('BOX')
    #OROF('ELLIPSE')
    #OROF('IMAGE')
    #OROF('LINE')
    #OROF('PANEL')
    #OROF('PROMPT')
    #OROF('PROGRESS')
    #OROF('STRING')
      #SET(%ControlGetsFocus,%FALSE)
    #ELSE
      #SET(%ToolTipFeq,%Control)
    #ENDCASE
  #ENDFOR
  #!
  #!Support for Charles Edmonds TipLink Template
  #DECLARE(%TipLink)
  #SET(%TipLink,0)
  #FOR(%ApplicationTemplate),WHERE(%ApplicationTemplate='TipLink(TipLink)')
    #SET(%TipLink,1)
  #ENDFOR
#ENDAT
#!
#!
#AT(%DataSection),WHERE(NOT %DontApply)
tt          ToolTipClass
hwndTT      HWND
#ENDAT
#!
#!
#AT(%CustomGlobalDeclarations),WHERE(NOT %DontApply)
  #IF(%Target32)
    #!PROJECT('Library(COMCTL32.LIB),CopyToOutputDirectory=Never')
    #PROJECT('TTUTILLIB.C')
  #ELSE
    #ERROR('Error: ToolTipClass requires 32-bit application')
  #ENDIF
#ENDAT
#!
#!
#AT(%AfterGlobalIncludes),PRIORITY(4000),WHERE(NOT %DontApply)
  #FOR(%ActiveTemplateInstance),WHERE(%ActiveTemplateParentInstance = 0)
   INCLUDE('COOLTIPS.INC'),ONCE
  #ENDFOR
#ENDAT
#!
#!
#AT(%WindowManagerMethodDataSection,'Open','()'),PRIORITY(5000),DESCRIPTION('ToolTip Initialization'),WHERE(NOT %DontApply)
  #IF (%ApplyAsRegularTip)
Fld     LONG,AUTO
  #ENDIF
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Open','()'),PRIORITY(5100),DESCRIPTION('ToolTip Initialization'),WHERE(NOT %DontApply)
#!AT(%AfterWindowOpening),WHERE(NOT %DontApply)
  #INDENT(+%Indent)
  #FOR(%ToolTipControls)
    #IF(NOT %ControlGetsFocus)      #!Control cannot recieve focus so create a region
      #SET(%LastField,%LastField+1)
      #SET(%ToolTipFeq,%LastField)
CREATE(%ToolTipFeq,CREATE:Region)  #<! Create a region around non-focus control
      #FIX(%Control,%ToolTipControl)
%ToolTipFeq{PROP:XPOS} = %Control{PROP:XPOS}
%ToolTipFeq{PROP:YPOS} = %Control{PROP:YPOS}
%ToolTipFeq{PROP:WIDTH} = CHOOSE(%Control{PROP:WIDTH}=0,1,%Control{PROP:WIDTH})
%ToolTipFeq{PROP:HEIGHT} = CHOOSE(%Control{PROP:HEIGHT}=0,1,%Control{PROP:HEIGHT})
%ToolTipFeq{PROP:HIDE} = FALSE
    #ENDIF
  #ENDFOR
hwndTT = tt.init(%window{PROP:HANDLE},%UseBalloonTips)  #<!ToolTipClass Initialization
IF hwndTT
  #IF(%SetDelayTime)
  tt.SetDelayTime(TTDT_AUTOPOP,%AutopopDelay)
  tt.SetDelayTime(TTDT_INITIAL,%InitialDelay)
  tt.SetDelayTime(TTDT_RESHOW,%ReshowDelay)
  #ENDIF
  #IF (%ApplyAsRegularTip)
  !This code is placed to instantly enable tooltips on all controls
  Fld = 0
  LOOP
     Fld = %window{PROP:NextField,Fld}
     IF Fld = 0
        BREAK
     ELSE
        IF Fld{PROP:TIP}
           IF INSTRING('<13,10>',Fld{PROP:TIP},1,1)
              Tt.addtip(Fld{PROP:HANDLE},Fld{PROP:TIP},1)
           ELSE
              Tt.addtip(Fld{PROP:HANDLE},Fld{PROP:TIP},0)
           END!IF
           Fld{PROP:TIP}=''
        END!IF
     END
  END
  #ELSE
    #FOR(%ToolTipControls)
      #CASE(%ToolTipTextOption)
      #OF('Use Tip Text')
        #IF(%ControlGetsFocus)      #!Control can recieve focus
   tt.addtip(%ToolTipFeq{PROP:HANDLE},%ToolTipFeq{PROP:TIP},%MultiLineTip)
        #ELSE                       #!Control cannot recieve focus so use text, not tip
   tt.addtip(%ToolTipFeq{PROP:HANDLE},%ToolTipControl{PROP:TEXT},%MultiLineTip)
        #ENDIF
      #OF('Use Local Data Variable')
   tt.addtip(%ToolTipFeq{PROP:HANDLE},%TTLocalVariable,%MultiLineTip)
      #OF('Use Global Data Variable')
   tt.addtip(%ToolTipFeq{PROP:HANDLE},%TTGlobalVariable,%MultiLineTip)
      #OF('Specify Text')
   tt.addtip(%ToolTipFeq{PROP:HANDLE},'%TTText',%MultiLineTip)
      #ENDCASE
      #FIX(%Control,%ToolTipControl)
      #IF(EXTRACT(%ControlStatement,'TIP',0))
   %ToolTipFeq{PROP:TIP} = '' #<! Clear tip property to avoid two tips
      #ENDIF
    #ENDFOR
  #ENDIF
   tt.SetTipTextColor(%ToolTipTextColour)
   #IF(%SetBackgroundColour)
   tt.SetTipBkColor(%ToolTipBkColour)
   #ENDIF
END
  #INDENT(-%Indent)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(2500),DESCRIPTION('ToolTip Cleanup'),WHERE(NOT %DontApply)
  #INDENT(+%Indent)
tt.Kill()   #<!ToolTipClass Cleanup
  #INDENT(-%Indent)
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_PrintQ,'Devuna Print From SysIdQueue'),PROCEDURE
#! ----------------------------------------------------------------
#RESTRICT
  #CASE(%ProcedureCategory)
  #OF('Report')
    #ACCEPT
  #ELSE
    #REJECT
  #ENDCASE
#ENDRESTRICT
#!
#BOXED('Devuna')
  #DISPLAY ('This extension adds the code to a report procedure')
  #DISPLAY ('to print the report based on a queue OF system id''s.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%AfterGlobalIncludes)
 OMIT('_EndOfOmit_',_SysIdQueueTypePresent_)
_SysIdQueueTypePresent_    EQUATE(1)

SysIdQueueType QUEUE,TYPE
lSysId            LONG
                END
 !_EndOfOmit_
#ENDAT
#!
#!
#AT(%LocalDataAfterClasses)
lQpointer            LONG
#ENDAT
#!
#!
#AT(%ProcessManagerMethodCodeSection,'Next','(BYTE ProcessRecords),BYTE'),PRIORITY(2250),DESCRIPTION('Devuna Print From SysIdQueue')
  #DECLARE(%PrimaryKeyField)
  #FIX(%File,%Primary)
  #FIX(%Key,%FilePrimaryKey)
  #FOR(%KeyField)
    #SET(%PrimaryKeyField,%KeyField)
  #ENDFOR

  IF lQpointer < RECORDS(Q)
     lQpointer += 1
     GET(Q,lQpointer)
     %PrimaryKeyField = Q.lSysId
     IF ~Access:%File.Fetch(%Key)
        !Lookup Related Records
        #FOR(%Secondary),WHERE(%SecondaryType='1:MANY')
          #FIX(%Relation,%Secondary)
          #FOR(%RelationKeyField)
        %RelationKeyField = %RelationKeyFieldLink
          #ENDFOR
        IF Access:%Relation.Fetch(%RelationKey)
           CLEAR(%Relation:Record)
           ASSERT(~ERRORCODE())
        END
        #ENDFOR
        SELF.RecordsProcessed += 1
        ReturnValue = Level:Benign
     ELSE
        ReturnValue = Level:Fatal
     END
  ELSE
     ReturnValue = Level:Notify
  END
  Progress:Thermometer = (SELF.RecordsProcessed/RECORDS(Q))*100
  IF Progress:Thermometer > 100
     Progress:Thermometer = 100
  END
  ?Progress:PctText{PROP:Text} = Progress:Thermometer & '% Completed'
  DISPLAY()
  OMIT('ReturnValue = PARENT.Next(ProcessRecords)')
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'OpenReport','(),BYTE'),DESCRIPTION('Devuna Print From SysIdQueue')
#PRIORITY(2500)
lQpointer = 0
#PRIORITY(8800)
#SUSPEND
#?IF ~ReturnValue
   #?EXECUTE (TODAY()%%7)+1
      #?SELF.Report$?ReportDatePrompt{PROP:Text} = 'Sunday, ' & FORMAT(TODAY(),@D18) & ' ' & FORMAT(CLOCK(),@T7)
      #?SELF.Report$?ReportDatePrompt{PROP:Text} = 'Monday, ' & FORMAT(TODAY(),@D18) & ' ' & FORMAT(CLOCK(),@T7)
      #?SELF.Report$?ReportDatePrompt{PROP:Text} = 'Tuesday, ' & FORMAT(TODAY(),@D18) & ' ' & FORMAT(CLOCK(),@T7)
      #?SELF.Report$?ReportDatePrompt{PROP:Text} = 'Wednesday, ' & FORMAT(TODAY(),@D18) & ' ' & FORMAT(CLOCK(),@T7)
      #?SELF.Report$?ReportDatePrompt{PROP:Text} = 'Thursday, ' & FORMAT(TODAY(),@D18) & ' ' & FORMAT(CLOCK(),@T7)
      #?SELF.Report$?ReportDatePrompt{PROP:Text} = 'Friday, ' & FORMAT(TODAY(),@D18) & ' ' & FORMAT(CLOCK(),@T7)
      #?SELF.Report$?ReportDatePrompt{PROP:Text} = 'Saturday, ' & FORMAT(TODAY(),@D18) & ' ' & FORMAT(CLOCK(),@T7)
   #?END
#?END
#FOR(%ActiveTemplate)
  #IF(%ActiveTemplate = 'ReportDateStamp')
    #RELEASE
    #BREAK
  #ENDIF
#ENDFOR
#RESUME
#ENDAT
#!
#!
#AT(%PreviewerManagerMethodCodeSection,'TakeWindowEvent','(),BYTE'),PRIORITY(7500),DESCRIPTION('Devuna Print From SysIdQueue')
CASE EVENT()
OF EVENT:OpenWindow
   0{PROP:Maximize} = TRUE
END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_GlobalApplicationColors,'Add Global Application Color Support'),APPLICATION,REQ(KCR_Win32)
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_GlobalApplicationColors (Devuna)','Add Global Application Color Support')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the global variables')
  #DISPLAY ('for application color support.  The template')
  #DISPLAY ('also adds the winApplicationColors maintenance')
  #DISPLAY ('form to the application.')
  #DISPLAY ('')
  #PROMPT('&Generate template global data as EXTERNAL',CHECK),%GlobalDataExternal,AT(10,,170),DEFAULT(%False)
  #PROMPT('&EVENT:ColorChanged:',@S32),%Event,DEFAULT('EVENT:User+100')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
#PROJECT('metro.ico')
#PROJECT('close.ico')
#PROJECT('copy.ico')
#PROJECT('mail_send.ico')
#PROJECT('help2.ico')
#ENDAT
#!
#!
#AT(%AfterGlobalIncludes),LAST
  #IF(%GlobalExternal)
   INCLUDE('CWSYNCHC.INC'),ONCE         !CW Synchronization Helper Class
  #ENDIF
   INCLUDE('DefaultColors.inc'),ONCE
szColorDialogTitle  CSTRING(256)
EVENT:ColorsChanged EQUATE(%event)
ThreadQueueType     QUEUE,TYPE
ProcThread            LONG              !the thread
ProcCount             LONG              !count OF procedures on thread
ProcName              CSTRING(65)       !first procedure on thread
                    END
#ENDAT
#!
#!
#AT(%CustomGlobalDeclarations)
  #ADD(%CustomGlobalData,'glo:Typeface')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'CSTRING(32),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'CSTRING(32)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:Theme')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'CSTRING(32),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'CSTRING(32)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:WindowColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:BrowseColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:FormColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:PromptColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:StringColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:PanelColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:SheetColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:BackColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:BackSelectedColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:TextColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:TextSelectedColor')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'LONG,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'LONG(COLOR:NONE)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:TransparentButtons')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'BYTE,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'BYTE(false)')
  #ENDIF
  #!
  #ADD(%CustomGlobalData,'glo:ThreadQueue')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'QUEUE(ThreadQueueType),PRE(_tq),EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'QUEUE(ThreadQueueType),PRE(_tq)')
  #ENDIF
  #ADD(%CustomGlobalDataComponent,'')
  #SET(%CustomGlobalDataComponentDeclaration,'END')
  #SET(%CustomGlobalDataComponentIndent,0)
  #!
  #ADD(%CustomGlobalData,'glo:ThreadQueueLock')
  #SET(%CustomGlobalDataBeforeFiles,1)
  #IF(%GlobalDataExternal)
    #SET(%CustomGlobalDataDeclaration,'CriticalSection,EXTERNAL,DLL(dll_mode)')
  #ELSE
    #SET(%CustomGlobalDataDeclaration,'CriticalSection')
  #ENDIF
  #!
#ENDAT
#!
#!
#AT(%CustomGlobalDeclarations),WHERE(%GlobalDataExternal=0)
  #ADD(%CustomGlobalMapModule,%Program)
  #ADD(%CustomGlobalMapProcedure,'winApplicationColors')
  #SET(%CustomGlobalMapProcedurePrototype,'()')
  #ADD(%CustomGlobalMapModule,%Program)
  #ADD(%CustomGlobalMapProcedure,'KCR_ColorDialog')
  #SET(%CustomGlobalMapProcedurePrototype,'(<STRING sTitle>, *? rgb, *LONG[] acrCustClr),SIGNED,PROC')
  #ADD(%CustomGlobalMapModule,%Program)
  #ADD(%CustomGlobalMapProcedure,'KCR_ColorDialogHook')
  #SET(%CustomGlobalMapProcedurePrototype,'(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam),LONG,PASCAL')
#ENDAT
#!
#!
#AT(%DLLExportList),WHERE(%GlobalDataExternal=0)
;Start OF Devuna Application Color Exports
  #FOR(%CustomGlobalData)
    #IF(EXTRACT(%CustomGlobalDataDeclaration,'QUEUE'))
      #INSERT(%AddExpItem(ABC),'TYPE$'&%CustomGlobalData)
      #INSERT(%AddExpItem(ABC),'TCB$'&%CustomGlobalData)
      #INSERT(%AddExpDataItem(ABC),%CustomGlobalData)
    #ELSE
      #INSERT(%AddExpDataItem(ABC),%CustomGlobalData)
    #ENDIF
  #ENDFOR
  #!
  #SET(%ValueConstruct,'winApplicationColors@F')
  %[55]ValueConstruct @?
;End OF Devuna Application Color Exports
#ENDAT
#!
#!
#AT(%ProgramProcedures),WHERE(%GlobalDataExternal=0),DESCRIPTION('Application Colors Maintenance Form')
!----------------------------------------------------------------------
winApplicationColors    PROCEDURE()
feq        LONG
  COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
Typeface   CSTRING(32)
  !***ENDCOMPILE***
lFontSize  LONG
FontColor  LONG
FontStyle  LONG
acrCustClr LONG,DIM(16) !,STATIC
qcrCustClr QUEUE
crCustClr     LONG
           END
i          LONG,AUTO
j          LONG,AUTO

! Window Structure
  COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
Window WINDOW('Application Colours'),AT(,,304,158),CENTER,GRAY,FONT('Segoe UI Se' & |
         'milight',11),DOUBLE
      PANEL,AT(4,4,296,132),USE(?Panel1)
      GROUP('Background'),AT(8,6,140,54),USE(?BackgroundGroup),BOXED,TRN
         PROMPT('Window'),AT(12,14),USE(?glo:WindowColor:Prompt),TRN
         BUTTON,AT(84,14,48,10),USE(?glo:WindowColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,14,12,10),USE(?ClearWindowColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Browse'),AT(12,30),USE(?glo:BrowseColor:Prompt),TRN
         BUTTON,AT(84,30,48,10),USE(?glo:BrowseColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,30,12,10),USE(?ClearBrowseColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Form'),AT(12,46),USE(?glo:FormColor:Prompt),TRN
         BUTTON,AT(84,46,48,10),USE(?glo:FormColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,46,12,10),USE(?ClearFormColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
      END
      GROUP('List Box'),AT(8,62,140,70),USE(?ListBoxGroup),BOXED,TRN
         PROMPT('Background'),AT(12,70),USE(?glo:BackColor:Prompt),TRN
         BUTTON,AT(84,70,48,10),USE(?glo:BackColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,70,12,10),USE(?ClearBackColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Text'),AT(12,86),USE(?glo:TextColor:Prompt),TRN
         BUTTON,AT(84,86,48,10),USE(?glo:TextColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,86,12,10),USE(?ClearTextColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Selected Background'),AT(12,102),USE(?glo:BackSelectedColor:Prompt), |
               TRN
         BUTTON,AT(84,102,48,10),USE(?glo:BackSelectedColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,102,12,10),USE(?ClearBackSelectedColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Selected Text'),AT(12,118),USE(?glo:TextSelectedColor:Prompt),TRN
         BUTTON,AT(84,118,48,10),USE(?glo:TextSelectedColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,118,12,10),USE(?ClearTextSelectedColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
      END
      GROUP('Panels, Sheets and Buttons'),AT(155,6,140,54),USE(?PanelsAndSheetsGroup), |
            BOXED,TRN
         PROMPT('Panel'),AT(159,14),USE(?glo:PanelColor:Prompt),TRN
         BUTTON,AT(231,14,48,10),USE(?glo:PanelColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,14,12,10),USE(?ClearPanelColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Sheet'),AT(159,30),USE(?glo:SheetColor:Prompt),TRN
         BUTTON,AT(231,30,48,10),USE(?glo:SheetColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,30,12,10),USE(?ClearSheetColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         CHECK(' Use Transparent Buttons'),AT(159,46),USE(glo:TransparentButtons),SKIP
      END
      GROUP('Prompts and Strings'),AT(155,62,140,40),USE(?PromptsAndStringsGroup), |
            BOXED,TRN
         PROMPT('Prompt'),AT(159,70),USE(?glo:PromptColor:Prompt),TRN
         BUTTON,AT(231,70,48,10),USE(?glo:PromptColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,70,12,10),USE(?ClearPromptColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('String'),AT(159,86),USE(?glo:StringColor:Prompt),TRN
         BUTTON,AT(231,86,48,10),USE(?glo:StringColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,86,12,10),USE(?ClearStringColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
      END
      PROMPT('&Theme'),AT(155,105),USE(?glo:Theme:Prompt),TRN
      LIST,AT(190,105,104,10),USE(glo:Theme),VSCROLL,DROP(13),FROM('None|Default|User Defined' & |
            '|Blue|Brown|Desert|Maple|Mauve|Midnight Blue|Olive|Slate|Spruce|Wheat')
      PROMPT('Type&face'),AT(155,120),USE(?Typeface:Prompt),TRN
      ENTRY(@s64),AT(190,120,90,10),USE(Typeface),SKIP,COLOR(COLOR:BTNFACE),READONLY
      BUTTON('...'),AT(283,120,12,10),USE(?LookupFont)
      BUTTON('&Preview'),AT(4,141,48,14),USE(?PreviewButton)
      BUTTON('&Save'),AT(201,141,48,14),USE(?OkButton),ICON('save.ico'),DEFAULT,LEFT
      BUTTON('Cancel'),AT(252,141,48,14),USE(?CancelButton),ICON('Cancel.ico'),LEFT
      BOX,AT(84,14,48,10),USE(?glo:WindowColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,30,48,10),USE(?glo:BrowseColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,46,48,10),USE(?glo:FormColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,70,48,10),USE(?glo:BackColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,86,48,10),USE(?glo:TextColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,102,48,10),USE(?glo:BackSelectedColor:Box),COLOR(COLOR:Black), |
            LINEWIDTH(1)
      BOX,AT(84,118,48,10),USE(?glo:TextSelectedColor:Box),COLOR(COLOR:Black), |
            LINEWIDTH(1)
      BOX,AT(231,14,48,10),USE(?glo:PanelColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(231,30,48,10),USE(?glo:SheetColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(231,70,48,10),USE(?glo:PromptColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(231,86,48,10),USE(?glo:StringColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
   END
  !***ENDCOMPILE***

  OMIT('***ENDOMIT***',_EnableTypefaceCode_)
Window WINDOW('Application Colours'),AT(,,304,158),CENTER,GRAY,FONT('Segoe UI Se' & |
         'milight',11),DOUBLE
      PANEL,AT(4,4,296,132),USE(?Panel1)
      GROUP('Background'),AT(8,6,140,54),USE(?BackgroundGroup),BOXED,TRN
         PROMPT('Window'),AT(12,14),USE(?glo:WindowColor:Prompt),TRN
         BUTTON,AT(84,14,48,10),USE(?glo:WindowColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,14,12,10),USE(?ClearWindowColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Browse'),AT(12,30),USE(?glo:BrowseColor:Prompt),TRN
         BUTTON,AT(84,30,48,10),USE(?glo:BrowseColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,30,12,10),USE(?ClearBrowseColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Form'),AT(12,46),USE(?glo:FormColor:Prompt),TRN
         BUTTON,AT(84,46,48,10),USE(?glo:FormColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,46,12,10),USE(?ClearFormColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
      END
      GROUP('List Box'),AT(8,62,140,70),USE(?ListBoxGroup),BOXED,TRN
         PROMPT('Background'),AT(12,70),USE(?glo:BackColor:Prompt),TRN
         BUTTON,AT(84,70,48,10),USE(?glo:BackColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,70,12,10),USE(?ClearBackColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Text'),AT(12,86),USE(?glo:TextColor:Prompt),TRN
         BUTTON,AT(84,86,48,10),USE(?glo:TextColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,86,12,10),USE(?ClearTextColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Selected Background'),AT(12,102),USE(?glo:BackSelectedColor:Prompt), |
               TRN
         BUTTON,AT(84,102,48,10),USE(?glo:BackSelectedColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,102,12,10),USE(?ClearBackSelectedColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Selected Text'),AT(12,118),USE(?glo:TextSelectedColor:Prompt),TRN
         BUTTON,AT(84,118,48,10),USE(?glo:TextSelectedColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(132,118,12,10),USE(?ClearTextSelectedColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
      END
      GROUP('Panels, Sheets and Buttons'),AT(155,6,140,54),USE(?PanelsAndSheetsGroup), |
            BOXED,TRN
         PROMPT('Panel'),AT(159,14),USE(?glo:PanelColor:Prompt),TRN
         BUTTON,AT(231,14,48,10),USE(?glo:PanelColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,14,12,10),USE(?ClearPanelColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('Sheet'),AT(159,30),USE(?glo:SheetColor:Prompt),TRN
         BUTTON,AT(231,30,48,10),USE(?glo:SheetColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,30,12,10),USE(?ClearSheetColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         CHECK(' Use Transparent Buttons'),AT(159,46),USE(glo:TransparentButtons),SKIP
      END
      GROUP('Prompts and Strings'),AT(155,62,140,40),USE(?PromptsAndStringsGroup), |
            BOXED,TRN
         PROMPT('Prompt'),AT(159,70),USE(?glo:PromptColor:Prompt),TRN
         BUTTON,AT(231,70,48,10),USE(?glo:PromptColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,70,12,10),USE(?ClearPromptColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
         PROMPT('String'),AT(159,86),USE(?glo:StringColor:Prompt),TRN
         BUTTON,AT(231,86,48,10),USE(?glo:StringColor:Button),SKIP,FLAT,TRN
         BUTTON,AT(279,86,12,10),USE(?ClearStringColor),SKIP,ICON('eraser.ico'), |
               TIP('Clear Colour')
      END
      PROMPT('&Theme'),AT(155,105),USE(?glo:Theme:Prompt),TRN
      LIST,AT(190,105,104,10),USE(glo:Theme),VSCROLL,DROP(13),FROM('None|Default|User Defined' & |
            '|Blue|Brown|Desert|Maple|Mauve|Midnight Blue|Olive|Slate|Spruce|Wheat')
      BUTTON('&Preview'),AT(4,141,48,14),USE(?PreviewButton)
      BUTTON('&Save'),AT(201,141,48,14),USE(?OkButton),ICON('save.ico'),DEFAULT,LEFT
      BUTTON('Cancel'),AT(252,141,48,14),USE(?CancelButton),ICON('Cancel.ico'),LEFT
      BOX,AT(84,14,48,10),USE(?glo:WindowColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,30,48,10),USE(?glo:BrowseColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,46,48,10),USE(?glo:FormColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,70,48,10),USE(?glo:BackColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,86,48,10),USE(?glo:TextColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(84,102,48,10),USE(?glo:BackSelectedColor:Box),COLOR(COLOR:Black), |
            LINEWIDTH(1)
      BOX,AT(84,118,48,10),USE(?glo:TextSelectedColor:Box),COLOR(COLOR:Black), |
            LINEWIDTH(1)
      BOX,AT(231,14,48,10),USE(?glo:PanelColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(231,30,48,10),USE(?glo:SheetColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(231,70,48,10),USE(?glo:PromptColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
      BOX,AT(231,86,48,10),USE(?glo:StringColor:Box),COLOR(COLOR:Black),LINEWIDTH(1)
   END
  !***ENDOMIT***

PreviewWindow WINDOW('Application Window'),AT(,,410,167),CENTER,GRAY,SYSTEM, |
         FONT('Segoe UI Semilight',11),DOUBLE
      PANEL,AT(4,4,200,144),USE(?SampleBrowseWindow)
      SHEET,AT(10,25,188,100),USE(?SampleSheet)
         TAB('Sample Tab'),USE(?SampleTab1)
         END
         TAB('Sample Tab'),USE(?SampleTab2)
         END
      END
      LIST,AT(16,42,176,60),USE(?SampleList1),VSCROLL,FROM('Sample Record|Sample' & |
            ' Record|Sample Record|Sample Record|Sample Record|Sample Record|Sam' & |
            'ple Record|Sample Record|Sample Record|Sample Record|Sample Record|' & |
            'Sample Record')
      BUTTON('&New'),AT(42,106,48,14),USE(?SampleButton3),ICON('new.ico'),LEFT
      BUTTON('&Edit'),AT(94,106,48,14),USE(?SampleButton4),ICON('edit.ico'),LEFT
      BUTTON('&Delete'),AT(144,106,48,14),USE(?SampleButton5),ICON('delete.ico'),LEFT
      BUTTON('Cl&ose'),AT(98,129,48,14),USE(?SampleButton1),ICON('close.ico'),LEFT
      BUTTON('Help'),AT(148,129,48,14),USE(?SampleButton2),ICON('help.ico'),LEFT
      PANEL,AT(207,4,200,144),USE(?SampleFormWindow)
      PANEL,AT(213,25,188,100),USE(?SamplePanel)
      STRING('Sample String'),AT(221,33),USE(?SampleString3)
      PROMPT('Sample Prompt'),AT(221,47),USE(?SamplePrompt1)
      ENTRY(@s20),AT(275,47,117,10),USE(?SampleEntry1)
      OPTION('Sample Option'),AT(221,64,71,53),USE(?SampleOption1),BOXED
         RADIO('Sample Radio'),AT(228,76),USE(?Option1:Radio1)
         RADIO('Sample Radio'),AT(228,89),USE(?Option1:Radio2)
         RADIO('Sample Radio'),AT(228,102),USE(?Option1:Radio3)
      END
      CHECK('Sample Check'),AT(304,67),USE(?SampleCheck1)
      BUTTON('&Save'),AT(302,129,48,14),USE(?SampleButton6),ICON('save.ico'),LEFT
      BUTTON('Cancel'),AT(353,129,48,14),USE(?SampleButton7),ICON('cancel.ico'),LEFT
      BUTTON('Cl&ose'),AT(359,150,48,14),USE(?ClosePreviewButton),ICON('close.ico'), |
            LEFT
      BOX,AT(6,6,196,12),USE(?Box1),COLOR(COLOR:INACTIVECAPTION),FILL(COLOR:INACTIVECAPTION) |
            ,LINEWIDTH(1)
      STRING('Browse Window'),AT(7,8,178,10),USE(?BrowseWindowString),TRN,CENTER, |
            FONT(,,COLOR:INACTIVECAPTIONTEXT)
      IMAGE('close.ico'),AT(188,7,12,10),USE(?Image1),CENTERED
      BOX,AT(209,6,196,12),USE(?Box2),COLOR(COLOR:INACTIVECAPTION),FILL(COLOR:INACTIVECAPTION) |
            ,LINEWIDTH(1)
      STRING('Form Window'),AT(212,8,178,10),USE(?FormWindowString),TRN,CENTER, |
            FONT(,,COLOR:INACTIVECAPTIONTEXT)
      IMAGE('close.ico'),AT(391,7,12,10),USE(?Image2),CENTERED
   END


 CODE
   OPEN(WINDOW)

   COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
   Typeface = CHOOSE(glo:Typeface='','Segoe UI Semilight',glo:Typeface)
   DO SetTypeFace
   !***ENDCOMPILE***

   ?glo:WindowColor:Box{PROP:Fill} = glo:WindowColor
   ?glo:BrowseColor:Box{PROP:Fill} = glo:BrowseColor
   ?glo:FormColor:Box{PROP:Fill} = glo:FormColor
   ?glo:PromptColor:Box{PROP:Fill} = glo:PromptColor
   ?glo:StringColor:Box{PROP:Fill} = glo:StringColor
   ?glo:PanelColor:Box{PROP:Fill} = glo:PanelColor
   ?glo:SheetColor:Box{PROP:Fill} = glo:SheetColor
   ?glo:BackColor:Box{PROP:Fill} = glo:BackColor
   ?glo:BackSelectedColor:Box{PROP:Fill} = glo:BackSelectedColor
   ?glo:TextColor:Box{PROP:Fill} = glo:TextColor
   ?glo:TextSelectedColor:Box{PROP:Fill} = glo:TextSelectedColor


   CASE glo:Theme
   OF 'Default'
      ?glo:Theme{PROP:Selected} = 2
   OF 'Blue'
      ?glo:Theme{PROP:Selected} = 4
   OF 'Brown'
      ?glo:Theme{PROP:Selected} = 5
   OF 'Desert'
      ?glo:Theme{PROP:Selected} = 6
   OF 'Maple'
      ?glo:Theme{PROP:Selected} = 7
   OF 'Mauve'
      ?glo:Theme{PROP:Selected} = 8
   OF 'Midnight Blue'
      ?glo:Theme{PROP:Selected} = 9
   OF 'Olive'
      ?glo:Theme{PROP:Selected} = 10
   OF 'Slate'
      ?glo:Theme{PROP:Selected} = 11
   OF 'Spruce'
      ?glo:Theme{PROP:Selected} = 12
   OF 'User Defined'
      ?glo:Theme{PROP:Selected} = 3
   OF 'Wheat'
      ?glo:Theme{PROP:Selected} = 13
   ELSE
      glo:Theme = 'None'
      ?glo:Theme{PROP:Selected} = 1
   END

   IF glo:Theme = 'User Defined'
      ENABLE(?BackgroundGroup)
      ENABLE(?ListBoxGroup)
      ENABLE(?PanelsAndSheetsGroup)
      ENABLE(?PromptsAndStringsGroup)
   ELSE
      DISABLE(?BackgroundGroup)
      DISABLE(?ListBoxGroup)
      DISABLE(?PanelsAndSheetsGroup)
      DISABLE(?PromptsAndStringsGroup)
   END

   DO SetupColorDialogCustomColors

   ACCEPT
     CASE EVENT()
     OF EVENT:CloseWindow
        BREAK
     OF EVENT:CloseDown
        BREAK
     OF EVENT:Accepted
        UPDATE()
        CASE ACCEPTED()
        OF ?glo:WindowColor:Button
           IF KCR_ColorDialog('Select Window Background Colour',glo:WindowColor,acrCustClr)
              ?glo:WindowColor:Box{PROP:Fill} = glo:WindowColor
              DISPLAY(?glo:WindowColor:Box)
           END
        OF ?glo:BrowseColor:Button
           IF KCR_ColorDialog('Select Browse Background Colour',glo:BrowseColor,acrCustClr)
              ?glo:BrowseColor:Box{PROP:Fill} = glo:BrowseColor
              DISPLAY(?glo:BrowseColor:Box)
           END
        OF ?glo:FormColor:Button
           IF KCR_ColorDialog('Select Form Background Colour',glo:FormColor,acrCustClr)
              ?glo:FormColor:Box{PROP:Fill} = glo:FormColor
              DISPLAY(?glo:FormColor:Box)
           END
        OF ?glo:BackColor:Button
           IF KCR_ColorDialog('Select ListBox Background Colour',glo:BackColor,acrCustClr)
              ?glo:BackColor:Box{PROP:Fill} = glo:BackColor
              DISPLAY(?glo:BackColor:Box)
           END
        OF ?glo:TextColor:Button
           IF KCR_ColorDialog('Select ListBox Text Colour',glo:TextColor,acrCustClr)
              ?glo:TextColor:Box{PROP:Fill} = glo:TextColor
              DISPLAY(?glo:TextColor:Box)
           END
        OF ?glo:BackSelectedColor:Button
           IF KCR_ColorDialog('Select ListBox Selected Background Colour',glo:BackSelectedColor,acrCustClr)
              ?glo:BackSelectedColor:Box{PROP:Fill} = glo:BackSelectedColor
              DISPLAY(?glo:BackSelectedColor:Box)
           END
        OF ?glo:TextSelectedColor:Button
           IF KCR_ColorDialog('Select ListBox Selected Text Colour',glo:TextSelectedColor,acrCustClr)
              ?glo:TextSelectedColor:Box{PROP:Fill} = glo:TextSelectedColor
              DISPLAY(?glo:TextSelectedColor:Box)
           END
        OF ?glo:PanelColor:Button
           IF KCR_ColorDialog('Select Panel Colour',glo:PanelColor,acrCustClr)
              ?glo:PanelColor:Box{PROP:Fill} = glo:PanelColor
              DISPLAY(?glo:PanelColor:Box)
           END
        OF ?glo:SheetColor:Button
           IF KCR_ColorDialog('Select Sheet Colour',glo:SheetColor,acrCustClr)
             ?glo:SheetColor:Box{PROP:Fill} = glo:SheetColor
             DISPLAY(?glo:SheetColor:Box)
           END
        OF ?glo:PromptColor:Button
           IF KCR_ColorDialog('Select Prompt Colour',glo:PromptColor,acrCustClr)
              ?glo:PromptColor:Box{PROP:Fill} = glo:PromptColor
              DISPLAY(?glo:PromptColor:Box)
              LOOP feq = FIRSTFIELD() TO LASTFIELD()
                 IF feq{prop:type} = create:prompt
                    feq{prop:fontcolor} = glo:PromptColor
                 END
              END
           END
        OF ?glo:StringColor:Button
           IF KCR_ColorDialog('Select String Colour',glo:StringColor,acrCustClr)
              ?glo:StringColor:Box{PROP:Fill} = glo:StringColor
              DISPLAY(?glo:StringColor:Box)
            END
        OF ?ClearWindowColor
           glo:WindowColor = COLOR:NONE
           ?glo:WindowColor:Box{PROP:Fill} = glo:WindowColor
           DISPLAY(?glo:WindowColor:Box)
        OF ?ClearBrowseColor
           glo:BrowseColor = COLOR:NONE
           ?glo:BrowseColor:Box{PROP:Fill} = glo:BrowseColor
           DISPLAY(?glo:BrowseColor:Box)
        OF ?ClearFormColor
           glo:FormColor = COLOR:NONE
           ?glo:FormColor:Box{PROP:Fill} = glo:FormColor
           DISPLAY(?glo:FormColor:Box)
        OF ?ClearPanelColor
           glo:PanelColor = COLOR:NONE
           ?glo:PanelColor:Box{PROP:Fill} = glo:PanelColor
           DISPLAY(?glo:PanelColor:Box)
        OF ?ClearSheetColor
           glo:SheetColor = COLOR:NONE
           ?glo:SheetColor:Box{PROP:Fill} = glo:SheetColor
           DISPLAY(?glo:SheetColor:Box)
        OF ?ClearPromptColor
           glo:PromptColor = COLOR:NONE
           ?glo:PromptColor:Box{PROP:Fill} = glo:PromptColor
           DISPLAY(?glo:PromptColor:Box)
        OF ?ClearStringColor
           glo:StringColor = COLOR:NONE
           ?glo:StringColor:Box{PROP:Fill} = glo:StringColor
           DISPLAY(?glo:StringColor:Box)
        OF ?ClearBackColor
           glo:BackColor = COLOR:NONE
           ?glo:BackColor:Box{PROP:Fill} = glo:BackColor
           DISPLAY(?glo:BackColor:Box)
        OF ?ClearBackSelectedColor
           glo:BackSelectedColor = COLOR:NONE
           ?glo:BackSelectedColor:Box{PROP:Fill} = glo:BackSelectedColor
           DISPLAY(?glo:BackSelectedColor:Box)
        OF ?ClearTextColor
           glo:TextColor = COLOR:NONE
           ?glo:TextColor:Box{PROP:Fill} = glo:TextColor
           DISPLAY(?glo:TextColor:Box)
        OF ?ClearTextSelectedColor
           glo:TextSelectedColor = COLOR:NONE
           ?glo:TextSelectedColor:Box{PROP:Fill} = glo:TextSelectedColor
           DISPLAY(?glo:TextSelectedColor:Box)
        OF ?OkButton
           GlobalResponse = RequestCompleted
           POST(EVENT:CloseWindow)
        OF ?CancelButton
           GlobalResponse = RequestCancelled
           POST(EVENT:CloseWindow)
        OF ?glo:Theme
          CASE glo:Theme
          OF 'None'
             glo:WindowColor = COLOR:NONE
             glo:BrowseColor = COLOR:NONE
             glo:FormColor = COLOR:NONE
             glo:PanelColor = COLOR:NONE
             glo:SheetColor = COLOR:NONE
             glo:PromptColor = COLOR:NONE
             glo:StringColor = COLOR:NONE
             glo:BackColor = COLOR:NONE
             glo:BackSelectedColor = COLOR:NONE
             glo:TextColor = COLOR:NONE
             glo:TextSelectedColor = COLOR:NONE
          OF 'Default'
             glo:WindowColor = DEFAULTWINDOWCOLOR
             glo:BrowseColor = DEFAULTBROWSECOLOR
             glo:FormColor = DEFAULTFORMCOLOR
             glo:PanelColor = DEFAULTPANELCOLOR
             glo:SheetColor = DEFAULTSHEETCOLOR
             glo:PromptColor = DEFAULTPROMPTCOLOR
             glo:StringColor = DEFAULTSTRINGCOLOR
             glo:BackColor = DEFAULTBACKCOLOR
             glo:BackSelectedColor = DEFAULTBACKSELECTEDCOLOR
             glo:TextColor = DEFAULTTEXTCOLOR
             glo:TextSelectedColor = DEFAULTTEXTSELECTEDCOLOR
          OF 'Blue'
             glo:WindowColor = 0857052H
             glo:BrowseColor = 0857052H
             glo:FormColor   = 0857052H
             glo:PanelColor  = 0D0B080H
             glo:SheetColor  = 0D0B080H
             glo:PromptColor = COLOR:BLACK
             glo:StringColor = COLOR:BLACK
             glo:BackColor         = COLOR:WHITE
             glo:BackSelectedColor = 0857052H
             glo:TextColor         = COLOR:BLACK
             glo:TextSelectedColor = COLOR:WHITE
          OF 'Brown'
             glo:WindowColor = 00C2C52h
             glo:BrowseColor = 00C2C52h
             glo:FormColor = 02177B6h
             glo:PanelColor = 072A1C0h
             glo:SheetColor = 02177B6h
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = 00C2C52h
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'Desert'
             glo:WindowColor = 0AABD84h
             glo:BrowseColor = 0688DA2h
             glo:FormColor = 080D0E8h
             glo:PanelColor = 0BBCCD5h
             glo:SheetColor = 0BBCCD5h
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = 0808000h
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'Maple'
             glo:WindowColor = 00F1746h
             glo:BrowseColor = 0389CC0h
             glo:FormColor = 0389CC0h
             glo:PanelColor = 060B3CEh
             glo:SheetColor = 060B3CEh
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = color:maroon
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'Mauve'
             glo:WindowColor = 094A1B7h
             glo:BrowseColor = 0751671h
             glo:FormColor = 0B57E8Eh
             glo:PanelColor = 0E3AECCh
             glo:SheetColor = 0AE21BCh
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = 0751671h
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'Midnight Blue'
             glo:WindowColor = 0663300h
             glo:BrowseColor = 0663300h
             glo:FormColor = 0B67721h
             glo:PanelColor = 0C0A172h
             glo:SheetColor = 0B67721h
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = 0663300h
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'Olive'
             glo:WindowColor = 05F776Bh
             glo:BrowseColor = 05F776Bh
             glo:FormColor = 055C9D2h
             glo:PanelColor = 0DAE2DDh
             glo:SheetColor = 055C9D2h
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = 05F776Bh
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'Slate'
             glo:WindowColor = 0414141h
             glo:BrowseColor = 0808080h
             glo:FormColor = 0808080h
             glo:PanelColor = 0C8B99Dh
             glo:SheetColor = 0978055h
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = 0414141h
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'Spruce'
             glo:WindowColor = 0649759h
             glo:BrowseColor = 0649759h
             glo:FormColor = 0E8C898h
             glo:PanelColor = 0A9C8A2h
             glo:SheetColor = 0A9C8A2h
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = 0213F21h
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          OF 'User Defined'
             IF  glo:WindowColor = 0        |
             AND glo:BrowseColor = 0        |
             AND glo:FormColor = 0          |
             AND glo:PanelColor = 0         |
             AND glo:SheetColor = 0         |
             AND glo:PromptColor = 0        |
             AND glo:StringColor = 0        |
             AND glo:BackSelectedColor = 0  |
             AND glo:TextColor = 0          |
             AND glo:TextSelectedColor = 0  |
             AND glo:BackColor = 0
                 glo:WindowColor = DEFAULTWINDOWCOLOR
                 glo:BrowseColor = DEFAULTBROWSECOLOR
                 glo:FormColor = DEFAULTFORMCOLOR
                 glo:PanelColor = DEFAULTPANELCOLOR
                 glo:SheetColor = DEFAULTSHEETCOLOR
                 glo:PromptColor = DEFAULTPROMPTCOLOR
                 glo:StringColor = DEFAULTSTRINGCOLOR
                 glo:BackColor = DEFAULTBACKCOLOR
                 glo:BackSelectedColor = DEFAULTBACKSELECTEDCOLOR
                 glo:TextColor = DEFAULTTEXTCOLOR
                 glo:TextSelectedColor = DEFAULTTEXTSELECTEDCOLOR
             END
          OF 'Wheat'
             glo:WindowColor = color:teal
             glo:BrowseColor = 048B0C8h
             glo:FormColor = 01D4000h
             glo:PanelColor = 0A0DEDEh
             glo:SheetColor = 080B8B8h
             glo:PromptColor = color:black
             glo:StringColor = color:black
             glo:BackColor = color:white
             glo:BackSelectedColor = color:navy
             glo:TextColor = color:black
             glo:TextSelectedColor = color:white
          END
          ?glo:WindowColor:Box{PROP:Fill} = glo:WindowColor
          ?glo:BrowseColor:Box{PROP:Fill} = glo:BrowseColor
          ?glo:FormColor:Box{PROP:Fill} = glo:FormColor
          ?glo:PanelColor:Box{PROP:Fill} = glo:PanelColor
          ?glo:SheetColor:Box{PROP:Fill} = glo:SheetColor
          ?glo:PromptColor:Box{PROP:Fill} = glo:PromptColor
          ?glo:StringColor:Box{PROP:Fill} = glo:StringColor
          ?glo:BackColor:Box{PROP:Fill} = glo:BackColor
          ?glo:BackSelectedColor:Box{PROP:Fill} = glo:BackSelectedColor
          ?glo:TextColor:Box{PROP:Fill} = glo:TextColor
          ?glo:TextSelectedColor:Box{PROP:Fill} = glo:TextSelectedColor

          IF glo:Theme = 'User Defined'
             ENABLE(?BackgroundGroup)
             ENABLE(?ListBoxGroup)
             ENABLE(?PanelsAndSheetsGroup)
             ENABLE(?PromptsAndStringsGroup)
          ELSE
             DISABLE(?BackgroundGroup)
             DISABLE(?ListBoxGroup)
             DISABLE(?PanelsAndSheetsGroup)
             DISABLE(?PromptsAndStringsGroup)
          END

          DISPLAY()
   COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
        OF ?LookupFont
          IF FONTDIALOG('Select Application Font',Typeface,lFontSize,FontColor,FontStyle,0)
             glo:Typeface = Typeface
             DO SetTypeFace
             DISPLAY()
          END
   !***ENDCOMPILE***
        OF ?PreviewButton
          OPEN(PreviewWindow)
          ACCEPT
            CASE EVENT()
              OF EVENT:OpenWindow
                 PreviewWindow{PROP:Background} = CHOOSE(glo:WindowColor <> glo:BrowseColor,glo:WindowColor,glo:PanelColor)

   COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
                 IF glo:Typeface <> ''
                    PreviewWindow{PROP:FontName} = glo:Typeface
                    !?SampleBrowseWindow{PROP:FontName} = glo:Typeface
                    ?SampleSheet{PROP:FontName} = glo:Typeface
                    ?SampleTab1{PROP:FontName} = glo:Typeface
                    ?SampleTab2{PROP:FontName} = glo:Typeface
                    ?SampleList1{PROP:FontName} = glo:Typeface
                    ?SampleButton1{PROP:FontName} = glo:Typeface
                    ?SampleButton2{PROP:FontName} = glo:Typeface
                    ?SampleButton3{PROP:FontName} = glo:Typeface
                    ?SampleButton4{PROP:FontName} = glo:Typeface
                    ?SampleButton5{PROP:FontName} = glo:Typeface
                    ?SampleButton6{PROP:FontName} = glo:Typeface
                    ?SampleButton7{PROP:FontName} = glo:Typeface
                    !?SampleFormWindow{PROP:FontName} = glo:Typeface
                    !?SamplePanel{PROP:FontName} = glo:Typeface
                    ?SampleString3{PROP:FontName} = glo:Typeface
                    ?SamplePrompt1{PROP:FontName} = glo:Typeface
                    ?SampleEntry1{PROP:FontName} = glo:Typeface
                    ?SampleOption1{PROP:FontName} = glo:Typeface
                    ?Option1:Radio1{PROP:FontName} = glo:Typeface
                    ?Option1:Radio2{PROP:FontName} = glo:Typeface
                    ?Option1:Radio3{PROP:FontName} = glo:Typeface
                    ?SampleCheck1{PROP:FontName} = glo:Typeface
                 END
   !***ENDCOMPILE***

                 ?SampleBrowseWindow{PROP:Fill} = glo:browsecolor

                 ?SampleSheet{PROP:Color} = glo:SheetColor
                 ?SampleSheet{PROP:FontColor} = glo:PromptColor

                 ?SampleList1{PROP:FontColor} = glo:TextColor
                 ?SampleList1{PROP:Background} = glo:BackColor
                 ?SampleList1{PROP:SelectedColor} = glo:TextSelectedColor
                 ?SampleList1{PROP:SelectedFillColor} = glo:BackSelectedColor
                 ?SampleList1{PROP:Selected} = 4

                 ?SampleFormWindow{PROP:Fill} = glo:formcolor

                 ?SamplePanel{PROP:Fill} = glo:panelcolor

                 ?SampleString3{PROP:TRN} = TRUE
                 ?SampleString3{PROP:FontColor} = glo:StringColor

                 ?SamplePrompt1{PROP:TRN} = TRUE
                 ?SamplePrompt1{PROP:FontColor} = glo:PromptColor

                 ?SampleEntry1{PROP:Background} = COLOR:White
                 ?SampleEntry1{PROP:SelectedFillColor} = glo:BackSelectedColor

                 ?SampleOption1{PROP:TRN} = FALSE
                 ?SampleOption1{PROP:Color} = glo:PanelColor

                 ?Option1:Radio1{PROP:FontColor} = glo:PromptColor
                 ?Option1:Radio1{PROP:Color} = glo:PanelColor
                 ?Option1:Radio1{PROP:TRN} = FALSE
                 ?Option1:Radio2{PROP:FontColor} = glo:PromptColor
                 ?Option1:Radio2{PROP:Color} = glo:PanelColor
                 ?Option1:Radio2{PROP:TRN} = FALSE
                 ?Option1:Radio3{PROP:FontColor} = glo:PromptColor
                 ?Option1:Radio3{PROP:Color} = glo:PanelColor
                 ?Option1:Radio3{PROP:TRN} = FALSE

                 ?SampleCheck1{PROP:TRN} = FALSE
                 ?SampleCheck1{PROP:FontColor} = glo:PromptColor
                 ?SampleCheck1{PROP:Color} = glo:PanelColor

                 IF glo:TransparentButtons
                    ?SampleButton1{PROP:TRN} = TRUE
                    ?SampleButton2{PROP:TRN} = TRUE
                    ?SampleButton3{PROP:TRN} = TRUE
                    ?SampleButton4{PROP:TRN} = TRUE
                    ?SampleButton5{PROP:TRN} = TRUE
                    ?SampleButton6{PROP:TRN} = TRUE
                    ?SampleButton7{PROP:TRN} = TRUE
                 ELSE
                    ?SampleButton1{PROP:TRN} = FALSE
                    ?SampleButton2{PROP:TRN} = FALSE
                    ?SampleButton3{PROP:TRN} = FALSE
                    ?SampleButton4{PROP:TRN} = FALSE
                    ?SampleButton5{PROP:TRN} = FALSE
                    ?SampleButton6{PROP:TRN} = FALSE
                    ?SampleButton7{PROP:TRN} = FALSE
                 END
                 ?Box1{PROP:Color} = COLOR:INACTIVECAPTION
                 ?Box1{PROP:FILL} = COLOR:INACTIVECAPTION
                 ?Box2{PROP:Color} = COLOR:INACTIVECAPTION
                 ?Box2{PROP:FILL} = COLOR:INACTIVECAPTION

              OF EVENT:Accepted
                 CASE ACCEPTED()
                   OF ?ClosePreviewButton
                      POST(EVENT:CloseWindow)
                 END
            END
          END
          CLOSE(PreviewWindow)
        END

   OMIT('***ENDOMIT***',_EnableTypefaceCode_)
        IF INRANGE(ACCEPTED(),?glo:WindowColor:Button,?glo:Theme)
           DO SetupColorDialogCustomColors
        END
   !***ENDOMIT***
   COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
        IF INRANGE(ACCEPTED(),?glo:WindowColor:Button,?LookupFont)
           DO SetupColorDialogCustomColors
        END
   !***ENDCOMPILE***

     END
   END
   CLOSE(WINDOW)
   FREE(qcrCustClr)
   IF GlobalResponse = RequestCompleted
      POST(EVENT:ColorsChanged,,1)
   END
   RETURN

SetupColorDialogCustomColors    ROUTINE
   FREE(qcrCustClr)
   LOOP i = ?glo:WindowColor:Box TO ?glo:StringColor:Box
      qcrCustClr.crCustClr = i{PROP:Fill}
      GET(qcrCustClr,+qcrCustClr.crCustClr)
      IF ERRORCODE()
         ADD(qcrCustClr,+qcrCustClr.crCustClr)
      END
   END
   LOOP i = 1 TO 16
      acrCustClr[i] = COLOR:WHITE
   END
   j = RECORDS(qcrCustClr)
   LOOP i = 1 TO j
      GET(qcrCustClr,i)
      acrCustClr[i] = qcrCustClr.crCustClr
   END

  COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
SetTypeFace ROUTINE
   Window{PROP:FontName} = Typeface
   ?BackgroundGroup{PROP:FontName} = Typeface
   ?glo:WindowColor:Prompt{PROP:FontName} = Typeface
   ?glo:WindowColor:Button{PROP:FontName} = Typeface
   ?ClearWindowColor{PROP:FontName} = Typeface
   ?glo:BrowseColor:Prompt{PROP:FontName} = Typeface
   ?glo:BrowseColor:Button{PROP:FontName} = Typeface
   ?ClearBrowseColor{PROP:FontName} = Typeface
   ?glo:FormColor:Prompt{PROP:FontName} = Typeface
   ?glo:FormColor:Button{PROP:FontName} = Typeface
   ?ClearFormColor{PROP:FontName} = Typeface
   ?ListBoxGroup{PROP:FontName} = Typeface
   ?glo:BackColor:Prompt{PROP:FontName} = Typeface
   ?glo:BackColor:Button{PROP:FontName} = Typeface
   ?ClearBackColor{PROP:FontName} = Typeface
   ?glo:TextColor:Prompt{PROP:FontName} = Typeface
   ?glo:TextColor:Button{PROP:FontName} = Typeface
   ?ClearTextColor{PROP:FontName} = Typeface
   ?glo:BackSelectedColor:Prompt{PROP:FontName} = Typeface
   ?glo:BackSelectedColor:Button{PROP:FontName} = Typeface
   ?ClearBackSelectedColor{PROP:FontName} = Typeface
   ?glo:TextSelectedColor:Prompt{PROP:FontName} = Typeface
   ?glo:TextSelectedColor:Button{PROP:FontName} = Typeface
   ?ClearTextSelectedColor{PROP:FontName} = Typeface
   ?PanelsAndSheetsGroup{PROP:FontName} = Typeface
   ?glo:PanelColor:Prompt{PROP:FontName} = Typeface
   ?glo:PanelColor:Button{PROP:FontName} = Typeface
   ?ClearPanelColor{PROP:FontName} = Typeface
   ?glo:SheetColor:Prompt{PROP:FontName} = Typeface
   ?glo:SheetColor:Button{PROP:FontName} = Typeface
   ?ClearSheetColor{PROP:FontName} = Typeface
   ?glo:TransparentButtons{PROP:FontName} = Typeface
   ?PromptsAndStringsGroup{PROP:FontName} = Typeface
   ?glo:PromptColor:Prompt{PROP:FontName} = Typeface
   ?glo:PromptColor:Button{PROP:FontName} = Typeface
   ?ClearPromptColor{PROP:FontName} = Typeface
   ?glo:PromptColor:Box{PROP:FontName} = Typeface
   ?glo:StringColor:Prompt{PROP:FontName} = Typeface
   ?glo:StringColor:Button{PROP:FontName} = Typeface
   ?ClearStringColor{PROP:FontName} = Typeface
   ?glo:StringColor:Box{PROP:FontName} = Typeface
   ?glo:Theme:Prompt{PROP:FontName} = Typeface
   ?glo:Theme{PROP:FontName} = Typeface
   ?Typeface:Prompt{PROP:FontName} = Typeface
   ?Typeface{PROP:FontName} = Typeface
   ?LookupFont{PROP:FontName} = Typeface
   ?OkButton{PROP:FontName} = Typeface
   ?CancelButton{PROP:FontName} = Typeface
   EXIT
  !***ENDCOMPILE***
#ENDAT
#!
#!
#AT(%ProgramProcedures),WHERE(%GlobalDataExternal=0),DESCRIPTION('Devuna Color Dialog')
!----------------------------------------------------------------------
KCR_ColorDialog    PROCEDURE(<STRING sTitle>, *? rgb, *LONG[] acrCustClr)   !,SIGNED,PROC

cc          LIKE(kcr_CHOOSECOLOR),AUTO
hwnd        HWND
bResult     BOOL

 CODE
  szColorDialogTitle = CLIP(sTitle)

  CLEAR(cc)
  cc.lStructSize = SIZE(cc)
  cc.hwndOwner = 0{prop:Handle} !hwnd
  cc.lpCustColors = ADDRESS(acrCustClr[1])
  cc.rgbResult = rgb
  cc.Flags = BOR(BOR(CC_FULLOPEN,CC_RGBINIT),CC_ENABLEHOOK)
  cc.lpfnHook = ADDRESS(KCR_ColorDialogHook)
  UNLOCKTHREAD()
  bResult = kcr_ChooseColor(cc)
  LOCKTHREAD()
  IF bResult = TRUE
     rgb = cc.rgbResult
  END
  RETURN(bResult)
#ENDAT
#AT(%ProgramProcedures),WHERE(%GlobalDataExternal=0),DESCRIPTION('Devuna Color Dialog Hook')
!----------------------------------------------------------------------
KCR_ColorDialogHook PROCEDURE(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam)   !,LONG,PASCAL

oldrect LIKE(kcr_RECT)
newrect LIKE(kcr_RECT)
nCX     LONG
nCY     LONG

  CODE
  CASE wMsg
  OF WM_INITDIALOG
     IF szColorDialogTitle
        kcr_SetWindowText(hWnd,szColorDialogTitle)
     END
     !center the dialog box
     nCX = kcr_GetSystemMetrics(SM_CXSCREEN)/2
     nCY = kcr_GetSystemMetrics(SM_CYSCREEN)/2
     kcr_GetWindowRect(hWnd,oldrect)
     newrect.top = nCY - (oldrect.bottom - oldrect.top)/2
     newrect.left = nCX - (oldrect.right - oldrect.left)/2
     newrect.bottom = oldrect.bottom - oldrect.top
     newrect.right = oldrect.right - oldrect.left
     kcr_MoveWindow(hWnd,newrect.left,newrect.top,newrect.right,newrect.bottom,TRUE)
  END
  RETURN(FALSE)
!----------------------------------------------------------------------
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_AddApplicationColors,'Add Application Color Support'),APPLICATION(KCR_ApplicationColors(KCR)),REQ(KCR_GlobalApplicationColors(KCR))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_AddApplicationColors (Devuna)','Add Application Color Support')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_ApplicationColors')
  #DISPLAY ('template to every window procedure.')
  #DISPLAY ('')
  #BOXED,WHERE(%ProgramExtension = 'EXE'),HIDE,CLEAR
    #PROMPT('Use Background Window',CHECK),%UseBackgroundWindow,DEFAULT(0),AT(10)
    #ENABLE(%UseBackgroundWindow)
      #PROMPT('Background Window Color:',COLOR),%BackgroundWindowColor
    #ENDENABLE
    #DISPLAY ('')
  #ENDBOXED
#ENDBOXED
#!
#!
#AT(%BeforeFileDeclarations)
#IF(%UseBackgroundWindow)
hWndBackdrop       UNSIGNED
BackDrop WINDOW,AT(,,398,278),COLOR(%BackgroundWindowColor),TIMER(100),PALETTE(256),NOFRAME
     END
#ENDIF
#ENDAT
#!
#!
#AT(%ProgramSetup),PRIORITY(4000)
#IF(%UseBackgroundWindow)
IF kcr_GetSystemMetrics(SM_CXSCREEN) > 800 OR kcr_GetSystemMetrics(SM_CYSCREEN) > 600
   OPEN(BackDrop)
   hWndBackdrop = backdrop{prop:handle}
   kcr_MoveWindow(backdrop{prop:handle},0,0,kcr_GetSystemMetrics(SM_CXSCREEN),kcr_GetSystemMetrics(SM_CYSCREEN),TRUE)
   ACCEPT
     CASE EVENT()
       OF EVENT:TIMER
          BackDrop{PROP:TIMER} = 0
          %FirstProcedure
          INIMgr.Update
          INIMgr.Kill
          BREAK
     END
   END
   CLOSE(BackDrop)
ELSE
   %FirstProcedure
   INIMgr.Update
   INIMgr.Kill
END
OMIT('end_omit')
#ENDIF
#ENDAT
#!
#!
#AT(%ProgramEnd)
#IF(%UseBackgroundWindow)
!end_omit
#ENDIF
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ApplicationColors,'Use Application Colors'),PROCEDURE,REQ(KCR_GlobalApplicationColors)
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ApplicationColors (Devuna)','Use Application Colors')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('Use the check box to override the')
  #DISPLAY ('application colors template.')
  #DISPLAY ('')
  #PROMPT('Disable Application Colors',CHECK),%DisableApplicationColors,DEFAULT(0),AT(10)
  #DISPLAY ('')
  #ENABLE(%DisableApplicationColors = 0)
  #PROMPT('Generate ShowSystemInformation Routine',CHECK),%GenerateShowSystemInformation,DEFAULT(1),AT(10)
  #PROMPT('Default Window Icon',@S255),%DefaultWindowIcon
  #ENDENABLE
  #DISPLAY ('')
#ENDBOXED
#ATSTART
  #DECLARE(%ThisPointer)
  #DECLARE(%ThisControl)
  #DECLARE(%ThisColor)
  #DECLARE(%ThisWallpaper)
  #DECLARE(%ThisTypeface)
  #DECLARE(%ThisIcon)
  #DECLARE(%ErrorMsg)
  #DECLARE(%ChangeWindowStyleFound)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8005),WHERE(%GenerateShowSystemInformation),DESCRIPTION('Module Identification Message')
%Window{PROP:Alrt,255} = 959
#ENDAT
#!
#!
#AT(%WindowEventHandling,'AlertKey'),PRIORITY(7500),WHERE(%GenerateShowSystemInformation),DESCRIPTION('Module Identification Message')
 CASE KEYCODE()
   OF 959   !Ctrl+Shift+?
       DO ShowSystemInformation
 END
#ENDAT
#!
#!
#AT(%ProcedureRoutines),WHERE(%GenerateShowSystemInformation),DESCRIPTION('Module Identification Message')
!----------------------------------------------------------------------------
ShowSystemInformation   ROUTINE
   DATA
_rc                  LIKE(RECT)
_hRgnUpdate          HRGN

_szMessageText       CSTRING(2048)
_szMailBody          CSTRING(2048)
_szURL               CSTRING(4096)
_szNull              CSTRING('')
_szSubject           CSTRING('Devuna Complete System Information')

_szProjectTarget     CSTRING(256)
_szModule            CSTRING(256)
_szProcedure         CSTRING('%Procedure')
_szContextString     CSTRING(256)
_szPosition          CSTRING(256)
_szDataPath          CSTRING(261)
_szProgramPath       CSTRING(261)
_szServerName        CSTRING(256)
_szServerPort        CSTRING(256)

_winSystemInformation WINDOW('Devuna Complete System Information'), |
         AT(,,330,168),CENTER,GRAY,ICON('Metro.ico'),FONT('Segoe UI Semilight',11)
      STRING('Program'),AT(10,6),USE(?_STRING1)
      STRING(@s255),AT(60,6,260),USE(_szProjectTarget)
      STRING('Module'),AT(10,18),USE(?_STRING2)
      STRING(@s255),AT(60,18,260),USE(_szModule)
      STRING('Procedure'),AT(10,30),USE(?_STRING3)
      STRING(@s255),AT(60,30,260),USE(_szProcedure)
      STRING('Context String'),AT(10,42),USE(?_STRING4)
      STRING(@s255),AT(60,42,260),USE(_szContextString)
      STRING('Position'),AT(10,54),USE(?_STRING5)
      STRING(@s255),AT(60,54,260),USE(_szPosition)
      STRING('Version'),AT(10,66),USE(?_STRING6)
      STRING(@s255),AT(60,66,260),USE(glo:Version,, ?_Version)
      STRING('Data Server'),AT(10,78),USE(?_STRING7)
      STRING(@s255),AT(60,78,260),USE(_szServerName)
      STRING('Port Number'),AT(10,90),USE(?_STRING8)
      STRING(@s255),AT(60,90,260),USE(_szServerPort)
      STRING('Data Path'),AT(10,102),USE(?_STRING9)
      STRING(@s255),AT(60,102,260),USE(_szDataPath)
      STRING('Program Path'),AT(10,114),USE(?_STRING10)
      STRING(@s255),AT(60,114,260),USE(_szProgramPath)
      STRING('User Name'),AT(10,126),USE(?_STRING11)
      STRING(@s255),AT(60,126,260),USE(glo:UserName,, ?_UserName)
      STRING('System Date'),AT(10,138),USE(?_STRING12)
      STRING(@D017b),AT(60,138,260),USE(glo:SystemDate,, ?_SystemDate)
      BUTTON('Cl&ose'),AT(119,150,48,14),USE(?_cmdClose),ICON('close.ico'), |
            TIP('Close the window'),LEFT
      BUTTON('&Copy'),AT(170,150,48,14),USE(?_cmdCopy),ICON('copy.ico'),TIP('Copy i' & |
            'nformation to clipboard'),LEFT
      BUTTON('&Send'),AT(221,150,48,14),USE(?_cmdSend),ICON('mail_send.ico'), |
            TIP('Send information by email'),LEFT
      BUTTON('&Help'),AT(272,150,48,14),USE(?_cmdHelp),ICON('help2.ico'),TIP('Copy h' & |
            'elp context string to clipboard'),LEFT
   END

   CODE
           _szServerName = INIMgr.TryFetch('DataPathSection','IP_ServerName')
           _szServerPort = INIMgr.TryFetch('DataPathSection','IP_ServerPort')

      _szProjectTarget = UPPER('%ProjectTarget')
      _szModule        = UPPER('%Module')
  #IF(%Window)
      _szContextString = %Window{PROP:Hlp}
      _szPosition    =  '(' & %Window{PROP:XPos} & ',' & %Window{PROP:YPos} & ',' & %Window{PROP:Width} & ',' & %Window{PROP:Height} & ')'
  #ELSE
      _szContextString = ''
      _szPosition      = ''
  #ENDIF
      OMIT('ENDOMIT',IPDRV)
           _szDataPath = LONGPATH(glo:DataPath)
           !ENDOMIT
           COMPILE('ENDCOMPILE',IPDRV)
      _szDataPath    =  CLIP(IPx.Exec('GetServerPath',glo:DataPath)) & '\' & INIMgr.TryFetch('DataPathSection','DataPath')
      _szDataPath[LEN(_szDataPath)] = '<0>'   !strip off trailing backslash
      !ENDCOMPILE
      _szProgramPath =  LONGPATH(glo:ProgramPath)

      _szMessageText =  'Program:<9> '                    & _szProjectTarget   & |
                        '<13,10>Module:<9,9> '            & _szModule          & |
                        '<13,10>Procedure:<9> %Procedure'                      & |
                        '<13,10>Context String:<9> '      & _szContextString   & |
                        '<13,10>Position:<9> '            & _szPosition        & |
                        '<13,10><13,10>Version:<9> '      & glo:Version        & |
                        '<13,10><13,10>Server Name:<9> '  & _szServerName      & |
                        '<13,10>Server Port:<9> '         & _szServerPort      & |
                        '<13,10>Data Path:<9> '           & _szDataPath        & |
                        '<13,10>Program Path:<9> '        & _szProgramPath     & |
                        '<13,10><13,10>User Name:<9> '    & glo:UserName       & |
                        '<13,10>System Date:<9> '         & FORMAT(glo:SystemDate,@D017b)

      _szMailBody =     'Program: '                   & _szProjectTarget   & |
                        '<37>0aModule: '              & _szModule          & |
                        '<37>0aProcedure: %Procedure'                      & |
                        '<37>0aPosition: '            & _szPosition        & |
                        '<37>0a<37>0aVersion: '       & glo:Version        & |
                        '<37>0a<37>0aServer Name: '   & _szServerName      & |
                        '<37>0aServer Port: '         & _szServerPort      & |
                        '<37>0a<37>0aData Path: '     & _szDataPath        & |
                        '<37>0aProgram Path: '        & _szProgramPath     & |
                        '<37>0a<37>0aUser Name: '     & glo:UserName       & |
                        '<37>0aSystem Date: '         & FORMAT(glo:SystemDate,@D017b)

      _szURL =          'MailTo:support@devuna.com?Subject=' & _szSubject & '&Body=' & _szMailBody

      OPEN(_winSystemInformation)
      kcr_SetWindowLong(_winSystemInformation{prop:handle},GWL_STYLE,BXOR(kcr_GetWindowLong(_winSystemInformation{prop:handle},GWL_STYLE),WS_MINIMIZEBOX))
      kcr_SetWindowLong(_winSystemInformation{prop:handle},GWL_STYLE,BOR(kcr_GetWindowLong(_winSystemInformation{prop:handle},GWL_STYLE),WS_SYSMENU))
      kcr_GetWindowRect(_winSystemInformation{prop:handle},_rc)
      kcr_InvalidateRect(_winSystemInformation{prop:handle},_rc,TRUE)
      _hRgnUpdate = kcr_CreateRectRgn(0,0,1,1)
      kcr_SendMessage(_winSystemInformation{prop:handle},WM_NCPAINT,kcr_GetUpdateRgn(_winSystemInformation{prop:handle},_hRgnUpdate,FALSE),0)
      ACCEPT
         CASE EVENT()
           OF EVENT:CloseDown
              BREAK
           OF EVENT:CloseWindow
              BREAK
           OF EVENT:Accepted
              CASE ACCEPTED()
                OF ?_cmdClose
                   POST(EVENT:CloseWindow)
                OF ?_cmdCopy
                   SETCLIPBOARD(_szMessageText)
                   POST(EVENT:CloseWindow)
                OF ?_cmdSend
  #IF(%Window)
                   kcr_ShellExecute(%Window{prop:handle},0,_szURL,0,_szNull,1)
  #ELSE
                   kcr_ShellExecute(0{prop:handle},0,_szURL,0,_szNull,1)
  #ENDIF
                   POST(EVENT:CloseWindow)
                OF ?_cmdHelp
  #IF(%Window)
                   SETCLIPBOARD(%Window{PROP:Hlp})
  #ENDIF
                   POST(EVENT:CloseWindow)
              END
         END
      END
      CLOSE(_winSystemInformation)
      EXIT
#ENDAT
#!
#!
#AT(%ProcedureRoutines),DESCRIPTION('Application Colors Code'),WHERE(%Window AND ~%DisableApplicationColors)
!----------------------------------------------------------------------------
SetApplicationColors    ROUTINE
  #EMBED(%BeforeSetApplicationColors,'Before Setting Application Color Scheme')
  #SET(%ThisColor,EXTRACT(%WindowStatement,'COLOR',1))
  #SET(%ThisWallpaper,EXTRACT(%WindowStatement,'WALLPAPER',1))
  #IF(%ThisColor='' AND %ThisWallpaper='')
    #CASE(UPPER(%ProcedureCategory))
    #OF('BROWSE')
   %Window{PROP:Background} = glo:BrowseColor
    #OF('FORM')
   %Window{PROP:Background} = glo:FormColor
    #ELSE
      #IF(UPPER(%ProcedureTemplate) = 'FRAME')
   %Window{PROP:Background} = CHOOSE(glo:Theme='None',COLOR:NONE,CHOOSE(glo:WindowColor <> glo:BrowseColor,glo:WindowColor,glo:PanelColor))
      #ELSE
   %Window{PROP:Background} = CHOOSE(glo:Theme='None',COLOR:NONE,glo:FormColor)
      #ENDIF
    #ENDCASE
  #ENDIF
  #!
  #!
  COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
   IF glo:Typeface <> ''
      %Window{PROP:FontName} = glo:Typeface
  #!
  #!
  #FOR(%Control),WHERE(%Control<>'')
    #SET(%ThisPointer,INSTRING('.',%Control))
    #IF(%ThisPointer)
       #SET(%ThisControl,SLICE(%Control,1,%ThisPointer-1) & ':' & SLICE(%Control,%ThisPointer+1,LEN(%Control)))
    #ELSE
       #SET(%ThisControl,%Control)
    #ENDIF
    #CASE(%ControlType)
    #OF('STRING')
    #OROF('ENTRY')
    #OROF('BUTTON')
    #OROF('PROMPT')
    #OROF('OPTION')
    #OROF('CHECK')
    #OROF('GROUP')
    #OROF('LIST')
    #OROF('COMBO')
    #OROF('SPIN')
    #OROF('TEXT')
    #OROF('RADIO')
    #OROF('DROPLIST')
    #OROF('DROPCOMBO')
    #OROF('SHEET')
    #OROF('TAB')
      #SET(%ThisTypeface,EXTRACT(%ControlStatement,'FONT',1))
      #IF(%ThisTypeface)
         #IF(%ThisTypeface = '''Segoe UI Semilight''')
      %ThisControl{PROP:FontName} = glo:Typeface
         #ENDIF
      #ELSE
      %ThisControl{PROP:FontName} = glo:Typeface
      #ENDIF
    #ENDCASE
  #ENDFOR
   END
  !***ENDCOMPILE***
  #!
  #!
  #FOR(%Control),WHERE(%ControlType <> 'BUTTON')
    #SET(%ThisPointer,INSTRING('.',%Control))
    #IF(%ThisPointer)
       #SET(%ThisControl,SLICE(%Control,1,%ThisPointer-1) & ':' & SLICE(%Control,%ThisPointer+1,LEN(%Control)))
    #ELSE
       #SET(%ThisControl,%Control)
    #ENDIF
    #CASE(%ControlType)
    #OF('TOOLBAR')
      #!IF(%UseDefaultXPManifest)
   %ThisControl{PROP:Wallpaper} = ''
   %ThisControl{PROP:Color} = glo:PanelColor
      #!ENDIF
    #OF('PROMPT')
      #IF(%Control)
        #SET(%ThisColor,EXTRACT(%ControlStatement,'FONT',3))
        #IF(NOT %ThisColor)
   %ThisControl{PROP:TRN} = TRUE
   %ThisControl{PROP:FontColor} = glo:PromptColor
        #ENDIF
      #ENDIF
    #!
    #!
    #OF('STRING')
      #IF(%Control)
        #SET(%ThisColor,EXTRACT(%ControlStatement,'FONT',3))
        #IF(NOT %ThisColor)
   %ThisControl{PROP:TRN} = TRUE
   %ThisControl{PROP:FontColor} = glo:StringColor
        #ENDIF
      #ENDIF
    #!
    #!
    #OF('RADIO')
    #OROF('CHECK')
      #IF(%Control)
        #SET(%ThisColor,EXTRACT(%ControlStatement,'FONT',3))
        #IF(NOT %ThisColor)
          #IF(NOT %UseDefaultXPManifest)
   %ThisControl{PROP:FontColor} = glo:PromptColor
          #ENDIF
          #SET(%ThisColor,EXTRACT(%ControlStatement,'COLOR',1))
#!        #IF(%UseDefaultXPManifest)
          #IF(%ForceSHEETNoTheme)
            #IF(%IsOnPanel(%Control))
            #! TODO: if the panel has a color then use that instead of glo:PanelColor
   %ThisControl{PROP:TRN} = FALSE
              #IF(NOT %ThisColor)
   %ThisControl{PROP:Color} = glo:PanelColor
              #ENDIF
            #ELSIF(%IsOnSheet(%Control))
   %ThisControl{PROP:TRN} = FALSE
              #IF(NOT %ThisColor)
   %ThisControl{PROP:Color} = glo:SheetColor
              #ENDIF
            #ELSE
              #IF(NOT %ThisColor)
                #CASE(UPPER(%ProcedureCategory))
                #OF('BROWSE')
   %ThisControl{PROP:Color} = glo:BrowseColor
                #OF('FORM')
   %ThisControl{PROP:Color} = glo:FormColor
                #ELSE
                  #IF(UPPER(%ProcedureTemplate) <> 'FRAME')
   %ThisControl{PROP:Color} = COLOR:WINDOW
                  #ELSE
   ! %ThisControl is on the application frame window - no colour change
                  #ENDIF
                #ENDCASE
              #ENDIF
            #ENDIF
          #ELSE
   %ThisControl{PROP:TRN} = TRUE
          #ENDIF
        #ENDIF
      #ENDIF
    #!
    #!
    #OF('OPTION')
    #OROF('GROUP')
      #IF(%Control)
        #SET(%ThisColor,EXTRACT(%ControlStatement,'FONT',3))
        #IF(NOT %ThisColor)
#!        #IF(%UseDefaultXPManifest)
          #IF(%ForceSHEETNoTheme)
   %ThisControl{PROP:TRN} = FALSE
             #IF(%IsOnPanel(%Control))
             #! TODO: if the panel has a color then use that instead of glo:PanelColor
   %ThisControl{PROP:Color} = glo:PanelColor
             #ELSIF(%IsOnSheet(%Control))
   %ThisControl{PROP:Color} = glo:SheetColor
             #ELSE
                #CASE(UPPER(%ProcedureCategory))
                #OF('BROWSE')
   %ThisControl{PROP:Color} = glo:BrowseColor
                #OF('FORM')
   %ThisControl{PROP:Color} = glo:FormColor
                #ELSE
                  #IF(UPPER(%ProcedureTemplate) <> 'FRAME')
   %ThisControl{PROP:Color} = COLOR:WINDOW
                  #ELSE
   ! %ThisControl is on the application frame window - no colour change
                  #ENDIF
                #ENDCASE
             #ENDIF
          #ELSE
   %ThisControl{PROP:TRN} = TRUE
          #ENDIF
        #ENDIF
      #ENDIF
    #!
    #!
    #OF('BUTTON')
   IF glo:TransparentButtons
    #IF(EXTRACT(%ControlStatement,'TRN') OR EXTRACT(%ControlStatement,'FLAT'))
      ! %ThisControl is already transparent or flat
    #ELSE
      %ThisControl{PROP:TRN} = TRUE
   ELSE
      %ThisControl{PROP:TRN} = FALSE
    #ENDIF
   END
    #!
    #!
    #OF('PANEL')
    #OROF('BOX')
      #SET(%ThisColor,EXTRACT(%ControlStatement,'FILL',1))
      #IF(NOT %ThisColor)
   IF %ThisControl{prop:width} > 4 AND %ThisControl{prop:height} > 4
      %ThisControl{PROP:Fill} = glo:PanelColor
   END
      #ENDIF
    #!
    #!
    #OF('SHEET')
    #OROF('TAB')
      #SET(%ThisColor,EXTRACT(%ControlStatement,'COLOR',1))
      #IF(NOT %ThisColor)
   %ThisControl{PROP:Color} = glo:SheetColor
        #IF(NOT %UseDefaultXPManifest)
   %ThisControl{PROP:FontColor} = glo:PromptColor
        #ENDIF
      #ENDIF
    #!
    #!
    #OF('ENTRY')
    #OROF('SPIN')
    #OROF('TEXT')
      #SET(%ThisColor,EXTRACT(%ControlStatement,'COLOR',1))
      #IF(NOT %ThisColor)
   %ThisControl{PROP:Background} = COLOR:WINDOW
   %ThisControl{PROP:SelectedFillColor} = glo:BackSelectedColor
      #ENDIF
    #!
    #!
    #OF('LIST')
    #OROF('COMBO')
      #SET(%ThisColor,EXTRACT(%ControlStatement,'COLOR',1))
      #IF(NOT %ThisColor)
   %ThisControl{PROP:FontColor} = glo:TextColor
   %ThisControl{PROP:Background} = glo:BackColor
   %ThisControl{PROP:SelectedColor} = glo:TextSelectedColor
   %ThisControl{PROP:SelectedFillColor} = glo:BackSelectedColor
      #ENDIF
    #ENDCASE
  #ENDFOR

   IF glo:Theme = 'None'
      ! Do Nothing
   ELSE
      IF glo:TransparentButtons
  #FOR(%Control),WHERE(%ControlType = 'BUTTON')
    #SET(%ThisPointer,INSTRING('.',%Control))
    #IF(%ThisPointer)
       #SET(%ThisControl,SLICE(%Control,1,%ThisPointer-1) & ':' & SLICE(%Control,%ThisPointer+1,LEN(%Control)))
    #ELSE
       #SET(%ThisControl,%Control)
    #ENDIF
    #IF(EXTRACT(%ControlStatement,'TRN') OR EXTRACT(%ControlStatement,'FLAT'))
         ! %ThisControl is already transparent or flat
    #ELSE
         %ThisControl{PROP:TRN} = TRUE
    #ENDIF
  #ENDFOR
      ELSE
  #FOR(%Control),WHERE(%ControlType = 'BUTTON')
    #SET(%ThisPointer,INSTRING('.',%Control))
    #IF(%ThisPointer)
       #SET(%ThisControl,SLICE(%Control,1,%ThisPointer-1) & ':' & SLICE(%Control,%ThisPointer+1,LEN(%Control)))
    #ELSE
       #SET(%ThisControl,%Control)
    #ENDIF
         %ThisControl{PROP:TRN} = FALSE
  #ENDFOR
      END
   END
  #!
  #EMBED(%AfterSetApplicationColors,'After Setting Application Color Scheme')
  EXIT
!----------------------------------------------------------------------------
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(600),DESCRIPTION('Thread Manager Code'),WHERE(~%DisableApplicationColors)
glo:ThreadQueueLock.Wait()
glo:ThreadQueue.ProcThread = THREAD()
GET(glo:ThreadQueue,+glo:ThreadQueue.ProcThread)
IF ERRORCODE()
  glo:ThreadQueue.ProcName = '%Procedure'
  glo:ThreadQueue.ProcThread = THREAD()
  glo:ThreadQueue.ProcCount = 1
  ADD(glo:ThreadQueue,+glo:ThreadQueue.ProcThread)
ELSE
  glo:ThreadQueue.ProcCount += 1
  PUT(glo:ThreadQueue)
END
glo:ThreadQueueLock.Release()
#ENDAT
#!
#!
#AT(%WindowManagerMethodDataSection,'Init','(),BYTE'),DESCRIPTION('Application Colors Code'),WHERE(~%DisableApplicationColors)
  #SET(%ThisIcon,EXTRACT(%WindowStatement,'ICON',1))
  #!IF(NOT %ThisIcon)
rc                   LIKE(RECT)
hRgnUpdate           HRGN
  #!ENDIF
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),DESCRIPTION('Application Colors Code'),PRIORITY(8010),WHERE(~%DisableApplicationColors)
!----------------------------------------------------------------------
! Set Window Properties
!----------------------------------------------------------------------
  #SET(%ThisIcon,EXTRACT(%WindowStatement,'ICON',1))
  #IF(NOT %ThisIcon)
    #IF(%DefaultWindowIcon)
      #IF(SUB(%DefaultWindowIcon,1,1) = '~')
%Window{PROP:Icon} = '%DefaultWindowIcon'
      #ELSE
%Window{PROP:Icon} = '~%DefaultWindowIcon'
      #ENDIF
    #ELSE
      #IF(UPPER(%ProcedureTemplate) <> 'FRAME')
%Window{PROP:Icon} = '~Metro.ico'
      #ENDIF
    #ENDIF
  #ENDIF
  #IF(UPPER(%ProcedureTemplate) <> 'FRAME')
kcr_SetWindowLong(%Window{prop:handle},GWL_STYLE,BXOR(kcr_GetWindowLong(%Window{prop:handle},GWL_STYLE),WS_MINIMIZEBOX))
kcr_SetWindowLong(%Window{prop:handle},GWL_STYLE,BOR(kcr_GetWindowLong(%Window{prop:handle},GWL_STYLE),WS_SYSMENU))
kcr_GetWindowRect(%Window{prop:handle},rc)
kcr_InvalidateRect(%Window{prop:handle},rc,TRUE)
hRgnUpdate = kcr_CreateRectRgn(0,0,1,1)
kcr_SendMessage(%Window{prop:handle},WM_NCPAINT,kcr_GetUpdateRgn(%Window{prop:handle},hRgnUpdate,FALSE),0)
  #ENDIF
DO SetApplicationColors
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(8500),DESCRIPTION('Thread Manager Code'),WHERE(~%DisableApplicationColors)
glo:ThreadQueueLock.Wait()
glo:ThreadQueue.ProcThread = THREAD()
GET(glo:ThreadQueue,+glo:ThreadQueue.ProcThread)
IF ~ERRORCODE()
   glo:ThreadQueue.ProcCount -= 1
   IF glo:ThreadQueue.ProcCount = 0
      DELETE(glo:ThreadQueue)
   ELSE
      PUT(glo:ThreadQueue)
   END
END
glo:ThreadQueueLock.Release()
#ENDAT
#!
#!
#AT(%WindowManagerMethodDataSection,'TakeEvent','(),BYTE'),DESCRIPTION('Application Colors Code'),WHERE(~%DisableApplicationColors)
  #IF(%Procedure = %FirstProcedure)
Indx        LONG
  #ENDIF
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(6300),DESCRIPTION('Application Colors Code'),WHERE(~%DisableApplicationColors)
  IF ReturnValue THEN RETURN ReturnValue.
  CASE EVENT()
  OF EVENT:ColorsChanged
    #IF(%Procedure = %FirstProcedure)
     glo:ThreadQueueLock.Wait()
     LOOP Indx = 1 TO RECORDS(glo:ThreadQueue)
        GET(glo:ThreadQueue,Indx)
        IF glo:ThreadQueue.ProcThread <> THREAD()
           POST(EVENT:ColorsChanged,,glo:ThreadQueue.ProcThread)
        END
     END
     glo:ThreadQueueLock.Release()
     DO SetApplicationColors
     DISPLAY()
    #ELSE
     DO SetApplicationColors
    #ENDIF
  END
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Run','(USHORT Number,BYTE Request),BYTE'),PRIORITY(9000),DESCRIPTION('Application Colors Code'),WHERE(~%DisableApplicationColors)
DO SetApplicationColors
#ENDAT
#!
#!
#GROUP(%IsOnPanel,%AControl)
#DECLARE(%Rval)
#DECLARE(%ControlX)
#DECLARE(%ControlY)
#DECLARE(%ControlW)
#DECLARE(%ControlH)
#DECLARE(%PanelX)
#DECLARE(%PanelY)
#DECLARE(%PanelW)
#DECLARE(%PanelH)
#SET(%RVal,%FALSE)
#FIX(%Control,%AControl)
#SET(%ControlX,EXTRACT(%ControlStatement,'AT',1))
#SET(%ControlY,EXTRACT(%ControlStatement,'AT',2))
#SET(%ControlW,EXTRACT(%ControlStatement,'AT',3))
#SET(%ControlH,EXTRACT(%ControlStatement,'AT',4))
#FOR(%Control),WHERE(%ControlType = 'PANEL')
  #SET(%PanelX,EXTRACT(%ControlStatement,'AT',1))
  #SET(%PanelY,EXTRACT(%ControlStatement,'AT',2))
  #SET(%PanelW,EXTRACT(%ControlStatement,'AT',3))
  #SET(%PanelW,%PanelW+%PanelX)
  #SET(%PanelH,EXTRACT(%ControlStatement,'AT',4))
  #SET(%PanelH,%PanelH+%PanelY)
  #IF(INRANGE(%ControlX,%PanelX,%PanelW) AND INRANGE(%ControlY,%PanelY,%PanelH))
     #SET(%RVal,%TRUE)
  #ENDIF
#ENDFOR
#RETURN(%RVal)
#!
#!
#GROUP(%IsOnSheet,%AControl)
#DECLARE(%Rval)
#DECLARE(%ControlX)
#DECLARE(%ControlY)
#DECLARE(%ControlW)
#DECLARE(%ControlH)
#DECLARE(%PanelX)
#DECLARE(%PanelY)
#DECLARE(%PanelW)
#DECLARE(%PanelH)
#SET(%RVal,%FALSE)
#FIX(%Control,%AControl)
#SET(%ControlX,EXTRACT(%ControlStatement,'AT',1))
#SET(%ControlY,EXTRACT(%ControlStatement,'AT',2))
#SET(%ControlW,EXTRACT(%ControlStatement,'AT',3))
#SET(%ControlH,EXTRACT(%ControlStatement,'AT',4))
#FOR(%Control),WHERE(%ControlType = 'SHEET')
  #SET(%PanelX,EXTRACT(%ControlStatement,'AT',1))
  #SET(%PanelY,EXTRACT(%ControlStatement,'AT',2))
  #SET(%PanelW,EXTRACT(%ControlStatement,'AT',3))
  #SET(%PanelW,%PanelW+%PanelX)
  #SET(%PanelH,EXTRACT(%ControlStatement,'AT',4))
  #SET(%PanelH,%PanelH+%PanelY)
  #IF(INRANGE(%ControlX,%PanelX,%PanelW) AND INRANGE(%ControlY,%PanelY,%PanelH))
     #SET(%RVal,%TRUE)
  #ENDIF
#ENDFOR
#RETURN(%RVal)
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetQueryVisualColors,'Query Visual Use Application Colors'),PROCEDURE,REQ(BrowseQBEButton(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SetQueryVisualColors (Devuna)','Query Visual Use Application Colors')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #PROMPT('Window Icon:',OPENDIALOG('Pick an Icon','ICON Files|*.ICO')),%QueryVisualWindowIcon
  #PROMPT('Window Caption:',@S64),%QueryVisualWindowCaption
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%QBEVisualMethodDataSection,%ActiveTemplateParentInstance,'Init','(),BYTE'),PRIORITY(5000),DESCRIPTION('Query Visual Application Colors')
szIconName          CSTRING(32)
I                   BYTE
#ENDAT
#!
#!
#AT(%QBEVisualMethodCodeSection,%ActiveTemplateParentInstance,'Init','(),BYTE'),PRIORITY(7500),DESCRIPTION('Query Visual Application Colors')
#IF(%QueryVisualWindowIcon)
szIconName = '%QueryVisualWindowIcon'
I = INSTRING('.',szIconName)
szIconName[I] = '_'
SetClassLong(SELF.QFC.Window{PROP:Handle},GCL_HICONx,LoadIcon(SYSTEM{PROP:AppInstance},szIconName))

#ENDIF
SELF.QFC.Window{PROP:Double} = TRUE
#IF(%QueryVisualWindowCaption)
SELF.QFC.Window{PROP:Text} = '%QueryVisualWindowCaption'
#END
SELF.QFC.Window{PROP:Color} = glo:BrowseColor   !0C08080H
SELF.QFC.Window{PROP:Height} = SELF.QFC.Window{PROP:Height} - 2

FEQ:SheetControl{PROP:Color} = glo:SheetColor   !0DDBBBBH

FEQ:ListBox{PROP:FontColor} = glo:TextColor
FEQ:ListBox{PROP:Background} = glo:BackColor
FEQ:ListBox{PROP:SelectedColor} = glo:TextSelectedColor
FEQ:ListBox{PROP:SelectedFillColor} = glo:BackSelectedColor

FEQ:SaveListBox{PROP:FontColor} = glo:TextColor
FEQ:SaveListBox{PROP:Background} = glo:BackColor
FEQ:SaveListBox{PROP:SelectedColor} = glo:TextSelectedColor
FEQ:SaveListBox{PROP:SelectedFillColor} = glo:BackSelectedColor

FEQ:QueryNameField{PROP:Color} = COLOR:WHITE

FEQ:Insert{Prop:Text} = '&New'
FEQ:Change{Prop:Text} = '&Edit'
FEQ:Delete{Prop:Text} = '&Delete'
#ENDAT
#!
#!
#AT(%QBEVisualMethodCodeSection,%ActiveTemplateParentInstance,'TakeWindowEvent','(),BYTE'),PRIORITY(5001),DESCRIPTION('Query Visual Application Colors')
case event()
OF EVENT:openwindow
  FEQ:ListBox{prop:yPos} = FEQ:ListBox{prop:yPos} + 4
  FEQ:ListBox{prop:height} = FEQ:ListBox{prop:height} - 4

  FEQ:SaveListBox{prop:xPos} = FEQ:ListBox{prop:xPos}
  FEQ:SaveListBox{prop:width} = FEQ:ListBox{prop:width}
  FEQ:SaveListBox{prop:yPos} = FEQ:SaveListBox{prop:yPos} + 4
  FEQ:SaveListBox{prop:height} = FEQ:SaveListBox{prop:height} - 4
end
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SaveRestoreListboxFormat,'Save and Restore Listbox Format'),PROCEDURE,REQ(BrowseBox(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_KCR_SaveRestoreListboxFormat (Devuna)','Save and Restore Listbox Format')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension template adds code to save and restore'),AT(10)
  #DISPLAY ('the listbox format string'),AT(10)
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%DataSection),PRIORITY(3000)
  #SET(%ValueConstruct,%InstancePrefix&':Format')
%[20]ValueConstruct CSTRING(256)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8310),AUTO,DESCRIPTION('Restore listbox format')
  #SET(%ValueConstruct,%InstancePrefix&':Format')
%ValueConstruct = %ListControl{PROP:Format}
INIMgr.Fetch('%Procedure','%ValueConstruct',%ValueConstruct)
%ListControl{PROP:Format} = %ValueConstruct
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(7510),AUTO,DESCRIPTION('Save listbox format')
  #SET(%ValueConstruct,%InstancePrefix&':Format')
%ValueConstruct = %ListControl{PROP:Format}
INIMgr.Update('%Procedure','%ValueConstruct',%ValueConstruct)
#ENDAT
#!
#!
#!
#!
#!---------------------------------------------------------------------
#EXTENSION(KCR_DefineFiles,'Define Specific Files'),APPLICATION,FIRST
#!---------------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_DefineFiles','Define Specific Files')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension template adds code to'),AT(10)
  #DISPLAY ('define specified files from the dictionary.'),AT(10)
  #DISPLAY ('All normal file references are removed and'),AT(10)
  #DISPLAY ('no relation management code is generated.'),AT(10)
  #DISPLAY ('')
  #PROMPT ('Create FileManager Classes',CHECK),%CreateClasses,DEFAULT(%TRUE),AT(10)
  #PROMPT ('Select File to Define:',FILE),%FileToDefine,MULTI('Defined Files'),INLINE
  #DISPLAY ('')
#!
#!
#ENDBOXED
#!
#!
#ATSTART
#FOR(%FileToDefine)
  #FIX(%File,%FileToDefine)
  #FIX(%Driver,%FileDriver)
  #PROJECT(%DriverLib)
#ENDFOR
#ENDAT
#!
#!
#AT(%BeforeFileDeclarations)
#FOR(%File)
  #SET(%CacheFileUsed,0)
#ENDFOR
#PURGE(%UsedFile)
#SET(%CacheBCModulesNeeded,0)
#CALL(%GenerateFileDeclarations)

#IF(%CreateClasses)
#CALL(%GenerateFileManagers)
#ENDIF
#ENDAT
#!
#!
#AT(%ProgramProcedures)
#FOR(%Category)
  #SET(%CategoryDLLInit,'')
  #SET(%CategoryDllKill,'')
#ENDFOR
  #IF(%CreateClasses)
    #FOR(%FileToDefine)
Access:%FileToDefine.Init   PROCEDURE(File File,ErrorClass EC)
  CODE
  PARENT.Init(File,EC)
      #FIX(%File,%FileToDefine)
  SELF.Buffer &= %FilePrefix:Record
  SELF.LazyOpen = FALSE
      #FOR(%Key)
        #IF(%KeyAuto)
  SELF.AddKey(%Key,'%KeyDescription',1)
        #ELSE
  SELF.AddKey(%Key,'%KeyDescription')
        #ENDIF
      #ENDFOR
  RETURN

    #ENDFOR
  #ENDIF
#ENDAT
#!
#!
#AT(%AfterCategoryDLLInitCode),PRIORITY(7900)
  #IF(%CreateClasses)
    #FREE(%UsedFile)
    #FOR(%FileToDefine)
Access:%FileToDefine.SetErrors(GlobalErrors)
    #ENDFOR
  #ENDIF
#ENDAT
#!
#!
#AT(%AfterDctInitialization)
  #IF(%CreateClasses)
!Start Devuna Initialize Global Objects -----------------------------
    #FOR(%FileToDefine)
Access:%FileToDefine.Init(%FileToDefine,GlobalErrors)
Relate:%FileToDefine.Init(Access:%FileToDefine)
    #ENDFOR
!End Devuna Initialize Global Objects -------------------------------
  #ENDIF
#ENDAT
#!
#!
#AT(%AfterDctDestruction)
  #IF(%CreateClasses)
!Start Devuna CleanUp Global Objects --------------------------------
    #FOR(%FileToDefine)
Relate:%FileToDefine.Kill()
Access:%FileToDefine.Kill()
    #ENDFOR
!End Devuna CleanUp Global Objects ----------------------------------
  #ENDIF
#ENDAT
#!
#!
#!---------------------------------------------------------------------
#GROUP(%GenerateFileManagers)
#!---------------------------------------------------------------------
#FOR(%FileToDefine)
  #SET(%ValueConstruct,'Access:' & %FileToDefine)
%20ValueConstruct CLASS(FileManager)
Init                   PROCEDURE(File File,ErrorClass EC),VIRTUAL
                     END
  #SET(%ValueConstruct,'Relate:' & %FileToDefine)
%20ValueConstruct RelationManager

#ENDFOR
#!
#!
#!
#!
#!---------------------------------------------------------------------
#GROUP(%GenerateFileDeclarations)
#!---------------------------------------------------------------------
#FOR(%FileToDefine)
#FIX(%File,%FileToDefine)
#EMBED(%BeforeFileDeclaration,''),%File,HIDE
#MESSAGE('File Structure: ' & %File,3)
%[20]File %(%GetFileStructHeader())
    #FOR(%Key)
%KeyStruct
    #ENDFOR
    #FOR(%Field),WHERE(%FieldType = 'MEMO')
%FieldStruct
    #ENDFOR
    #FOR(%Field),WHERE(%FieldType = 'BLOB')
%FieldStruct
    #ENDFOR
%FileStructRec,PRE()
  #FOR(%Field),WHERE(%FieldType <> 'MEMO' AND %FieldType <> 'BLOB')
%FieldStruct
  #ENDFOR
%FileStructRecEnd
%[20]NULL %(LEFT(%FileStructEnd))

#ENDFOR
#!
#!
#!---------------------------------------------------------------------
#GROUP(%GetFileStructHeader),AUTO
#!---------------------------------------------------------------------
  #EQUATE(%DeclareMode, 'FILE')
  #EQUATE(%RVal,CLIP(LEFT(SLICE(%FileStruct,INSTRING(' ',%FileStruct,1,1),LEN(%FileStruct)))))
  #CALL(%AppendAttr, %RVal, 'CREATE')
  #CALL(%AppendAttr, %RVal, 'BINDABLE', %True)
  #CALL(%AppendAttr, %Rval, 'THREAD')
  #EMBED(%EndOfGetFileStructHeader,''),%File,HIDE
  #RETURN(%RVal)
#!
#!
#!---------------------------------------------------------------------
#GROUP(%AppendAttr, *%Trgt, %Attr, %Check = %False)
#!---------------------------------------------------------------------
  #IF(~%Check OR (%Check AND ~EXTRACT(%Trgt, %Attr)))
    #SET(%Trgt, %Trgt & ',' & %Attr)
  #ENDIF
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ColouredMenuGlobal,'Coloured Menu Bar Global'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ColouredMenuGlobal (Devuna)','Coloured Menu Bar Global')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('Adds required global data to support coloured menus'),AT(10)
  #DISPLAY ('There are no prompts for this template')
  #DISPLAY ('')
  #BOXED('Hidden Prompts'),HIDE
  #PROMPT('',@N1),%DevunaApiPresent,DEFAULT(%FALSE)
  #ENDBOXED
#ENDBOXED
#!
#!
#ATSTART
  #PROJECT('Library(USER32.LIB),CopyToOutputDirectory=Never')
  #FOR(%ApplicationTemplate),WHERE(%ApplicationTemplate = 'KCR_Win32(KCR)')
    #SET(%DevunaApiPresent,%TRUE)
    #BREAK
  #ENDFOR
#ENDAT
#!
#!
#AT(%GlobalMap),WHERE(NOT %DevunaApiPresent)
MODULE('USER32')
   kcr_CreateSolidBrush(COLORREF),HBRUSH,PASCAL,NAME('CreateSolidBrush')
   kcr_GetMenuInfo(UNSIGNED hMenu, *MENUINFO lpmi),BOOL,RAW,PASCAL,PROC,NAME('GetMenuInfo')
   kcr_SetMenuInfo(UNSIGNED hMenu, *MENUINFO lpmi),BOOL,RAW,PASCAL,PROC,NAME('SetMenuInfo')
END
#ENDAT
#!
#!
#AT(%AfterGlobalIncludes),PRIORITY(4000)
!MENUINFO        GROUP,TYPE
!cbSize            UNSIGNED
!fMask             UNSIGNED
!dwStyle           UNSIGNED
!cyMax             UNSIGNED
!hbrBack           UNSIGNED
!dwContextHelpID   UNSIGNED
!dwMenuData        UNSIGNED
!                END

MIM_MAXHEIGHT       EQUATE(000000001h)
MIM_BACKGROUND      EQUATE(000000002h)
MIM_HELPID          EQUATE(000000004h)
MIM_MENUDATA        EQUATE(000000008h)
MIM_STYLE           EQUATE(000000010h)
MIM_APPLYTOSUBMENUS EQUATE(080000000h)
#ENDAT
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_ColouredMenu,'Coloured Menu Bar'),PROCEDURE,REQ(KCR_ColouredMenuGlobal)
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_ColouredMenu (Devuna)','Coloured Menu Bar')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('Adds code to set the main menu bar background colour'),AT(10)
  #DISPLAY ('')
  #PROMPT('&Background Colour:',COLOR),%BackgroundColour,DEFAULT(0F9DAC3H)
  #PROMPT('&Apply to SubMenus',CHECK),%ApplyToSubMenus,AT(10),DEFAULT(0)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%WindowManagerMethodDataSection,'Init','(),BYTE'),PRIORITY(5000),DESCRIPTION('Coloured Menu Bar')
hm  UNSIGNED
hr  UNSIGNED
mi  LIKE(MENUINFO),PRE()
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8001),DESCRIPTION('Coloured Menu Bar')
hm = kcr_GetMenu(%Window{PROP:Handle})
IF hm
   mi.cbSize = SIZE(mi)
   #IF(%ApplyToSubMenus)
   mi.fMask = MIM_BACKGROUND + MIM_MAXHEIGHT + MIM_APPLYTOSUBMENUS
   #ELSE
   mi.fMask = MIM_BACKGROUND + MIM_MAXHEIGHT
   #END
   hr = kcr_GetMenuInfo(hm,mi)
   mi.hbrBack = kcr_CreateSolidBrush(%BackgroundColour)
   hr = kcr_SetMenuInfo(hm,mi)
END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_PopupSort,'Popup Sort Order'),WINDOW,REQ(BrowseBox(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_PopupSort (Devuna)','Popup Sort Order')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('Adds Sort Order selections to the listbox popup menu.'),AT(10)
  #DISPLAY ('')
  #PROMPT('First Event:',@S20),%FirstEvent,DEFAULT('EVENT:User')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
#DECLARE(%LastPopupName)
#DECLARE(%PopupName)
#DECLARE(%PopupEvent)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(1300)
  #IF(ITEMS(%BrowseAccessID) > 1)
CASE EVENT()
    #FOR(%BrowseAccessID)
      #SET(%PopupEvent,%BrowseAccessID-1)
      #IF(%BrowseAccessID = 1)
OF %FirstEvent
      #ELSE
OF %FirstEvent + %PopupEvent
      #ENDIF
   %ManagerName.SetSort(%BrowseAccessID,TRUE)
   RETURN(Level:Benign)
    #ENDFOR
END
  #ENDIF
#ENDAT
#!
#!
#AT(%BrowserMethodCodeSection,%ActiveTemplateParentInstance,'SetAlerts','()'),PRIORITY(4999)
SELF.Popup.AddItem('Sort By ...','Sort')
SELF.Popup.AddItem('-','Separator1')
#ENDAT
#!
#!
#AT(%BrowserMethodCodeSection,%ActiveTemplateParentInstance,'SetAlerts','()'),PRIORITY(5001)
  #IF(ITEMS(%BrowseAccessID) > 1)
    #FIX(%File,%Primary)
    #FOR(%BrowseAccessID)
      #SET(%PopupEvent,%BrowseAccessID-1)
      #SET(%PopupName,'Sort' & %BrowseAccessID)
      #IF(%BrowseAccessID = 1)
        #FIX(%Key,%BrowseKey)
SELF.Popup.AddItem('%KeyDescription','%PopupName','Sort',2)
SELF.Popup.AddItemEvent('%PopupName',%FirstEvent)
      #ELSIF(%BrowseAccessID = ITEMS(%BrowseAccessID))
        #FIX(%Key,%PrimaryKey)
SELF.Popup.AddItem('%KeyDescription','%PopupName','%LastPopupName',2)
SELF.Popup.AddItemEvent('%PopupName',%FirstEvent + %PopupEvent)
      #ELSE
        #FIX(%Key,%BrowseKey)
SELF.Popup.AddItem('%KeyDescription','%PopupName','%LastPopupName',2)
SELF.Popup.AddItemEvent('%PopupName',%FirstEvent + %PopupEvent)
      #ENDIF
      #SET(%LastPopupName,%PopupName)
    #ENDFOR
  #ENDIF
#ENDAT
#!
#!
#AT(%BeforeControlRefresh,%ActiveTemplateParentInstance),PRIORITY(2500),FIRST
OMIT('***PopupSort***')
#ENDAT
#!
#!
#AT(%AfterControlRefresh,,%ActiveTemplateParentInstance),PRIORITY(2500),LAST
!***PopupSort***
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_RestoreAllFields,'Restore All Fields History Key'),WINDOW,REQ(SaveButton(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_RestoreAllFields (Devuna)','Restore All Fields History Key')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('Adds HotKey to restore all history fields.'),AT(10)
  #DISPLAY ('')
  #PROMPT('All History Key',KEYCODE),%RestoreAllHotKey,DEFAULT('ShiftF3')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%WindowManagerMethodCodeSection,'SetAlerts','()'),PRIORITY(7500),WHERE(%HistoryKey)
%Window{PROP:Alrt,255} = %RestoreAllHotKey
#ENDAT
#!
#!
#AT(%WindowManagerMethodDataSection,'TakeEvent','(),BYTE'),PRIORITY(8500),WHERE(%HistoryKey)
_Ctrl   LONG,AUTO
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(3800),WHERE(%HistoryKey)
  CASE EVENT()
  OF EVENT:AlertKey
     IF SELF.HistoryKey AND KEYCODE() = %RestoreAllHotKey
        LOOP _Ctrl = FIRSTFIELD() TO LASTFIELD()
           SELF.RestoreField(_Ctrl)
        END
        RETURN(Level:Benign)
     END
  END
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetFileModifyFields,'Set File Modify Date, Time and User Fields'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SetFileModifyFields (Devuna)','Set File Modify Date, Time and User Fields')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('Adds code to set file ModifyDate, ModifyTime and ModifyUser fields.'),AT(10)
  #DISPLAY ('Also adds code to handle faitm cleanup.'),AT(10)
  #DISPLAY ('')
  #PROMPT('&Do Not Generate Any Code',CHECK),%DoNotGenerate,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#RESTRICT
  #IF(%GlobalExternal = %False)
    #ACCEPT
  #ELSE
    #REJECT
  #ENDIF
#ENDRESTRICT
#!
#!
#ATSTART
  #DECLARE(%FileToSet),MULTI,UNIQUE
  #FOR(%File)
    #FOR(%Field),WHERE(UPPER(%FieldID) = 'DATEMODIFIED')
      #ADD(%FileToSet,%File)
      #BREAK
    #ENDFOR
  #ENDFOR
#ENDAT
#!
#!
#!AT(%FileManagerCodeSection,,'PrimeFields','()'),PRIORITY(4500),WHERE(NOT %DoNotGenerate)
#AT(%FileManagerCodeSection,,'TryInsert','(),BYTE'),PRIORITY(4500),WHERE(NOT %DoNotGenerate)
  #SUSPEND
    #FIX(%FileToSet,%File)
    #IF(%FileToSet)
      #RELEASE
      #FOR(%Field)
        #CASE(UPPER(%FieldID))
        #OF('CREATEDATE')
%Field = TODAY()                       #<! Assign initial field value
        #OF('CREATETIME')
%Field = CLOCK()                       #<! Assign initial field value
        #OF('CREATEUSER')
%Field = glo:UserID                    #<! Assign initial field value
        #OF('DATEMODIFIED')
%Field = TODAY()                       #<! Assign initial field value
        #OF('TIMEMODIFIED')
%Field = CLOCK()                       #<! Assign initial field value
        #OF('USERMODIFIED')
%Field = glo:UserID                    #<! Assign initial field value
        #ENDCASE
      #ENDFOR
    #ENDIF
  #RESUME
#ENDAT
#!
#!
#AT(%FileManagerCodeSection,,'Insert','(),BYTE'),PRIORITY(4500),WHERE(NOT %DoNotGenerate)
  #SUSPEND
    #FIX(%FileToSet,%File)
    #IF(%FileToSet)
      #RELEASE
      #FOR(%Field)
        #CASE(UPPER(%FieldID))
        #OF('CREATEDATE')
%Field = TODAY()                       #<! Assign initial field value
        #OF('CREATETIME')
%Field = CLOCK()                       #<! Assign initial field value
        #OF('CREATEUSER')
%Field = glo:UserID                    #<! Assign initial field value
        #OF('DATEMODIFIED')
%Field = TODAY()                       #<! Assign initial field value
        #OF('TIMEMODIFIED')
%Field = CLOCK()                       #<! Assign initial field value
        #OF('USERMODIFIED')
%Field = glo:UserID                    #<! Assign initial field value
        #ENDCASE
      #ENDFOR
    #ENDIF
  #RESUME
#ENDAT
#!
#!
#AT(%FileManagerCodeSection,,'TryUpdate','(),BYTE'),PRIORITY(4500),WHERE(NOT %DoNotGenerate)
  #SUSPEND
    #FIX(%FileToSet,%File)
    #IF(%FileToSet)
      #RELEASE
      #FOR(%Field)
        #CASE(UPPER(%FieldID))
        #OF('DATEMODIFIED')
%Field = TODAY()                       #<! Assign initial field value
        #OF('TIMEMODIFIED')
%Field = CLOCK()                       #<! Assign initial field value
        #OF('USERMODIFIED')
%Field = glo:UserID                    #<! Assign initial field value
        #ENDCASE
      #ENDFOR
    #ENDIF
  #RESUME
#ENDAT
#!
#!
#AT(%FileManagerCodeSection,,'Update','(),BYTE'),PRIORITY(4500),WHERE(NOT %DoNotGenerate)
  #SUSPEND
    #FIX(%FileToSet,%File)
    #IF(%FileToSet)
      #RELEASE
      #FOR(%Field)
        #CASE(UPPER(%FieldID))
        #OF('DATEMODIFIED')
%Field = TODAY()                       #<! Assign initial field value
        #OF('TIMEMODIFIED')
%Field = CLOCK()                       #<! Assign initial field value
        #OF('USERMODIFIED')
%Field = glo:UserID                    #<! Assign initial field value
        #ENDCASE
      #ENDFOR
    #ENDIF
  #RESUME
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(LeftJustifyDropList,'Align Drop List with Left Hand edge of Drop Control'),PROCEDURE,MULTI
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'LeftJustifyDropList (Devuna)','Add code to Left Align Drop List with Drop Control')
  #DECLARE(%DropListControls),MULTI
  #FOR(%Control),WHERE(%ControlType = 'LIST' AND EXTRACT(%ControlStatement,'DROP',1) > 0)
    #ADD(%DropListControls,%Control)
  #ENDFOR
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('Adds code to Left Align Drop List with Drop Control'),AT(10)
  #DISPLAY ('')
  #PROMPT('&Do Not Generate Any Code',CHECK),%DoNotGenerate,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
  #PROMPT('DropList control:',FROM(%DropListControls)),%DropListControl
  #DISPLAY ('')
#ENDBOXED
#ATSTART
  #DECLARE(%InstancePrefix)
  #SET(%InstancePrefix,SUB(%DropListControl,2,LEN(%DropListControl)-1))
#ENDAT
#!
#!
#AT(%CustomModuleDeclarations),WHERE(NOT %DoNotGenerate)
  #SET(%ValueConstruct,SUB(%DropListControl,2,LEN(%DropListControl)-1) & ':wndProc')
  #ADD(%CustomModuleMapModule,'CURRENT MODULE')
  #ADD(%CustomModuleMapProcedure,%ValueConstruct)
  #SET(%CustomModuleMapProcedurePrototype,'PROCEDURE(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam),LONG,PASCAL')
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9300),WHERE(NOT %DoNotGenerate)
kcr_SetProp((%DropListControl{PROP:ListFEQ}){PROP:Handle},'WndProc',(%DropListControl{PROP:ListFEQ}){PROP:WndProc})
kcr_SetProp((%DropListControl{PROP:ListFEQ}){PROP:Handle},'DropControl',%DropListControl{PROP:Handle})
(%DropListControl{PROP:ListFEQ}){PROP:WndProc} = ADDRESS(%InstancePrefix:wndProc)
#ENDAT
#!
#!
#AT(%LocalProcedures),WHERE(NOT %DoNotGenerate)
!========================================================================================
%InstancePrefix:wndProc PROCEDURE(HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam)
!========================================================================================
rc              LIKE(_RECT_)
wp              &WINDOWPOS
OrigWndProc     LONG
hwndDropControl UNSIGNED
#EMBED(%SubClassWindowDataSection,'wndProc:  Data Section'),%InstancePrefix

  CODE
    #EMBED(%SubClassWindowBeginCodeSection,'WndProc: Start of Code'),%InstancePrefix
    origWndProc = kcr_GetProp(hWnd,'WndProc')
    CASE wMsg
    OF WM_WINDOWPOSCHANGING
       hwndDropControl = kcr_GetProp(hWnd,'DropControl')
       kcr_GetWindowRect(hwndDropControl,rc)
       wp &= (lParam)
       wp.x = rc.left
       wp.y = rc.bottom
    #EMBED(%SubClassWindowCaseSection,'WndProc: Inside CASE MESSAGE statement'),%InstancePrefix
    END
    #EMBED(%SubClassWindowEndCodeSection,'WndProc: End of Code'),%InstancePrefix

    RETURN CallWindowProc(OrigWndProc,hWnd,wMsg,wParam,lParam)
#ENDAT
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_CloseIsCancelGlobal,'Populate ''KCR_CloseIsCancel'' Template'),APPLICATION(KCR_CloseIsCancel(KCR))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_CloseIsCancelGlobal (Devuna)','Populate ''KCR_CloseIsCancel'' Template')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_CloseIsCancel')
  #DISPLAY ('template to every procedure that contains the')
  #DISPLAY ('BrowseSelectButton(ABC) template.')
  #DISPLAY ('')
  #DISPLAY ('There are no prompts for this template.')
  #DISPLAY ('')
#ENDBOXED
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_CloseIsCancel,'Add ''Close is Cancel on Select'' code'),PROCEDURE,REQ(CloseButton(ABC))
#! ----------------------------------------------------------------
#RESTRICT
  #FOR(%ActiveTemplate),WHERE(%ActiveTemplate = 'BrowseSelectButton(ABC)')
    #ACCEPT
  #ENDFOR
  #REJECT
#ENDRESTRICT
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_CloseIsCancel (Devuna)','Add ''Close is Cancel on Select'' code')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds code to change the CLOSE button')
  #DISPLAY ('text and icon to CANCEL when it SELECT button is')
  #DISPLAY ('visible.')
  #DISPLAY ('')
  #PROMPT('&Do Not Generate Any Code',CHECK),%DoNotGenerate,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#ATSTART
  #DECLARE(%kcrCloseControl)
  #DECLARE(%kcrSelectControl)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(9300),DESCRIPTION('Close is Cancel on Select'),WHERE(NOT %DoNotGenerate)
#SUSPEND
  #FOR(%Control),WHERE(%ControlOriginal = '?Close')
    #SET(%kcrCloseControl,%Control)
    #BREAK
  #ENDFOR
  #FOR(%Control),WHERE(%ControlOriginal = '?Select')
    #SET(%kcrSelectControl,%Control)
    #BREAK
  #ENDFOR
  #IF(%kcrCloseControl AND %kcrSelectControl)
    #RELEASE
IF SELF.Request = SelectRecord
   %kcrCloseControl{PROP:TEXT} = 'Cancel'
   %kcrCloseControl{PROP:ICON} = '~CANCEL.ICO'
   %kcrSelectControl{PROP:XPOS} = (%kcrCloseControl{PROP:XPOS} - %kcrSelectControl{PROP:WIDTH} - 4)
   %kcrSelectControl{PROP:YPOS} = %kcrCloseControl{PROP:YPOS}
END
  #ENDIF
#RESUME
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_SetINIFilename,'Set INI Filename'),APPLICATION
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_SetINIFilename (Devuna)','Set INI Filename')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension allows the programmer to override')
  #DISPLAY ('the default ''Program Name.ini'' filename used when')
  #DISPLAY ('using a CSIDL Folder as the ini file location.')
  #DISPLAY ('')
  #PROMPT  ('&INI Filename:',@S64),%kcrINIFilename,DEFAULT(%Application & '.ini')
  #DISPLAY ('')
  #PROMPT('&Do Not Generate Any Code',CHECK),%DoNotGenerate,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%AfterEntryPointCodeStatement),WHERE(NOT %DoNotGenerate)
   #SET(%INIFilename,%kcrINIFilename)
#ENDAT
#!
#!
#!
#!
#!-----------------------------------------------------------------
#EXTENSION(KCR_PostApplicationEvents,'Post Application Events to Main Thread')
#!-----------------------------------------------------------------
#AT(%WindowManagerMethodCodeSection,'Run','(),BYTE'),PRIORITY(2500),DESCRIPTION('Post Procedure Open Event to Main Thread')
   #SET(%ValueConstruct,'POST(EVENT:' & %Procedure & 'Open,,glo:MainThread)')
%ValueConstruct
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Run','(),BYTE'),PRIORITY(7500),DESCRIPTION('Post Procedure Close Event to Main Thread')
   #SET(%ValueConstruct,'POST(EVENT:' & %Procedure & 'Close,,glo:MainThread)')
%ValueConstruct
#ENDAT
#!
#!
#!
#!
#! ----------------------------------------------------------------
#EXTENSION(KCR_AddQBEVisualEffects,'Add Visual Effects to QueryListVisual window'),PROCEDURE,REQ(BrowseQBEButton(ABC))
#! ----------------------------------------------------------------
#BOXED('Default MakeHead Prompts'),AT(0,0),WHERE(%False),HIDE
  #INSERT(%MakeHeadHiddenPrompts)
#ENDBOXED
#PREPARE
  #INSERT (%MakeHead,'KCR_AddQBEVisualEffects (Devuna)','Add Visual Effects to QueryListVisual window')
#ENDPREPARE
#BOXED('Devuna')
  #INSERT (%Head)
  #DISPLAY ('This extension adds the KCR_AddQBEVisualEffects')
  #DISPLAY ('template to the procedure.')
  #DISPLAY ('')
  #PROMPT('&Window Caption:',@S64),%qbeWindowCaption
  #DISPLAY ('')
  #PROMPT('&Do Not Generate Any Code',CHECK),%DoNotGenerate,AT(10),DEFAULT(%FALSE)
  #DISPLAY ('')
#ENDBOXED
#!
#!
#AT(%CustomGlobalDeclarations)
  #PROJECT('cancel.ico')
  #PROJECT('delete.ico')
  #PROJECT('diskette.ico')
  #PROJECT('edit.ico')
  #PROJECT('eraser.ico')
  #PROJECT('filter.ico')
  #PROJECT('new.ico')
  #PROJECT('ok.ico')
  #PROJECT('refresh.ico')
#ENDAT
#!
#!
#AT(%BeforeGlobalIncludes),PRIORITY(4000),WHERE(NOT %DoNotGenerate)
   INCLUDE('ctIconPicker.inc'),ONCE
#ENDAT
#!
#!
#AT(%DataSection),PRIORITY(50),WHERE(NOT %DoNotGenerate)
qbeEditEntryClass    CLASS(EditEntryClass),TYPE
CreateControl           PROCEDURE,VIRTUAL,PROTECTED
                     END
qbeEditDropListClass CLASS(EditDropListClass),TYPE
CreateControl           PROCEDURE,VIRTUAL,PROTECTED
                     END
qbeIconPicker        ctIconPicker
#ENDAT
#!
#!
#AT(%LocalProcedures),PRIORITY(9950)
qbeEditEntryClass.CreateControl     PROCEDURE
   CODE
      PARENT.CreateControl()
      SELF.feq{PROP:Background} = glo:BackColor !COLOR:WHITE
      RETURN

qbeEditDropListClass.CreateControl  PROCEDURE
   CODE
      PARENT.CreateControl()
      SELF.feq{PROP:Background} = glo:BackColor !COLOR:WHITE
      RETURN
#ENDAT
#!
#!
#AT(%QBEVisualMethodCodeSection,%ActiveTemplateParentInstance,'Init','(),BYTE'),PRIORITY(7500),DESCRIPTION('QBE VisualEffects'),WHERE(NOT %DoNotGenerate)
DISPOSE(SELF.FldsEIP)
SELF.FldsEIP &= NEW qbeEditDropListClass

DISPOSE(SELF.OpsEIP)
SELF.OpsEIP &= NEW qbeEditDropListClass

DISPOSE(SELF.ValueEIP)
SELF.ValueEIP &= NEW qbeEditEntryClass
#ENDAT
#!
#!
#AT(%QBEVisualMethodCodeSection,%ActiveTemplateParentInstance,'TakeWindowEvent','(),BYTE'),PRIORITY(7500),DESCRIPTION('QBE VisualEffects'),WHERE(NOT %DoNotGenerate)
CASE EVENT()
  OF EVENT:OpenWindow
  #IF(%ProgramExtension = 'EXE')
     SELF.QFC.Window{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~filter.ico') & ']'
  #ELSE
     SELF.QFC.Window{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~filter.ico') & ']'
  #ENDIF
     SELF.QFC.Window{PROP:Double} = TRUE
  #IF(%qbeWindowCaption = '')
     SELF.QFC.Window{PROP:Text} = SELF.QC.ParentWindow{PROP:Text} & ' Query Settings'
  #ELSE
     SELF.QFC.Window{PROP:Text} = '%qbeWindowCaption'
  #ENDIF
  COMPILE('***ENDCOMPILE***',_EnableTypefaceCode_)
     SELF.QFC.Window{PROP:FontName} = glo:Typeface
  !***ENDCOMPILE***
     SELF.QFC.Window{PROP:Color} = glo:BrowseColor

     FEQ:SheetControl{PROP:Color} = glo:SheetColor

     Y = FEQ:ListBox{PROP:YPos}
     H = FEQ:ListBox{PROP:Height}
     FEQ:ListBox{PROP:YPos} = Y + 4
     FEQ:ListBox{PROP:Height} = H - 4
     FEQ:ListBox{PROP:Color} = glo:BackColor
     FEQ:ListBox{PROP:SelectedFillColor} = glo:BackSelectedColor
     FEQ:ListBox{PROP:SelectedColor} = glo:TextSelectedColor

     Y = FEQ:SaveListBox{PROP:YPos}
     H = FEQ:SaveListBox{PROP:Height}
     FEQ:SaveListBox{PROP:YPos} = Y + 4
     FEQ:SaveListBox{PROP:Height} = H - 6
     FEQ:SaveListBox{PROP:Color} = glo:BackColor
     FEQ:SaveListBox{PROP:SelectedFillColor} = glo:BackSelectedColor
     FEQ:SaveListBox{PROP:SelectedColor} = glo:TextSelectedColor

     SELF.Resizer.Reset()

     FEQ:QueryNameField{PROP:Color} = COLOR:WHITE

     FEQ:Insert{PROP:Text} = '&New'
     FEQ:Insert{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:Insert{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~new.ico') & ']'
  #ELSE
     FEQ:Insert{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~new.ico') & ']'
  #ENDIF

     FEQ:Change{PROP:Text} = '&Edit'
     FEQ:Change{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:Change{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~edit.ico') & ']'
  #ELSE
     FEQ:Change{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~edit.ico') & ']'
  #ENDIF

     FEQ:Delete{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:Delete{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~delete.ico') & ']'
  #ELSE
     FEQ:Delete{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~delete.ico') & ']'
  #ENDIF

     FEQ:OK{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:OK{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~ok.ico') & ']'
  #ELSE
     FEQ:OK{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~ok.ico') & ']'
  #ENDIF

     FEQ:Cancel{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:Cancel{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~cancel.ico') & ']'
  #ELSE
     FEQ:Cancel{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~cancel.ico') & ']'
  #ENDIF

     FEQ:Clear{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:Clear{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~eraser.ico') & ']'
  #ELSE
     FEQ:Clear{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~eraser.ico') & ']'
  #ENDIF

     FEQ:SaveQueryButton{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:SaveQueryButton{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~save.ico') & ']'
  #ELSE
     FEQ:SaveQueryButton{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~save.ico') & ']'
  #ENDIF

     FEQ:DeleteQueryButton{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:DeleteQueryButton{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~delete.ico') & ']'
  #ELSE
     FEQ:DeleteQueryButton{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~delete.ico') & ']'
  #ENDIF

     FEQ:RestoreQueryButton{PROP:LEFT} = TRUE
  #IF(%ProgramExtension = 'EXE')
     FEQ:RestoreQueryButton{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.GetResourceIndex('~refresh.ico') & ']'
  #ELSE
     FEQ:RestoreQueryButton{PROP:ICON} = '%ProjectTarget[' & qbeIconPicker.FindResourceIndex('%ProjectTarget','~refresh.ico') & ']'
  #ENDIF

     kcr_SetWindowLong(0{prop:handle},GWL_STYLE,BXOR(kcr_GetWindowLong(0{prop:handle},GWL_STYLE),WS_MINIMIZEBOX))
     kcr_SetWindowLong(0,GWL_STYLE,BOR(kcr_GetWindowLong(0{prop:handle},GWL_STYLE),WS_SYSMENU))
     kcr_GetWindowRect(0{prop:handle},rc)
     kcr_InvalidateRect(0,rc,TRUE)
     hRgnUpdate = kcr_CreateRectRgn(0,0,1,1)
     kcr_SendMessage(0,WM_NCPAINT,kcr_GetUpdateRgn(0,hRgnUpdate,FALSE),0)
END
#ENDAT
#!
#!
#AT(%QBEVisualMethodDataSection,%ActiveTemplateParentInstance,'TakeWindowEvent','(),BYTE'),PRIORITY(5000),DESCRIPTION('QBE VisualEffects'),WHERE(NOT %DoNotGenerate)
  #IF(%ProgramExtension <> 'EXE')
szProgramName       CSTRING(261)
J                   LONG
  #ENDIF
I                   LONG
Y                   LONG
H                   LONG
rc                  LIKE(RECT)
hRgnUpdate          HRGN
qbeCaption          CSTRING(256)
#ENDAT
#!
#!
#!
#!
