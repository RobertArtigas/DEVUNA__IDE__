#! ================================================================================================
#!                           DEVUNA - Application Builder Class Templates
#! ================================================================================================
#! Author:  Randy Rogers (KCR) <rrogers@devuna.com>
#! Notice:  Copyright (C) 2017, Devuna
#!          Distributed under the MIT License (https://opensource.org/licenses/MIT)
#! ================================================================================================
#!    This file is part of Devuna-Common (https://github.com/Devuna/Devuna-Common)
#!
#!    Devuna-Common is free software: you can redistribute it and/or modify
#!    it under the terms of the MIT License as published by
#!    the Open Source Initiative.
#!
#!    Devuna-Common is distributed in the hope that it will be useful,
#!    but WITHOUT ANY WARRANTY; without even the implied warranty of
#!    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#!    MIT License for more details.
#!
#!    You should have received a copy of the MIT License
#!    along with Devuna-Common.  If not, see <https://opensource.org/licenses/MIT>.
#! ================================================================================================
#!
#CODE(KCR_ControlValueValidation,'Control Value Validation')
#RESTRICT
  #CASE(%ControlType)
  #OF('ENTRY')
  #OROF('SPIN')
  #OROF('COMBO')
    #CASE(%ControlEvent)
    #OF('Accepted')
    #OROF('Selected')
      #ACCEPT
    #ELSE
      #REJECT
    #ENDCASE
  #ELSE
    #REJECT
  #ENDCASE
#ENDRESTRICT
#DISPLAY('This Code Template is used to perform a control value')
#DISPLAY('validation.  This Code Template only works for')
#DISPLAY('the Selected or Accepted Events for an Entry Control.')
#DISPLAY('')
#PROMPT('Lookup Key',KEY),%LookupKey,REQ
#PROMPT('Lookup Field',COMPONENT(%LookupKey)),%LookupField,REQ
#PROMPT('Lookup Procedure',PROCEDURE),%LookupProcedure
#PROMPT('ID Source',FIELD),%IDSource,REQ
#PROMPT('ID Destination',FIELD),%IDDestination,REQ
#DISPLAY('')
#DISPLAY('The Lookup Key is the key used to perform the value validation.')
#DISPLAY('If the Lookup Key is a multi-component key, you must insure that')
#DISPLAY('other key elements are primed BEFORE this Code Template is used.')
#DISPLAY('')
#DISPLAY('The Lookup field must be a component of the Lookup Key.  Before execution')
#DISPLAY('of the lookup code, this field will be assigned the value of the control being')
#DISPLAY('validated.  The control will be assigned the value of the lookup field and')
#DISPLAY('the Destination ID field will be assigned the value of the Source ID field if')
#DISPLAY('the Lookup procedure is successful.')
#DISPLAY('')
#DISPLAY('The Lookup Procedure is called to let the user to select a value.  Request')
#DISPLAY('upon entrance to the Lookup will be set to SelectRecord, and successful')
#DISPLAY('completion is signalled when Response = RequestCompleted.')
#IF(%ControlEvent='Accepted')
 IF %ControlUse OR %Control{Prop:Req} <> False
#ENDIF
   %LookupField = %ControlUse                        #<! Move value for lookup
#FIND(%Field,%LookupField)                           #! FIX field for lookup
   IF Access:%File.TryFetch(%LookupKey)              #<! IF record not found
     GlobalRequest = SelectRecord                    #<! Set Action for Lookup
     %LookupProcedure                                #<! Call Lookup Procedure
     IF GlobalResponse = RequestCompleted            #<! IF Lookup successful
       GlobalResponse = RequestCancelled             #<! Clear the Action Value
       %ControlUse = %LookupField                    #<! Move value to control field
       %DestinationID = %SourceID                    #<! Move Source to Destination ID
#IF(%ControlEvent='Accepted')                        #! IF a Post-Edit Validation
     ELSE                                            #<! ELSE (IF Lookup NOT...)
       SELECT(%Control)                              #<! Select the control
       CYCLE                                         #<! Go back to ACCEPT
#ENDIF                                               #! END (IF a Pre-Edit...)
     END                                             #<! END (IF Lookup successful)
#IF(%ControlEvent='Selected')                        #! IF a Pre-Edit Validation
     SELECT(%Control)                                #<! Select the control
#ENDIF                                               #! END (IF a Pre-Edit...)
   END                                               #<! END (IF record not found)
#IF(%ControlEvent='Accepted')
 END
#ELSIF (%ControlEvent<>'Selected')
  #ERROR('Value Validation Code Template must be used for Accepted or Selected Control Events!')
#ENDIF
#!-------------------------------------------------------------------------
#CODE(KCR_ProcessScroll,'Process List Scroll Events')
#PROMPT('List Control',CONTROL),%ListControl,DEFAULT('?List')
#FIX(%Control,%ListControl)
case event()
of EVENT:ScrollUp
   if choice( %ListControl ) <> 1
      select( %ListControl, choice( %ListControl) - 1 )
   end
of EVENT:ScrollDown
   if choice( %ListControl) < records( %ControlFrom )
      select( %ListControl, choice( %ListControl) + 1 )
   end
of EVENT:PageUp
   if choice( %ListControl) > %ListControl{PROP:Items}
      select( %ListControl, choice( %ListControl) - %ListControl{PROP:Items} )
   else
      select( %ListControl, 1 )
   end
of EVENT:PageDown
   if choice( %ListControl) < %ListControl{PROP:Items}
      if choice( %ListControl) + %ListControl{PROP:Items} < records( %ControlFrom )
         select( %ListControl, choice( %ListControl) + %ListControl{PROP:Items} )
      else
         select( %ListControl, records( %ControlFrom ) )
      end
   else
      select( %ListControl, records( %ControlFrom ) )
   end
of EVENT:ScrollTop
   select( %ListControl, 1 )
of EVENT:ScrollBottom
   select( %ListControl, records( %ControlFrom ) )
end
#!-------------------------------------------------------------------------
#CODE(KCR_FillAutoOrderQueue,'Fill Import Order Queue')
#DECLARE(%SortedFile),MULTI,UNIQUE
#DECLARE(%ThisLevel)
#DECLARE(%Level)
#SET(%Level,1)
#DECLARE(%Count)
#SET(%Count,0)
#!
#DECLARE(%FileCount)
#SET(%FileCount,0)
#FOR(%File)
  #ADD(%SortedFile,%File)
  #SET(%FileCount,%FileCount+1)
#ENDFOR
#!
#DECLARE(%FileCount2)
#SET(%FileCount2,0)
#!
#DECLARE(%ProcessedFile),MULTI,UNIQUE
#DECLARE(%ThisLevelProcessedFile),MULTI,UNIQUE
#!
FREE(AutoOrderQueue)
#FOR(%SortedFile)
  #SET(%Count,0)
  #FIX(%File,%SortedFile)
  #FOR(%Relation),WHERE(%FileRelationType = 'MANY:1')
    #SET(%Count,%Count+1)
  #ENDFOR
  #IF(%Count = 0)
    #ADD(%ProcessedFile,%File)
    #SET(%FileCount2,%FileCount2+1)
    #IF(~INSTRING('NOPOPULATE',%FileQuickOptions,1))
AutoOrderQueue.szName = 'Version 1.5 %File Import'
ADD(AutoOrderQueue)
    #ENDIF
  #ENDIF
#ENDFOR
#!
#LOOP,UNTIL(%FileCount2 = %FileCount)
  #SET(%Level,%Level+1)
  #PURGE(%ThisLevelProcessedFile)
  #FOR(%SortedFile)
    #FIX(%ProcessedFile,%SortedFile)
    #IF(%ProcessedFile)
      #CYCLE
    #ELSE
      #FIX(%File,%SortedFile)
      #SET(%ThisLevel,0)
      #FOR(%Relation),WHERE(%FileRelationType = 'MANY:1')
        #FIX(%ProcessedFile,%Relation)
        #IF(%ProcessedFile)
          #SET(%ThisLevel,1)
        #ELSE
          #SET(%ThisLevel,0)
          #BREAK
        #ENDIF
      #ENDFOR
      #IF(%ThisLevel)
        #ADD(%ThisLevelProcessedFile,%File)
        #IF(~INSTRING('NOPOPULATE',%FileQuickOptions,1))
AutoOrderQueue.szName = 'Version 1.5 %File Import'
ADD(AutoOrderQueue)
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDFOR
  #FOR(%ThisLevelProcessedFile)
    #ADD(%ProcessedFile,%ThisLevelProcessedFile)
    #SET(%FileCount2,%FileCount2+1)
  #ENDFOR
#ENDLOOP
#!-------------------------------------------------------------------------
#CODE(KCR_AssignFileReference,'Assign Passed Filename to File Reference')
#DECLARE(%SortedFile),UNIQUE,MULTI
#FOR(%File),WHERE(~INSTRING('NOPOPULATE',%FileQuickOptions,1))
    #ADD(%SortedFile,%File)
#ENDFOR
CASE szFilename
#FOR(%SortedFile)
  OF '%SortedFile'
     F &= %SortedFile
#ENDFOR
END
#!
#!-------------------------------------------------------------------------
#CODE(KCR_HighlightRegions,'Set Region Border Color')
#PROMPT('&Border Color:',COLOR),%BorderColor,DEFAULT(0)
#FOR(%Control),WHERE(%ControlType='REGION')
 IF %Control{PROP:COLOR} = %BorderColor
    %Control{PROP:COLOR} = COLOR:NONE
 ELSE
    %Control{PROP:COLOR} = %BorderColor
 END
#ENDFOR
#!
#!
#!-------------------------------------------------------------------------
#!
#GROUP(%GenerateStream,%pFile,%pCommand)
#FIX(%File,%pFile)
%pCommand(%File)
#INDENT(+2)
#FOR(%Relation),WHERE(%FileRelationType='1:MANY')
#INSERT(%GenerateStream,%Relation,%pCommand)
#ENDFOR
#INDENT(-2)
#!
#!-------------------------------------------------------------------------
#CODE(KCR_StreamRelation,'Stream Related Files')
#PROMPT('&Primary File:',FILE),%PrimaryFile
#PROMPT('&Command',OPTION),%Command,DEFAULT('STREAM')
#PROMPT('STREAM',RADIO)
#PROMPT('FLUSH',RADIO)
#INSERT(%GenerateStream,%PrimaryFile,%Command)
#!
#!
#!-------------------------------------------------------------------------
#CODE(KCR_LoadControlPositions,'Load control positions from ini file')
#FOR(%Control),WHERE(%Control <> '')
  #SET(%ValueConstruct,EXTRACT(%ControlStatement,'FULL'))
  #IF(%ValueConstruct)
    #CYCLE
  #ENDIF
  #CASE(%ControlType)
  #OF('MENU')
  #OF('ITEM')
  #!OF('PANEL')
  #ELSE
    #SET(%ValueConstruct,SUB(%Control,2,LEN(%Control)))
X# = %Control{PROP:XPos}
Y# = %Control{PROP:YPos}
W# = %Control{PROP:Width}
H# = %Control{PROP:Height}
INIMgr.Fetch('%ValueConstruct','XPos', X#)
INIMgr.Fetch('%ValueConstruct','YPos', Y#)
INIMgr.Fetch('%ValueConstruct','Width', W#)
INIMgr.Fetch('%ValueConstruct','Height', H#)
SETPOSITION(%Control,X#,Y#,W#,H#)
  #ENDCASE
#ENDFOR
#!
#!
#!-------------------------------------------------------------------------
#CODE(KCR_SaveControlPositions,'Save control positions to ini file')
#FOR(%Control),WHERE(%Control <> '')
  #SET(%ValueConstruct,EXTRACT(%ControlStatement,'FULL'))
  #IF(%ValueConstruct)
    #CYCLE
  #ENDIF
  #CASE(%ControlType)
  #OF('MENU')
  #OF('ITEM')
  #!OF('PANEL')
  #ELSE
    #SET(%ValueConstruct,SUB(%Control,2,LEN(%Control)-1))
X# = %Control{PROP:XPos}
Y# = %Control{PROP:YPos}
W# = %Control{PROP:Width}
H# = %Control{PROP:Height}
INIMgr.Update('%ValueConstruct','XPos', X#)
INIMgr.Update('%ValueConstruct','YPos', Y#)
INIMgr.Update('%ValueConstruct','Width', W#)
INIMgr.Update('%ValueConstruct','Height', H#)
  #ENDCASE
#ENDFOR
#!
#!
#EXTENSION(MagicNumberEquates,'Generate Magic Number Equates')
#AT(%LocalDataAfterClasses)
#DECLARE(%MyEquateName)
#DECLARE(%MyEquateValue)
#FOR(%ProcsCalled)
#SUSPEND
#SET(%MyEquateName,'e' & %ProcsCalled)
#SET(%MyEquateValue,'EQUATE(' & INSTANCE(%ProcsCalled) & ')')
%[19]MyEquateName %MyEquateValue
#RESUME
#ENDFOR
#ENDAT
